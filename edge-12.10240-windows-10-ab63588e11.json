{
  "results": {
    "http://mdn-bcd-collector.appspot.com/api/interfaces.html": [
      {
        "name": "api.AbortController",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbortController' is undefined",
        "name": "api.AbortController.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbortController' is undefined",
        "name": "api.AbortController.signal",
        "result": null
      },
      {
        "name": "api.AbortSignal",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbortSignal' is undefined",
        "name": "api.AbortSignal.aborted",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbortSignal' is undefined",
        "name": "api.AbortSignal.onabort",
        "result": null
      },
      {
        "name": "api.AbsoluteOrientationSensor",
        "result": false
      },
      {
        "name": "api.AbstractRange",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.collapsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.endContainer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.endOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.startContainer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.startOffset",
        "result": null
      },
      {
        "name": "api.Accelerometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.z",
        "result": null
      },
      {
        "name": "api.AmbientLightSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AmbientLightSensor' is undefined",
        "name": "api.AmbientLightSensor.illuminance",
        "result": null
      },
      {
        "name": "api.AnalyserNode",
        "result": true
      },
      {
        "name": "api.AnalyserNode.fftSize",
        "result": true
      },
      {
        "name": "api.AnalyserNode.frequencyBinCount",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getByteFrequencyData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getByteTimeDomainData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getFloatFrequencyData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getFloatTimeDomainData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.maxDecibels",
        "result": true
      },
      {
        "name": "api.AnalyserNode.minDecibels",
        "result": true
      },
      {
        "name": "api.AnalyserNode.smoothingTimeConstant",
        "result": true
      },
      {
        "name": "api.Animation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.cancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.commitStyles",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.effect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.finish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.finished",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.oncancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.onfinish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.onremove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.pending",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.persist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.play",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.playbackRate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.playState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.replaceState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.reverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.startTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.timeline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.updatePlaybackRate",
        "result": null
      },
      {
        "name": "api.AnimationEffect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.getComputedTiming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.getTiming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.localTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.updateTiming",
        "result": null
      },
      {
        "name": "api.AnimationEvent",
        "result": true
      },
      {
        "name": "api.AnimationEvent.animationName",
        "result": true
      },
      {
        "name": "api.AnimationEvent.elapsedTime",
        "result": true
      },
      {
        "name": "api.AnimationEvent.pseudoElement",
        "result": false
      },
      {
        "name": "api.AnimationPlaybackEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationPlaybackEvent' is undefined",
        "name": "api.AnimationPlaybackEvent.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationPlaybackEvent' is undefined",
        "name": "api.AnimationPlaybackEvent.timelineTime",
        "result": null
      },
      {
        "name": "api.AnimationTimeline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationTimeline' is undefined",
        "name": "api.AnimationTimeline.currentTime",
        "result": null
      },
      {
        "name": "api.ApplicationCache",
        "result": true
      },
      {
        "name": "api.ApplicationCache.abort",
        "result": true
      },
      {
        "name": "api.ApplicationCache.CHECKING",
        "result": true
      },
      {
        "name": "api.ApplicationCache.DOWNLOADING",
        "result": true
      },
      {
        "name": "api.ApplicationCache.IDLE",
        "result": true
      },
      {
        "name": "api.ApplicationCache.OBSOLETE",
        "result": true
      },
      {
        "name": "api.ApplicationCache.oncached",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onchecking",
        "result": true
      },
      {
        "name": "api.ApplicationCache.ondownloading",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onerror",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onnoupdate",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onobsolete",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onprogress",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onupdateready",
        "result": true
      },
      {
        "name": "api.ApplicationCache.status",
        "result": true
      },
      {
        "name": "api.ApplicationCache.swapCache",
        "result": true
      },
      {
        "name": "api.ApplicationCache.UNCACHED",
        "result": true
      },
      {
        "name": "api.ApplicationCache.update",
        "result": true
      },
      {
        "name": "api.ApplicationCache.UPDATEREADY",
        "result": true
      },
      {
        "name": "api.Attr",
        "result": true
      },
      {
        "name": "api.Attr.localName",
        "result": true
      },
      {
        "name": "api.Attr.name",
        "result": true
      },
      {
        "name": "api.Attr.namespaceURI",
        "result": true
      },
      {
        "name": "api.Attr.ownerElement",
        "result": true
      },
      {
        "name": "api.Attr.prefix",
        "result": true
      },
      {
        "name": "api.Attr.specified",
        "result": true
      },
      {
        "name": "api.Attr.value",
        "result": true
      },
      {
        "name": "api.AudioBuffer",
        "result": true
      },
      {
        "name": "api.AudioBuffer.copyFromChannel",
        "result": false
      },
      {
        "name": "api.AudioBuffer.copyToChannel",
        "result": false
      },
      {
        "name": "api.AudioBuffer.duration",
        "result": true
      },
      {
        "name": "api.AudioBuffer.getChannelData",
        "result": true
      },
      {
        "name": "api.AudioBuffer.length",
        "result": true
      },
      {
        "name": "api.AudioBuffer.numberOfChannels",
        "result": true
      },
      {
        "name": "api.AudioBuffer.sampleRate",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.buffer",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.detune",
        "result": false
      },
      {
        "name": "api.AudioBufferSourceNode.loop",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.loopEnd",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.loopStart",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.playbackRate",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.start",
        "result": true
      },
      {
        "name": "api.AudioContext",
        "result": true
      },
      {
        "name": "api.AudioContext.baseLatency",
        "result": false
      },
      {
        "name": "api.AudioContext.close",
        "result": false
      },
      {
        "name": "api.AudioContext.createMediaElementSource",
        "result": true
      },
      {
        "name": "api.AudioContext.createMediaStreamDestination",
        "result": false
      },
      {
        "name": "api.AudioContext.createMediaStreamSource",
        "result": true
      },
      {
        "name": "api.AudioContext.createMediaStreamTrackSource",
        "result": false
      },
      {
        "name": "api.AudioContext.getOutputTimestamp",
        "result": false
      },
      {
        "name": "api.AudioContext.outputLatency",
        "result": false
      },
      {
        "name": "api.AudioContext.resume",
        "result": false
      },
      {
        "name": "api.AudioContext.suspend",
        "result": false
      },
      {
        "name": "api.AudioDestinationNode",
        "result": true
      },
      {
        "name": "api.AudioDestinationNode.maxChannelCount",
        "result": true
      },
      {
        "name": "api.AudioListener",
        "result": true
      },
      {
        "name": "api.AudioListener.forwardX",
        "result": false
      },
      {
        "name": "api.AudioListener.forwardY",
        "result": false
      },
      {
        "name": "api.AudioListener.forwardZ",
        "result": false
      },
      {
        "name": "api.AudioListener.positionX",
        "result": false
      },
      {
        "name": "api.AudioListener.positionY",
        "result": false
      },
      {
        "name": "api.AudioListener.positionZ",
        "result": false
      },
      {
        "name": "api.AudioListener.setOrientation",
        "result": true
      },
      {
        "name": "api.AudioListener.setPosition",
        "result": true
      },
      {
        "name": "api.AudioListener.upX",
        "result": false
      },
      {
        "name": "api.AudioListener.upY",
        "result": false
      },
      {
        "name": "api.AudioListener.upZ",
        "result": false
      },
      {
        "name": "api.AudioNode",
        "result": true
      },
      {
        "name": "api.AudioNode.channelCount",
        "result": true
      },
      {
        "name": "api.AudioNode.channelCountMode",
        "result": true
      },
      {
        "name": "api.AudioNode.channelInterpretation",
        "result": true
      },
      {
        "name": "api.AudioNode.connect",
        "result": true
      },
      {
        "name": "api.AudioNode.connect",
        "result": true
      },
      {
        "name": "api.AudioNode.context",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.numberOfInputs",
        "result": true
      },
      {
        "name": "api.AudioNode.numberOfOutputs",
        "result": true
      },
      {
        "name": "api.AudioParam",
        "result": true
      },
      {
        "name": "api.AudioParam.automationRate",
        "result": false
      },
      {
        "name": "api.AudioParam.cancelAndHoldAtTime",
        "result": false
      },
      {
        "name": "api.AudioParam.cancelScheduledValues",
        "result": true
      },
      {
        "name": "api.AudioParam.defaultValue",
        "result": true
      },
      {
        "name": "api.AudioParam.exponentialRampToValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.linearRampToValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.maxValue",
        "result": false
      },
      {
        "name": "api.AudioParam.minValue",
        "result": false
      },
      {
        "name": "api.AudioParam.setTargetAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.setValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.setValueCurveAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.value",
        "result": true
      },
      {
        "name": "api.AudioParamMap",
        "result": false
      },
      {
        "name": "api.AudioProcessingEvent",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.inputBuffer",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.outputBuffer",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.playbackTime",
        "result": true
      },
      {
        "name": "api.AudioScheduledSourceNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.onended",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.stop",
        "result": null
      },
      {
        "name": "api.AudioTrack",
        "result": true
      },
      {
        "name": "api.AudioTrack.enabled",
        "result": true
      },
      {
        "name": "api.AudioTrack.id",
        "result": true
      },
      {
        "name": "api.AudioTrack.kind",
        "result": true
      },
      {
        "name": "api.AudioTrack.label",
        "result": true
      },
      {
        "name": "api.AudioTrack.language",
        "result": true
      },
      {
        "name": "api.AudioTrack.sourceBuffer",
        "result": true
      },
      {
        "name": "api.AudioTrackList",
        "result": true
      },
      {
        "name": "api.AudioTrackList.getTrackById",
        "result": true
      },
      {
        "name": "api.AudioTrackList.length",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onchange",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onremovetrack",
        "result": true
      },
      {
        "name": "api.AudioWorklet",
        "result": false
      },
      {
        "name": "api.AudioWorkletNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.onprocessorerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.parameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.port",
        "result": null
      },
      {
        "name": "api.AuthenticatorAssertionResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.authenticatorData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.signature",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.userHandle",
        "result": null
      },
      {
        "name": "api.AuthenticatorAttestationResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAttestationResponse' is undefined",
        "name": "api.AuthenticatorAttestationResponse.attestationObject",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAttestationResponse' is undefined",
        "name": "api.AuthenticatorAttestationResponse.getTransports",
        "result": null
      },
      {
        "name": "api.AuthenticatorResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorResponse' is undefined",
        "name": "api.AuthenticatorResponse.clientDataJSON",
        "result": null
      },
      {
        "name": "api.BackgroundFetchManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.fetch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.getIds",
        "result": null
      },
      {
        "name": "api.BackgroundFetchRecord",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRecord' is undefined",
        "name": "api.BackgroundFetchRecord.request",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRecord' is undefined",
        "name": "api.BackgroundFetchRecord.responseReady",
        "result": null
      },
      {
        "name": "api.BackgroundFetchRegistration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.downloaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.downloadTotal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.failureReason",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.matchAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.onprogress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.recordsAvailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.result",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.uploaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.uploadTotal",
        "result": null
      },
      {
        "name": "api.BarcodeDetector",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BarcodeDetector' is undefined",
        "name": "api.BarcodeDetector.detect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BarcodeDetector' is undefined",
        "name": "api.BarcodeDetector.getSupportedFormats",
        "result": null
      },
      {
        "name": "api.BarProp",
        "result": true
      },
      {
        "name": "api.BarProp.visible",
        "result": true
      },
      {
        "name": "api.BaseAudioContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.audioWorklet",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createAnalyser",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBiquadFilter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBufferSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createChannelMerger",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createChannelSplitter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createConstantSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createConvolver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createDelay",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createDynamicsCompressor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createGain",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createIIRFilter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createOscillator",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createPanner",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createPeriodicWave",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createScriptProcessor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createStereoPanner",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createWaveShaper",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.decodeAudioData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.destination",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.listener",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.sampleRate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.state",
        "result": null
      },
      {
        "name": "api.Baseline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Baseline' is undefined",
        "name": "api.Baseline.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Baseline' is undefined",
        "name": "api.Baseline.value",
        "result": null
      },
      {
        "name": "api.BatteryManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.charging",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.chargingTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.dischargingTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.level",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onchargingchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onchargingtimechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.ondischargingtimechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onlevelchange",
        "result": null
      },
      {
        "name": "api.BeforeInstallPromptEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BeforeInstallPromptEvent' is undefined",
        "name": "api.BeforeInstallPromptEvent.prompt",
        "result": null
      },
      {
        "name": "api.BeforeUnloadEvent",
        "result": true
      },
      {
        "name": "api.BeforeUnloadEvent.returnValue",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.detune",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.frequency",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.gain",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.getFrequencyResponse",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.Q",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.type",
        "result": true
      },
      {
        "name": "api.Blob",
        "result": true
      },
      {
        "name": "api.Blob.arrayBuffer",
        "result": false
      },
      {
        "name": "api.Blob.size",
        "result": true
      },
      {
        "name": "api.Blob.slice",
        "result": true
      },
      {
        "name": "api.Blob.stream",
        "result": false
      },
      {
        "name": "api.Blob.text",
        "result": false
      },
      {
        "name": "api.Blob.type",
        "result": true
      },
      {
        "name": "api.BlobEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BlobEvent' is undefined",
        "name": "api.BlobEvent.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BlobEvent' is undefined",
        "name": "api.BlobEvent.timecode",
        "result": null
      },
      {
        "name": "api.Bluetooth",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.getAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onadvertisementreceived",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onavailabilitychanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.ongattserverdisconnected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.referringDevice",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.requestDevice",
        "result": null
      },
      {
        "name": "api.BluetoothAdvertisingEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.appearance",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.manufacturerData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.rssi",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.serviceData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.txPower",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.uuids",
        "result": null
      },
      {
        "name": "api.BluetoothCharacteristicProperties",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.authenticatedSignedWrites",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.broadcast",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.indicate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.notify",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.reliableWrite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.writableAuxiliaries",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.write",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.writeWithoutResponse",
        "result": null
      },
      {
        "name": "api.BluetoothDevice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.gatt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onadvertisementreceived",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.ongattserverdisconnected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.unwatchAdvertisements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.watchAdvertisements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.watchingAdvertisements",
        "result": null
      },
      {
        "name": "api.BluetoothManufacturerDataMap",
        "result": false
      },
      {
        "name": "api.BluetoothPermissionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothPermissionResult' is undefined",
        "name": "api.BluetoothPermissionResult.devices",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTCharacteristic",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.getDescriptor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.getDescriptors",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.properties",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.readValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.service",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.startNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.stopNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.uuid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValueWithoutResponse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValueWithResponse",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTDescriptor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.characteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.readValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.uuid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.writeValue",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTServer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.connect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.connected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.getPrimaryService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.getPrimaryServices",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTService",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getCharacteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getCharacteristics",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getIncludedService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getIncludedServices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.isPrimary",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.uuid",
        "result": null
      },
      {
        "name": "api.BluetoothServiceDataMap",
        "result": false
      },
      {
        "name": "api.BluetoothUUID",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.canonicalUUID",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getCharacteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getDescriptor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getService",
        "result": null
      },
      {
        "name": "api.BroadcastChannel",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.onmessageerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.postMessage",
        "result": null
      },
      {
        "name": "api.Cache",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.addAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.matchAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.put",
        "result": null
      },
      {
        "name": "api.CacheStorage",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.open",
        "result": null
      },
      {
        "name": "api.CanvasCaptureMediaStreamTrack",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CanvasCaptureMediaStreamTrack' is undefined",
        "name": "api.CanvasCaptureMediaStreamTrack.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CanvasCaptureMediaStreamTrack' is undefined",
        "name": "api.CanvasCaptureMediaStreamTrack.requestFrame",
        "result": null
      },
      {
        "name": "api.CanvasGradient",
        "result": true
      },
      {
        "name": "api.CanvasGradient.addColorStop",
        "result": true
      },
      {
        "name": "api.CanvasPattern",
        "result": true
      },
      {
        "name": "api.CanvasPattern.setTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.arc",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.arcTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.beginPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.bezierCurveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.canvas",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clearRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clip",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clip",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.closePath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createLinearGradient",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createPattern",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createRadialGradient",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.direction",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawFocusIfNeeded",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawFocusIfNeeded",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.ellipse",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.fill",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fill",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillStyle",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.filter",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.font",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getContextAttributes",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.getImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getLineDash",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.globalAlpha",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.globalCompositeOperation",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.imageSmoothingEnabled",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.imageSmoothingQuality",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInStroke",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInStroke",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.lineCap",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineDashOffset",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineJoin",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineWidth",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.measureText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.miterLimit",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.moveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.putImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.putImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.quadraticCurveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.rect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.resetTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.restore",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.rotate",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.save",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.scale",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.scrollPathIntoView",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.scrollPathIntoView",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.setLineDash",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.setTransform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.setTransform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowBlur",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowColor",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowOffsetX",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowOffsetY",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.stroke",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.stroke",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeStyle",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.textAlign",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.textBaseline",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.transform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.translate",
        "result": true
      },
      {
        "name": "api.CaretPosition",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.getClientRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.offset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.offsetNode",
        "result": null
      },
      {
        "name": "api.CDATASection",
        "result": true
      },
      {
        "name": "api.ChannelMergerNode",
        "result": true
      },
      {
        "name": "api.ChannelSplitterNode",
        "result": true
      },
      {
        "name": "api.CharacterData",
        "result": true
      },
      {
        "name": "api.CharacterData.after",
        "result": false
      },
      {
        "name": "api.CharacterData.appendData",
        "result": true
      },
      {
        "name": "api.CharacterData.before",
        "result": false
      },
      {
        "name": "api.CharacterData.data",
        "result": true
      },
      {
        "name": "api.CharacterData.deleteData",
        "result": true
      },
      {
        "name": "api.CharacterData.insertData",
        "result": true
      },
      {
        "name": "api.CharacterData.length",
        "result": true
      },
      {
        "name": "api.CharacterData.nextElementSibling",
        "result": false
      },
      {
        "name": "api.CharacterData.previousElementSibling",
        "result": false
      },
      {
        "name": "api.CharacterData.remove",
        "result": true
      },
      {
        "name": "api.CharacterData.replaceData",
        "result": true
      },
      {
        "name": "api.CharacterData.replaceWith",
        "result": false
      },
      {
        "name": "api.CharacterData.substringData",
        "result": true
      },
      {
        "name": "api.Clipboard",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.readText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.write",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.writeText",
        "result": null
      },
      {
        "name": "api.ClipboardEvent",
        "result": true
      },
      {
        "name": "api.ClipboardEvent.clipboardData",
        "result": true
      },
      {
        "name": "api.ClipboardItem",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.createDelayed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.delayed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.getType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.lastModified",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.presentationStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.types",
        "result": null
      },
      {
        "name": "api.CloseEvent",
        "result": true
      },
      {
        "name": "api.CloseEvent.code",
        "result": true
      },
      {
        "name": "api.CloseEvent.reason",
        "result": true
      },
      {
        "name": "api.CloseEvent.wasClean",
        "result": true
      },
      {
        "name": "api.Comment",
        "result": true
      },
      {
        "name": "api.CompositionEvent",
        "result": true
      },
      {
        "name": "api.CompositionEvent.data",
        "result": true
      },
      {
        "name": "api.ConstantSourceNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ConstantSourceNode' is undefined",
        "name": "api.ConstantSourceNode.offset",
        "result": null
      },
      {
        "name": "api.ConvolverNode",
        "result": true
      },
      {
        "name": "api.ConvolverNode.buffer",
        "result": true
      },
      {
        "name": "api.ConvolverNode.normalize",
        "result": true
      },
      {
        "name": "api.CookieChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CookieChangeEvent' is undefined",
        "name": "api.CookieChangeEvent.changed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieChangeEvent' is undefined",
        "name": "api.CookieChangeEvent.deleted",
        "result": null
      },
      {
        "name": "api.CookieStore",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getChangeSubscriptions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.subscribeToChanges",
        "result": null
      },
      {
        "name": "api.Coordinates",
        "result": true
      },
      {
        "name": "api.Coordinates.accuracy",
        "result": true
      },
      {
        "name": "api.Coordinates.altitude",
        "result": true
      },
      {
        "name": "api.Coordinates.altitudeAccuracy",
        "result": true
      },
      {
        "name": "api.Coordinates.heading",
        "result": true
      },
      {
        "name": "api.Coordinates.latitude",
        "result": true
      },
      {
        "name": "api.Coordinates.longitude",
        "result": true
      },
      {
        "name": "api.Coordinates.speed",
        "result": true
      },
      {
        "name": "api.CrashReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CrashReportBody' is undefined",
        "name": "api.CrashReportBody.reason",
        "result": null
      },
      {
        "name": "api.Credential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Credential' is undefined",
        "name": "api.Credential.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Credential' is undefined",
        "name": "api.Credential.type",
        "result": null
      },
      {
        "name": "api.CredentialsContainer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.create",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.preventSilentAccess",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.store",
        "result": null
      },
      {
        "name": "api.Crypto",
        "result": true
      },
      {
        "name": "api.Crypto.getRandomValues",
        "result": true
      },
      {
        "name": "api.Crypto.subtle",
        "result": true
      },
      {
        "name": "api.CryptoKey",
        "result": true
      },
      {
        "name": "api.CryptoKey.algorithm",
        "result": true
      },
      {
        "name": "api.CryptoKey.extractable",
        "result": true
      },
      {
        "name": "api.CryptoKey.type",
        "result": true
      },
      {
        "name": "api.CryptoKey.usages",
        "result": true
      },
      {
        "name": "api.CSPViolationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.blockedURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.documentURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.effectiveDirective",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.originalPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.sample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.sourceFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.statusCode",
        "result": null
      },
      {
        "name": "api.CSSConditionRule",
        "result": true
      },
      {
        "name": "api.CSSConditionRule.conditionText",
        "result": true
      },
      {
        "name": "api.CSSCounterStyleRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.additiveSymbols",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.fallback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.negative",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.pad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.prefix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.range",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.speakAs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.suffix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.symbols",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.system",
        "result": null
      },
      {
        "name": "api.CSSFontFaceRule",
        "result": true
      },
      {
        "name": "api.CSSFontFaceRule.style",
        "result": true
      },
      {
        "name": "api.CSSFontFeatureValuesMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesMap' is undefined",
        "name": "api.CSSFontFeatureValuesMap.set",
        "result": null
      },
      {
        "name": "api.CSSFontFeatureValuesRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.annotation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.characterVariant",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.fontFamily",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.ornaments",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.styleset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.stylistic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.swash",
        "result": null
      },
      {
        "name": "api.CSSFontPaletteValuesRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontPaletteValuesRule' is undefined",
        "name": "api.CSSFontPaletteValuesRule.basePalette",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontPaletteValuesRule' is undefined",
        "name": "api.CSSFontPaletteValuesRule.fontFamily",
        "result": null
      },
      {
        "name": "api.CSSGroupingRule",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.cssRules",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.insertRule",
        "result": true
      },
      {
        "name": "api.CSSImageValue",
        "result": false
      },
      {
        "name": "api.CSSImportRule",
        "result": true
      },
      {
        "name": "api.CSSImportRule.href",
        "result": true
      },
      {
        "name": "api.CSSImportRule.media",
        "result": true
      },
      {
        "name": "api.CSSImportRule.styleSheet",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule.keyText",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule.style",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.appendRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.cssRules",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.findRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.name",
        "result": true
      },
      {
        "name": "api.CSSKeywordValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSKeywordValue' is undefined",
        "name": "api.CSSKeywordValue.value",
        "result": null
      },
      {
        "name": "api.CSSMarginRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMarginRule' is undefined",
        "name": "api.CSSMarginRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMarginRule' is undefined",
        "name": "api.CSSMarginRule.style",
        "result": null
      },
      {
        "name": "api.CSSMathClamp",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.val",
        "result": null
      },
      {
        "name": "api.CSSMathInvert",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathInvert' is undefined",
        "name": "api.CSSMathInvert.value",
        "result": null
      },
      {
        "name": "api.CSSMathMax",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathMax' is undefined",
        "name": "api.CSSMathMax.values",
        "result": null
      },
      {
        "name": "api.CSSMathMin",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathMin' is undefined",
        "name": "api.CSSMathMin.values",
        "result": null
      },
      {
        "name": "api.CSSMathNegate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathNegate' is undefined",
        "name": "api.CSSMathNegate.value",
        "result": null
      },
      {
        "name": "api.CSSMathProduct",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathProduct' is undefined",
        "name": "api.CSSMathProduct.values",
        "result": null
      },
      {
        "name": "api.CSSMathSum",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathSum' is undefined",
        "name": "api.CSSMathSum.values",
        "result": null
      },
      {
        "name": "api.CSSMathValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathValue' is undefined",
        "name": "api.CSSMathValue.operator",
        "result": null
      },
      {
        "name": "api.CSSMatrixComponent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMatrixComponent' is undefined",
        "name": "api.CSSMatrixComponent.matrix",
        "result": null
      },
      {
        "name": "api.CSSMediaRule",
        "result": true
      },
      {
        "name": "api.CSSMediaRule.media",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule.namespaceURI",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule.prefix",
        "result": true
      },
      {
        "name": "api.CSSNumericArray",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSNumericArray' is undefined",
        "name": "api.CSSNumericArray.length",
        "result": null
      },
      {
        "name": "api.CSSNumericValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.div",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.equals",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.mul",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.parse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.sub",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.to",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.toSum",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.type",
        "result": null
      },
      {
        "name": "api.CSSPageRule",
        "result": true
      },
      {
        "name": "api.CSSPageRule.selectorText",
        "result": true
      },
      {
        "name": "api.CSSPageRule.style",
        "result": true
      },
      {
        "name": "api.CSSParserAtRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.prelude",
        "result": null
      },
      {
        "name": "api.CSSParserBlock",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserBlock' is undefined",
        "name": "api.CSSParserBlock.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserBlock' is undefined",
        "name": "api.CSSParserBlock.name",
        "result": null
      },
      {
        "name": "api.CSSParserDeclaration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserDeclaration' is undefined",
        "name": "api.CSSParserDeclaration.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserDeclaration' is undefined",
        "name": "api.CSSParserDeclaration.name",
        "result": null
      },
      {
        "name": "api.CSSParserFunction",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserFunction' is undefined",
        "name": "api.CSSParserFunction.args",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserFunction' is undefined",
        "name": "api.CSSParserFunction.name",
        "result": null
      },
      {
        "name": "api.CSSParserQualifiedRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserQualifiedRule' is undefined",
        "name": "api.CSSParserQualifiedRule.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserQualifiedRule' is undefined",
        "name": "api.CSSParserQualifiedRule.prelude",
        "result": null
      },
      {
        "name": "api.CSSParserRule",
        "result": false
      },
      {
        "name": "api.CSSParserValue",
        "result": false
      },
      {
        "name": "api.CSSPerspective",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSPerspective' is undefined",
        "name": "api.CSSPerspective.length",
        "result": null
      },
      {
        "name": "api.CSSPseudoElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.animate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertPointFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertQuadFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertRectFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.element",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.getAnimations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.getBoxQuads",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.type",
        "result": null
      },
      {
        "name": "api.CSSRotate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.angle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.z",
        "result": null
      },
      {
        "name": "api.CSSRule",
        "result": true
      },
      {
        "name": "api.CSSRule.CHARSET_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.COUNTER_STYLE_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.cssText",
        "result": true
      },
      {
        "name": "api.CSSRule.FONT_FACE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.FONT_FEATURE_VALUES_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.FONT_PALETTE_VALUES_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.IMPORT_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.KEYFRAME_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.KEYFRAMES_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.MARGIN_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.MEDIA_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.NAMESPACE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.PAGE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.parentRule",
        "result": true
      },
      {
        "name": "api.CSSRule.parentStyleSheet",
        "result": true
      },
      {
        "name": "api.CSSRule.STYLE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.SUPPORTS_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.type",
        "result": true
      },
      {
        "name": "api.CSSRule.VIEWPORT_RULE",
        "result": true
      },
      {
        "name": "api.CSSRuleList",
        "result": true
      },
      {
        "name": "api.CSSRuleList.item",
        "result": true
      },
      {
        "name": "api.CSSRuleList.length",
        "result": true
      },
      {
        "name": "api.CSSScale",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.z",
        "result": null
      },
      {
        "name": "api.CSSSkew",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkew' is undefined",
        "name": "api.CSSSkew.ax",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSSkew' is undefined",
        "name": "api.CSSSkew.ay",
        "result": null
      },
      {
        "name": "api.CSSSkewX",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkewX' is undefined",
        "name": "api.CSSSkewX.ax",
        "result": null
      },
      {
        "name": "api.CSSSkewY",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkewY' is undefined",
        "name": "api.CSSSkewY.ay",
        "result": null
      },
      {
        "name": "api.CSSStyleDeclaration",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.cssFloat",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.cssText",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.getPropertyPriority",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.getPropertyValue",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.item",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.length",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.parentRule",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.removeProperty",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.setProperty",
        "result": true
      },
      {
        "name": "api.CSSStyleRule",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.selectorText",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.style",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.styleMap",
        "result": false
      },
      {
        "name": "api.CSSStyleSheet",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.addRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.cssRules",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.insertRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.ownerRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.removeRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.rules",
        "result": true
      },
      {
        "name": "api.CSSStyleValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSStyleValue' is undefined",
        "name": "api.CSSStyleValue.parse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSStyleValue' is undefined",
        "name": "api.CSSStyleValue.parseAll",
        "result": null
      },
      {
        "name": "api.CSSSupportsRule",
        "result": true
      },
      {
        "name": "api.CSSTransformComponent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTransformComponent' is undefined",
        "name": "api.CSSTransformComponent.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformComponent' is undefined",
        "name": "api.CSSTransformComponent.toMatrix",
        "result": null
      },
      {
        "name": "api.CSSTransformValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.length",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.toMatrix",
        "result": null
      },
      {
        "name": "api.CSSTranslate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.z",
        "result": null
      },
      {
        "name": "api.CSSUnitValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSUnitValue' is undefined",
        "name": "api.CSSUnitValue.unit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSUnitValue' is undefined",
        "name": "api.CSSUnitValue.value",
        "result": null
      },
      {
        "name": "api.CSSUnparsedValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSUnparsedValue' is undefined",
        "name": "api.CSSUnparsedValue.length",
        "result": null
      },
      {
        "name": "api.CSSVariableReferenceValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSVariableReferenceValue' is undefined",
        "name": "api.CSSVariableReferenceValue.fallback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSVariableReferenceValue' is undefined",
        "name": "api.CSSVariableReferenceValue.variable",
        "result": null
      },
      {
        "name": "api.CSSViewportRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSViewportRule' is undefined",
        "name": "api.CSSViewportRule.style",
        "result": null
      },
      {
        "name": "api.CustomElementRegistry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.define",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.upgrade",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.whenDefined",
        "result": null
      },
      {
        "name": "api.CustomEvent",
        "result": true
      },
      {
        "name": "api.CustomEvent.detail",
        "result": true
      },
      {
        "name": "api.CustomEvent.initCustomEvent",
        "result": true
      },
      {
        "name": "api.DataTransfer",
        "result": true
      },
      {
        "name": "api.DataTransfer.clearData",
        "result": true
      },
      {
        "name": "api.DataTransfer.dropEffect",
        "result": true
      },
      {
        "name": "api.DataTransfer.effectAllowed",
        "result": true
      },
      {
        "name": "api.DataTransfer.files",
        "result": true
      },
      {
        "name": "api.DataTransfer.getData",
        "result": true
      },
      {
        "name": "api.DataTransfer.items",
        "result": true
      },
      {
        "name": "api.DataTransfer.setData",
        "result": true
      },
      {
        "name": "api.DataTransfer.setDragImage",
        "result": false
      },
      {
        "name": "api.DataTransfer.types",
        "result": true
      },
      {
        "name": "api.DataTransferItem",
        "result": true
      },
      {
        "name": "api.DataTransferItem.getAsFile",
        "result": true
      },
      {
        "name": "api.DataTransferItem.getAsString",
        "result": true
      },
      {
        "name": "api.DataTransferItem.kind",
        "result": true
      },
      {
        "name": "api.DataTransferItem.type",
        "result": true
      },
      {
        "name": "api.DataTransferItem.webkitGetAsEntry",
        "result": false
      },
      {
        "name": "api.DataTransferItemList",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.add",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.add",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.clear",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.length",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.remove",
        "result": true
      },
      {
        "name": "api.DeadFragmentInformation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.children",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.isOverflowed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.left",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.nextInBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.nextSibling",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.node",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.previousInBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.previousSibling",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.top",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.width",
        "result": null
      },
      {
        "name": "api.DelayNode",
        "result": true
      },
      {
        "name": "api.DelayNode.delayTime",
        "result": true
      },
      {
        "name": "api.DeprecationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.anticipatedRemoval",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.DetectedBarcode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.boundingBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.cornerPoints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.format",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.rawValue",
        "result": null
      },
      {
        "name": "api.DetectedFace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DetectedFace' is undefined",
        "name": "api.DetectedFace.boundingBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedFace' is undefined",
        "name": "api.DetectedFace.landmarks",
        "result": null
      },
      {
        "name": "api.DeviceAcceleration",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.x",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.y",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.z",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.acceleration",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.accelerationIncludingGravity",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.interval",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.rotationRate",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.absolute",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.alpha",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.beta",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.gamma",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.alpha",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.beta",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.gamma",
        "result": true
      },
      {
        "name": "api.Document",
        "result": true
      },
      {
        "name": "api.Document.activeElement",
        "result": true
      },
      {
        "name": "api.Document.addressSpace",
        "result": false
      },
      {
        "name": "api.Document.adoptNode",
        "result": true
      },
      {
        "name": "api.Document.alinkColor",
        "result": true
      },
      {
        "name": "api.Document.all",
        "result": true
      },
      {
        "name": "api.Document.anchors",
        "result": true
      },
      {
        "name": "api.Document.append",
        "result": false
      },
      {
        "name": "api.Document.applets",
        "result": true
      },
      {
        "name": "api.Document.bgColor",
        "result": true
      },
      {
        "name": "api.Document.body",
        "result": true
      },
      {
        "name": "api.Document.captureEvents",
        "result": true
      },
      {
        "name": "api.Document.caretPositionFromPoint",
        "result": false
      },
      {
        "name": "api.Document.characterSet",
        "result": true
      },
      {
        "name": "api.Document.charset",
        "result": true
      },
      {
        "name": "api.Document.childElementCount",
        "result": false
      },
      {
        "name": "api.Document.children",
        "result": false
      },
      {
        "name": "api.Document.clear",
        "result": true
      },
      {
        "name": "api.Document.close",
        "result": true
      },
      {
        "name": "api.Document.compatMode",
        "result": true
      },
      {
        "name": "api.Document.contentType",
        "result": false
      },
      {
        "name": "api.Document.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Document.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Document.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Document.cookie",
        "result": true
      },
      {
        "name": "api.Document.createAttribute",
        "result": true
      },
      {
        "name": "api.Document.createAttributeNS",
        "result": true
      },
      {
        "name": "api.Document.createCDATASection",
        "result": true
      },
      {
        "name": "api.Document.createComment",
        "result": true
      },
      {
        "name": "api.Document.createDocumentFragment",
        "result": true
      },
      {
        "name": "api.Document.createElement",
        "result": true
      },
      {
        "name": "api.Document.createElementNS",
        "result": true
      },
      {
        "name": "api.Document.createEvent",
        "result": true
      },
      {
        "name": "api.Document.createNodeIterator",
        "result": true
      },
      {
        "name": "api.Document.createProcessingInstruction",
        "result": true
      },
      {
        "name": "api.Document.createRange",
        "result": true
      },
      {
        "name": "api.Document.createTextNode",
        "result": true
      },
      {
        "name": "api.Document.createTreeWalker",
        "result": true
      },
      {
        "name": "api.Document.currentScript",
        "result": true
      },
      {
        "name": "api.Document.defaultView",
        "result": true
      },
      {
        "name": "api.Document.designMode",
        "result": true
      },
      {
        "name": "api.Document.dir",
        "result": true
      },
      {
        "name": "api.Document.doctype",
        "result": true
      },
      {
        "name": "api.Document.documentElement",
        "result": true
      },
      {
        "name": "api.Document.documentURI",
        "result": false
      },
      {
        "name": "api.Document.domain",
        "result": true
      },
      {
        "name": "api.Document.elementFromPoint",
        "result": true
      },
      {
        "name": "api.Document.elementsFromPoint",
        "result": false
      },
      {
        "name": "api.Document.embeds",
        "result": true
      },
      {
        "name": "api.Document.execCommand",
        "result": true
      },
      {
        "name": "api.Document.exitFullscreen",
        "result": true
      },
      {
        "name": "api.Document.exitPictureInPicture",
        "result": false
      },
      {
        "name": "api.Document.exitPointerLock",
        "result": false
      },
      {
        "name": "api.Document.featurePolicy",
        "result": false
      },
      {
        "name": "api.Document.fgColor",
        "result": true
      },
      {
        "name": "api.Document.firstElementChild",
        "result": false
      },
      {
        "name": "api.Document.fonts",
        "result": false
      },
      {
        "name": "api.Document.forms",
        "result": true
      },
      {
        "name": "api.Document.fullscreen",
        "result": false
      },
      {
        "name": "api.Document.fullscreenElement",
        "result": true
      },
      {
        "name": "api.Document.fullscreenEnabled",
        "result": true
      },
      {
        "name": "api.Document.getAnimations",
        "result": false
      },
      {
        "name": "api.Document.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Document.getElementById",
        "result": true
      },
      {
        "name": "api.Document.getElementsByClassName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByTagName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByTagNameNS",
        "result": true
      },
      {
        "name": "api.Document.getSelection",
        "result": true
      },
      {
        "name": "api.Document.hasFocus",
        "result": true
      },
      {
        "name": "api.Document.head",
        "result": true
      },
      {
        "name": "api.Document.hidden",
        "result": true
      },
      {
        "name": "api.Document.images",
        "result": true
      },
      {
        "name": "api.Document.implementation",
        "result": true
      },
      {
        "name": "api.Document.importNode",
        "result": true
      },
      {
        "name": "api.Document.inputEncoding",
        "result": true
      },
      {
        "name": "api.Document.lastElementChild",
        "result": false
      },
      {
        "name": "api.Document.lastModified",
        "result": true
      },
      {
        "name": "api.Document.layoutNow",
        "result": false
      },
      {
        "name": "api.Document.linkColor",
        "result": true
      },
      {
        "name": "api.Document.links",
        "result": true
      },
      {
        "name": "api.Document.location",
        "result": true
      },
      {
        "name": "api.Document.measureElement",
        "result": false
      },
      {
        "name": "api.Document.measureText",
        "result": false
      },
      {
        "name": "api.Document.namedFlows",
        "result": false
      },
      {
        "name": "api.Document.onabort",
        "result": true
      },
      {
        "name": "api.Document.onanimationcancel",
        "result": false
      },
      {
        "name": "api.Document.onanimationend",
        "result": false
      },
      {
        "name": "api.Document.onanimationiteration",
        "result": false
      },
      {
        "name": "api.Document.onanimationstart",
        "result": false
      },
      {
        "name": "api.Document.onauxclick",
        "result": false
      },
      {
        "name": "api.Document.onblur",
        "result": true
      },
      {
        "name": "api.Document.oncancel",
        "result": false
      },
      {
        "name": "api.Document.oncanplay",
        "result": true
      },
      {
        "name": "api.Document.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.Document.onchange",
        "result": true
      },
      {
        "name": "api.Document.onclick",
        "result": true
      },
      {
        "name": "api.Document.onclose",
        "result": false
      },
      {
        "name": "api.Document.oncontextmenu",
        "result": true
      },
      {
        "name": "api.Document.oncopy",
        "result": false
      },
      {
        "name": "api.Document.oncuechange",
        "result": false
      },
      {
        "name": "api.Document.oncut",
        "result": false
      },
      {
        "name": "api.Document.ondblclick",
        "result": true
      },
      {
        "name": "api.Document.ondrag",
        "result": true
      },
      {
        "name": "api.Document.ondragend",
        "result": true
      },
      {
        "name": "api.Document.ondragenter",
        "result": true
      },
      {
        "name": "api.Document.ondragexit",
        "result": false
      },
      {
        "name": "api.Document.ondragleave",
        "result": true
      },
      {
        "name": "api.Document.ondragover",
        "result": true
      },
      {
        "name": "api.Document.ondragstart",
        "result": true
      },
      {
        "name": "api.Document.ondrop",
        "result": true
      },
      {
        "name": "api.Document.ondurationchange",
        "result": true
      },
      {
        "name": "api.Document.onemptied",
        "result": true
      },
      {
        "name": "api.Document.onended",
        "result": true
      },
      {
        "name": "api.Document.onerror",
        "result": true
      },
      {
        "name": "api.Document.onfocus",
        "result": true
      },
      {
        "name": "api.Document.onformdata",
        "result": false
      },
      {
        "name": "api.Document.onfullscreenchange",
        "result": true
      },
      {
        "name": "api.Document.onfullscreenerror",
        "result": true
      },
      {
        "name": "api.Document.ongotpointercapture",
        "result": false
      },
      {
        "name": "api.Document.oninput",
        "result": true
      },
      {
        "name": "api.Document.oninvalid",
        "result": false
      },
      {
        "name": "api.Document.onkeydown",
        "result": true
      },
      {
        "name": "api.Document.onkeypress",
        "result": true
      },
      {
        "name": "api.Document.onkeyup",
        "result": true
      },
      {
        "name": "api.Document.onload",
        "result": true
      },
      {
        "name": "api.Document.onloadeddata",
        "result": true
      },
      {
        "name": "api.Document.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.Document.onloadend",
        "result": false
      },
      {
        "name": "api.Document.onloadstart",
        "result": true
      },
      {
        "name": "api.Document.onlostpointercapture",
        "result": false
      },
      {
        "name": "api.Document.onmousedown",
        "result": true
      },
      {
        "name": "api.Document.onmouseenter",
        "result": false
      },
      {
        "name": "api.Document.onmouseleave",
        "result": false
      },
      {
        "name": "api.Document.onmousemove",
        "result": true
      },
      {
        "name": "api.Document.onmouseout",
        "result": true
      },
      {
        "name": "api.Document.onmouseover",
        "result": true
      },
      {
        "name": "api.Document.onmouseup",
        "result": true
      },
      {
        "name": "api.Document.onpaste",
        "result": false
      },
      {
        "name": "api.Document.onpause",
        "result": true
      },
      {
        "name": "api.Document.onplay",
        "result": true
      },
      {
        "name": "api.Document.onplaying",
        "result": true
      },
      {
        "name": "api.Document.onpointercancel",
        "result": true
      },
      {
        "name": "api.Document.onpointerdown",
        "result": true
      },
      {
        "name": "api.Document.onpointerenter",
        "result": true
      },
      {
        "name": "api.Document.onpointerleave",
        "result": true
      },
      {
        "name": "api.Document.onpointerlockchange",
        "result": false
      },
      {
        "name": "api.Document.onpointerlockerror",
        "result": false
      },
      {
        "name": "api.Document.onpointermove",
        "result": true
      },
      {
        "name": "api.Document.onpointerout",
        "result": true
      },
      {
        "name": "api.Document.onpointerover",
        "result": true
      },
      {
        "name": "api.Document.onpointerup",
        "result": true
      },
      {
        "name": "api.Document.onprogress",
        "result": true
      },
      {
        "name": "api.Document.onratechange",
        "result": true
      },
      {
        "name": "api.Document.onreadystatechange",
        "result": true
      },
      {
        "name": "api.Document.onreset",
        "result": true
      },
      {
        "name": "api.Document.onresize",
        "result": false
      },
      {
        "name": "api.Document.onscroll",
        "result": true
      },
      {
        "name": "api.Document.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.Document.onseeked",
        "result": true
      },
      {
        "name": "api.Document.onseeking",
        "result": true
      },
      {
        "name": "api.Document.onselect",
        "result": true
      },
      {
        "name": "api.Document.onselectionchange",
        "result": true
      },
      {
        "name": "api.Document.onselectstart",
        "result": true
      },
      {
        "name": "api.Document.onstalled",
        "result": true
      },
      {
        "name": "api.Document.onsubmit",
        "result": true
      },
      {
        "name": "api.Document.onsuspend",
        "result": true
      },
      {
        "name": "api.Document.ontimeupdate",
        "result": true
      },
      {
        "name": "api.Document.ontoggle",
        "result": false
      },
      {
        "name": "api.Document.ontouchcancel",
        "result": false
      },
      {
        "name": "api.Document.ontouchend",
        "result": false
      },
      {
        "name": "api.Document.ontouchmove",
        "result": false
      },
      {
        "name": "api.Document.ontouchstart",
        "result": false
      },
      {
        "name": "api.Document.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.Document.ontransitionend",
        "result": false
      },
      {
        "name": "api.Document.ontransitionrun",
        "result": false
      },
      {
        "name": "api.Document.ontransitionstart",
        "result": false
      },
      {
        "name": "api.Document.onvisibilitychange",
        "result": false
      },
      {
        "name": "api.Document.onvolumechange",
        "result": true
      },
      {
        "name": "api.Document.onwaiting",
        "result": true
      },
      {
        "name": "api.Document.onwheel",
        "result": true
      },
      {
        "name": "api.Document.open",
        "result": true
      },
      {
        "name": "api.Document.open",
        "result": true
      },
      {
        "name": "api.Document.origin",
        "result": false
      },
      {
        "name": "api.Document.pictureInPictureElement",
        "result": false
      },
      {
        "name": "api.Document.pictureInPictureEnabled",
        "result": false
      },
      {
        "name": "api.Document.plugins",
        "result": true
      },
      {
        "name": "api.Document.pointerLockElement",
        "result": false
      },
      {
        "name": "api.Document.prepend",
        "result": false
      },
      {
        "name": "api.Document.queryCommandEnabled",
        "result": true
      },
      {
        "name": "api.Document.queryCommandIndeterm",
        "result": true
      },
      {
        "name": "api.Document.queryCommandState",
        "result": true
      },
      {
        "name": "api.Document.queryCommandSupported",
        "result": true
      },
      {
        "name": "api.Document.queryCommandValue",
        "result": true
      },
      {
        "name": "api.Document.querySelector",
        "result": true
      },
      {
        "name": "api.Document.querySelectorAll",
        "result": true
      },
      {
        "name": "api.Document.readyState",
        "result": true
      },
      {
        "name": "api.Document.referrer",
        "result": true
      },
      {
        "name": "api.Document.releaseEvents",
        "result": true
      },
      {
        "name": "api.Document.rootElement",
        "result": true
      },
      {
        "name": "api.Document.scripts",
        "result": true
      },
      {
        "name": "api.Document.scrollingElement",
        "result": true
      },
      {
        "name": "api.Document.styleSheets",
        "result": true
      },
      {
        "name": "api.Document.timeline",
        "result": false
      },
      {
        "name": "api.Document.title",
        "result": true
      },
      {
        "name": "api.Document.URL",
        "result": true
      },
      {
        "name": "api.Document.visibilityState",
        "result": true
      },
      {
        "name": "api.Document.vlinkColor",
        "result": true
      },
      {
        "name": "api.Document.write",
        "result": true
      },
      {
        "name": "api.Document.writeln",
        "result": true
      },
      {
        "name": "api.DocumentFragment",
        "result": true
      },
      {
        "name": "api.DocumentFragment.append",
        "result": false
      },
      {
        "name": "api.DocumentFragment.childElementCount",
        "result": false
      },
      {
        "name": "api.DocumentFragment.children",
        "result": false
      },
      {
        "name": "api.DocumentFragment.firstElementChild",
        "result": false
      },
      {
        "name": "api.DocumentFragment.getElementById",
        "result": false
      },
      {
        "name": "api.DocumentFragment.lastElementChild",
        "result": false
      },
      {
        "name": "api.DocumentFragment.prepend",
        "result": false
      },
      {
        "name": "api.DocumentFragment.querySelector",
        "result": true
      },
      {
        "name": "api.DocumentFragment.querySelectorAll",
        "result": true
      },
      {
        "name": "api.DocumentTimeline",
        "result": false
      },
      {
        "name": "api.DocumentType",
        "result": true
      },
      {
        "name": "api.DocumentType.after",
        "result": false
      },
      {
        "name": "api.DocumentType.before",
        "result": false
      },
      {
        "name": "api.DocumentType.name",
        "result": true
      },
      {
        "name": "api.DocumentType.publicId",
        "result": true
      },
      {
        "name": "api.DocumentType.remove",
        "result": true
      },
      {
        "name": "api.DocumentType.replaceWith",
        "result": false
      },
      {
        "name": "api.DocumentType.systemId",
        "result": true
      },
      {
        "name": "api.DOMException",
        "result": true
      },
      {
        "name": "api.DOMException.ABORT_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.code",
        "result": true
      },
      {
        "name": "api.DOMException.DATA_CLONE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.DOMSTRING_SIZE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.HIERARCHY_REQUEST_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INDEX_SIZE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INUSE_ATTRIBUTE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_ACCESS_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_CHARACTER_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_MODIFICATION_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_NODE_TYPE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_STATE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.message",
        "result": true
      },
      {
        "name": "api.DOMException.name",
        "result": true
      },
      {
        "name": "api.DOMException.NAMESPACE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NETWORK_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NO_DATA_ALLOWED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NO_MODIFICATION_ALLOWED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NOT_FOUND_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NOT_SUPPORTED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.QUOTA_EXCEEDED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.SECURITY_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.SYNTAX_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.TIMEOUT_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.TYPE_MISMATCH_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.URL_MISMATCH_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.VALIDATION_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.WRONG_DOCUMENT_ERR",
        "result": true
      },
      {
        "name": "api.DOMImplementation",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createDocument",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createDocumentType",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createHTMLDocument",
        "result": true
      },
      {
        "name": "api.DOMImplementation.hasFeature",
        "result": true
      },
      {
        "name": "api.DOMMatrix",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.a",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.b",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.c",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.e",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.invertSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m32",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m33",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m34",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m41",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m42",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m43",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m44",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.multiplySelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.preMultiplySelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateAxisAngleSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateFromVectorSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.scale3dSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.scaleSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.setMatrixValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.skewXSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.skewYSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.translateSelf",
        "result": null
      },
      {
        "name": "api.DOMMatrixReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.a",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.b",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.c",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.e",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.flipX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.flipY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.inverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.isIdentity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m32",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m33",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m34",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m41",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m42",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m43",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m44",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.multiply",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotateAxisAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotateFromVector",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scale",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scale3d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scaleNonUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.skewX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.skewY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.transformPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.translate",
        "result": null
      },
      {
        "name": "api.DOMParser",
        "result": true
      },
      {
        "name": "api.DOMParser.parseFromString",
        "result": true
      },
      {
        "name": "api.DOMPoint",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.fromPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.w",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.z",
        "result": null
      },
      {
        "name": "api.DOMPointReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.fromPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.matrixTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.w",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.z",
        "result": null
      },
      {
        "name": "api.DOMQuad",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.fromQuad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.getBounds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.toJSON",
        "result": null
      },
      {
        "name": "api.DOMRect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.y",
        "result": null
      },
      {
        "name": "api.DOMRectList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRectList' is undefined",
        "name": "api.DOMRectList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectList' is undefined",
        "name": "api.DOMRectList.length",
        "result": null
      },
      {
        "name": "api.DOMRectReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.bottom",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.left",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.right",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.top",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.y",
        "result": null
      },
      {
        "name": "api.DOMStringList",
        "result": true
      },
      {
        "name": "api.DOMStringList.contains",
        "result": true
      },
      {
        "name": "api.DOMStringList.item",
        "result": true
      },
      {
        "name": "api.DOMStringList.length",
        "result": true
      },
      {
        "name": "api.DOMStringMap",
        "result": true
      },
      {
        "name": "api.DOMTokenList",
        "result": true
      },
      {
        "name": "api.DOMTokenList.add",
        "result": true
      },
      {
        "name": "api.DOMTokenList.contains",
        "result": true
      },
      {
        "name": "api.DOMTokenList.item",
        "result": true
      },
      {
        "name": "api.DOMTokenList.length",
        "result": true
      },
      {
        "name": "api.DOMTokenList.remove",
        "result": true
      },
      {
        "name": "api.DOMTokenList.replace",
        "result": false
      },
      {
        "name": "api.DOMTokenList.supports",
        "result": false
      },
      {
        "name": "api.DOMTokenList.toggle",
        "result": true
      },
      {
        "name": "api.DOMTokenList.value",
        "result": false
      },
      {
        "name": "api.DragEvent",
        "result": true
      },
      {
        "name": "api.DragEvent.dataTransfer",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.attack",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.knee",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.ratio",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.reduction",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.release",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.threshold",
        "result": true
      },
      {
        "name": "api.Element",
        "result": true
      },
      {
        "name": "api.Element.after",
        "result": false
      },
      {
        "name": "api.Element.animate",
        "result": false
      },
      {
        "name": "api.Element.append",
        "result": false
      },
      {
        "name": "api.Element.ariaActiveDescendantElement",
        "result": false
      },
      {
        "name": "api.Element.ariaAtomic",
        "result": false
      },
      {
        "name": "api.Element.ariaAutoComplete",
        "result": false
      },
      {
        "name": "api.Element.ariaBusy",
        "result": false
      },
      {
        "name": "api.Element.ariaChecked",
        "result": false
      },
      {
        "name": "api.Element.ariaColCount",
        "result": false
      },
      {
        "name": "api.Element.ariaColIndex",
        "result": false
      },
      {
        "name": "api.Element.ariaColSpan",
        "result": false
      },
      {
        "name": "api.Element.ariaControlsElements",
        "result": false
      },
      {
        "name": "api.Element.ariaCurrent",
        "result": false
      },
      {
        "name": "api.Element.ariaDescribedByElements",
        "result": false
      },
      {
        "name": "api.Element.ariaDetailsElement",
        "result": false
      },
      {
        "name": "api.Element.ariaDisabled",
        "result": false
      },
      {
        "name": "api.Element.ariaErrorMessageElement",
        "result": false
      },
      {
        "name": "api.Element.ariaExpanded",
        "result": false
      },
      {
        "name": "api.Element.ariaFlowToElements",
        "result": false
      },
      {
        "name": "api.Element.ariaHasPopup",
        "result": false
      },
      {
        "name": "api.Element.ariaHidden",
        "result": false
      },
      {
        "name": "api.Element.ariaInvalid",
        "result": false
      },
      {
        "name": "api.Element.ariaKeyShortcuts",
        "result": false
      },
      {
        "name": "api.Element.ariaLabel",
        "result": false
      },
      {
        "name": "api.Element.ariaLabelledByElements",
        "result": false
      },
      {
        "name": "api.Element.ariaLevel",
        "result": false
      },
      {
        "name": "api.Element.ariaLive",
        "result": false
      },
      {
        "name": "api.Element.ariaModal",
        "result": false
      },
      {
        "name": "api.Element.ariaMultiLine",
        "result": false
      },
      {
        "name": "api.Element.ariaMultiSelectable",
        "result": false
      },
      {
        "name": "api.Element.ariaOrientation",
        "result": false
      },
      {
        "name": "api.Element.ariaOwnsElements",
        "result": false
      },
      {
        "name": "api.Element.ariaPlaceholder",
        "result": false
      },
      {
        "name": "api.Element.ariaPosInSet",
        "result": false
      },
      {
        "name": "api.Element.ariaPressed",
        "result": false
      },
      {
        "name": "api.Element.ariaReadOnly",
        "result": false
      },
      {
        "name": "api.Element.ariaRelevant",
        "result": false
      },
      {
        "name": "api.Element.ariaRequired",
        "result": false
      },
      {
        "name": "api.Element.ariaRoleDescription",
        "result": false
      },
      {
        "name": "api.Element.ariaRowCount",
        "result": false
      },
      {
        "name": "api.Element.ariaRowIndex",
        "result": false
      },
      {
        "name": "api.Element.ariaRowSpan",
        "result": false
      },
      {
        "name": "api.Element.ariaSelected",
        "result": false
      },
      {
        "name": "api.Element.ariaSetSize",
        "result": false
      },
      {
        "name": "api.Element.ariaSort",
        "result": false
      },
      {
        "name": "api.Element.ariaValueMax",
        "result": false
      },
      {
        "name": "api.Element.ariaValueMin",
        "result": false
      },
      {
        "name": "api.Element.ariaValueNow",
        "result": false
      },
      {
        "name": "api.Element.ariaValueText",
        "result": false
      },
      {
        "name": "api.Element.assignedSlot",
        "result": false
      },
      {
        "name": "api.Element.attachShadow",
        "result": false
      },
      {
        "name": "api.Element.attributes",
        "result": true
      },
      {
        "name": "api.Element.before",
        "result": false
      },
      {
        "name": "api.Element.childElementCount",
        "result": true
      },
      {
        "name": "api.Element.children",
        "result": false
      },
      {
        "name": "api.Element.classList",
        "result": true
      },
      {
        "name": "api.Element.className",
        "result": false
      },
      {
        "name": "api.Element.clientHeight",
        "result": true
      },
      {
        "name": "api.Element.clientLeft",
        "result": true
      },
      {
        "name": "api.Element.clientTop",
        "result": true
      },
      {
        "name": "api.Element.clientWidth",
        "result": true
      },
      {
        "name": "api.Element.closest",
        "result": false
      },
      {
        "name": "api.Element.computedStyleMap",
        "result": false
      },
      {
        "name": "api.Element.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Element.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Element.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Element.firstElementChild",
        "result": true
      },
      {
        "name": "api.Element.getAnimations",
        "result": false
      },
      {
        "name": "api.Element.getAttribute",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNames",
        "result": false
      },
      {
        "name": "api.Element.getAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNodeNS",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.getBoundingClientRect",
        "result": true
      },
      {
        "name": "api.Element.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Element.getClientRects",
        "result": true
      },
      {
        "name": "api.Element.getElementsByClassName",
        "result": false
      },
      {
        "name": "api.Element.getElementsByTagName",
        "result": true
      },
      {
        "name": "api.Element.getElementsByTagNameNS",
        "result": true
      },
      {
        "name": "api.Element.getFragmentInformation",
        "result": false
      },
      {
        "name": "api.Element.getRegionFlowRanges",
        "result": false
      },
      {
        "name": "api.Element.hasAttribute",
        "result": true
      },
      {
        "name": "api.Element.hasAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.hasAttributes",
        "result": true
      },
      {
        "name": "api.Element.hasPointerCapture",
        "result": false
      },
      {
        "name": "api.Element.id",
        "result": true
      },
      {
        "name": "api.Element.innerHTML",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentElement",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentHTML",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentText",
        "result": false
      },
      {
        "name": "api.Element.lastElementChild",
        "result": true
      },
      {
        "name": "api.Element.localName",
        "result": true
      },
      {
        "name": "api.Element.matches",
        "result": false
      },
      {
        "name": "api.Element.namespaceURI",
        "result": true
      },
      {
        "name": "api.Element.nextElementSibling",
        "result": true
      },
      {
        "name": "api.Element.onfullscreenchange",
        "result": false
      },
      {
        "name": "api.Element.onfullscreenerror",
        "result": false
      },
      {
        "name": "api.Element.outerHTML",
        "result": false
      },
      {
        "name": "api.Element.prefix",
        "result": true
      },
      {
        "name": "api.Element.prepend",
        "result": false
      },
      {
        "name": "api.Element.previousElementSibling",
        "result": true
      },
      {
        "name": "api.Element.pseudo",
        "result": false
      },
      {
        "name": "api.Element.querySelector",
        "result": true
      },
      {
        "name": "api.Element.querySelectorAll",
        "result": true
      },
      {
        "name": "api.Element.regionOverset",
        "result": false
      },
      {
        "name": "api.Element.releasePointerCapture",
        "result": true
      },
      {
        "name": "api.Element.remove",
        "result": true
      },
      {
        "name": "api.Element.removeAttribute",
        "result": true
      },
      {
        "name": "api.Element.removeAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.removeAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.replaceWith",
        "result": false
      },
      {
        "name": "api.Element.requestFullscreen",
        "result": true
      },
      {
        "name": "api.Element.requestPointerLock",
        "result": false
      },
      {
        "name": "api.Element.role",
        "result": false
      },
      {
        "name": "api.Element.scroll",
        "result": false
      },
      {
        "name": "api.Element.scroll",
        "result": false
      },
      {
        "name": "api.Element.scrollBy",
        "result": false
      },
      {
        "name": "api.Element.scrollBy",
        "result": false
      },
      {
        "name": "api.Element.scrollHeight",
        "result": true
      },
      {
        "name": "api.Element.scrollIntoView",
        "result": false
      },
      {
        "name": "api.Element.scrollLeft",
        "result": true
      },
      {
        "name": "api.Element.scrollTo",
        "result": false
      },
      {
        "name": "api.Element.scrollTo",
        "result": false
      },
      {
        "name": "api.Element.scrollTop",
        "result": true
      },
      {
        "name": "api.Element.scrollWidth",
        "result": true
      },
      {
        "name": "api.Element.setAttribute",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNodeNS",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.setPointerCapture",
        "result": true
      },
      {
        "name": "api.Element.shadowRoot",
        "result": false
      },
      {
        "name": "api.Element.slot",
        "result": false
      },
      {
        "name": "api.Element.tagName",
        "result": true
      },
      {
        "name": "api.Element.toggleAttribute",
        "result": false
      },
      {
        "name": "api.Element.webkitMatchesSelector",
        "result": true
      },
      {
        "name": "api.EnterPictureInPictureEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'EnterPictureInPictureEvent' is undefined",
        "name": "api.EnterPictureInPictureEvent.pictureInPictureWindow",
        "result": null
      },
      {
        "name": "api.ErrorEvent",
        "result": true
      },
      {
        "name": "api.ErrorEvent.colno",
        "result": true
      },
      {
        "name": "api.ErrorEvent.error",
        "result": true
      },
      {
        "name": "api.ErrorEvent.filename",
        "result": true
      },
      {
        "name": "api.ErrorEvent.lineno",
        "result": true
      },
      {
        "name": "api.ErrorEvent.message",
        "result": true
      },
      {
        "name": "api.Event",
        "result": true
      },
      {
        "name": "api.Event.AT_TARGET",
        "result": true
      },
      {
        "name": "api.Event.bubbles",
        "result": true
      },
      {
        "name": "api.Event.BUBBLING_PHASE",
        "result": true
      },
      {
        "name": "api.Event.cancelable",
        "result": true
      },
      {
        "name": "api.Event.cancelBubble",
        "result": true
      },
      {
        "name": "api.Event.CAPTURING_PHASE",
        "result": true
      },
      {
        "name": "api.Event.composed",
        "result": false
      },
      {
        "name": "api.Event.composedPath",
        "result": false
      },
      {
        "name": "api.Event.currentTarget",
        "result": true
      },
      {
        "name": "api.Event.defaultPrevented",
        "result": true
      },
      {
        "name": "api.Event.eventPhase",
        "result": true
      },
      {
        "name": "api.Event.initEvent",
        "result": true
      },
      {
        "name": "api.Event.isTrusted",
        "result": true
      },
      {
        "name": "api.Event.NONE",
        "result": false
      },
      {
        "name": "api.Event.preventDefault",
        "result": true
      },
      {
        "name": "api.Event.returnValue",
        "result": true
      },
      {
        "name": "api.Event.srcElement",
        "result": true
      },
      {
        "name": "api.Event.stopImmediatePropagation",
        "result": true
      },
      {
        "name": "api.Event.stopPropagation",
        "result": true
      },
      {
        "name": "api.Event.target",
        "result": true
      },
      {
        "name": "api.Event.timeStamp",
        "result": true
      },
      {
        "name": "api.Event.type",
        "result": true
      },
      {
        "name": "api.EventCounts",
        "result": false
      },
      {
        "name": "api.EventSource",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.CLOSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.CONNECTING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onopen",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.OPEN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.readyState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.url",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.withCredentials",
        "result": null
      },
      {
        "name": "api.EventTarget",
        "result": true
      },
      {
        "name": "api.EventTarget.addEventListener",
        "result": true
      },
      {
        "name": "api.EventTarget.dispatchEvent",
        "result": true
      },
      {
        "name": "api.EventTarget.removeEventListener",
        "result": true
      },
      {
        "name": "api.External",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'External' is undefined",
        "name": "api.External.AddSearchProvider",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'External' is undefined",
        "name": "api.External.IsSearchProviderInstalled",
        "result": null
      },
      {
        "name": "api.FaceDetector",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FaceDetector' is undefined",
        "name": "api.FaceDetector.detect",
        "result": null
      },
      {
        "name": "api.FeaturePolicy",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.allowedFeatures",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.allowsFeature",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.features",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.getAllowlistForFeature",
        "result": null
      },
      {
        "name": "api.FeaturePolicyViolationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.featureId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.FederatedCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.iconURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.provider",
        "result": null
      },
      {
        "name": "api.File",
        "result": true
      },
      {
        "name": "api.File.lastModified",
        "result": false
      },
      {
        "name": "api.File.name",
        "result": true
      },
      {
        "name": "api.File.webkitRelativePath",
        "result": false
      },
      {
        "name": "api.FileList",
        "result": true
      },
      {
        "name": "api.FileList.item",
        "result": true
      },
      {
        "name": "api.FileList.length",
        "result": true
      },
      {
        "name": "api.FileReader",
        "result": true
      },
      {
        "name": "api.FileReader.abort",
        "result": true
      },
      {
        "name": "api.FileReader.DONE",
        "result": true
      },
      {
        "name": "api.FileReader.EMPTY",
        "result": true
      },
      {
        "name": "api.FileReader.error",
        "result": true
      },
      {
        "name": "api.FileReader.LOADING",
        "result": true
      },
      {
        "name": "api.FileReader.onabort",
        "result": true
      },
      {
        "name": "api.FileReader.onerror",
        "result": true
      },
      {
        "name": "api.FileReader.onload",
        "result": true
      },
      {
        "name": "api.FileReader.onloadend",
        "result": true
      },
      {
        "name": "api.FileReader.onloadstart",
        "result": true
      },
      {
        "name": "api.FileReader.onprogress",
        "result": true
      },
      {
        "name": "api.FileReader.readAsArrayBuffer",
        "result": true
      },
      {
        "name": "api.FileReader.readAsBinaryString",
        "result": true
      },
      {
        "name": "api.FileReader.readAsDataURL",
        "result": true
      },
      {
        "name": "api.FileReader.readAsText",
        "result": true
      },
      {
        "name": "api.FileReader.readyState",
        "result": true
      },
      {
        "name": "api.FileReader.result",
        "result": true
      },
      {
        "name": "api.FileSystem",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystem' is undefined",
        "name": "api.FileSystem.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystem' is undefined",
        "name": "api.FileSystem.root",
        "result": null
      },
      {
        "name": "api.FileSystemDirectoryEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.createReader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.getDirectory",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.getFile",
        "result": null
      },
      {
        "name": "api.FileSystemDirectoryReader",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryReader' is undefined",
        "name": "api.FileSystemDirectoryReader.readEntries",
        "result": null
      },
      {
        "name": "api.FileSystemEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.filesystem",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.fullPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.getParent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.isDirectory",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.isFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.name",
        "result": null
      },
      {
        "name": "api.FileSystemFileEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemFileEntry' is undefined",
        "name": "api.FileSystemFileEntry.file",
        "result": null
      },
      {
        "name": "api.FocusEvent",
        "result": true
      },
      {
        "name": "api.FocusEvent.relatedTarget",
        "result": true
      },
      {
        "name": "api.Font",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Font' is undefined",
        "name": "api.Font.glyphsRendered",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Font' is undefined",
        "name": "api.Font.name",
        "result": null
      },
      {
        "name": "api.FontFace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.display",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.family",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.featureSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.loaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.status",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.stretch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.style",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.unicodeRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.variant",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.variationSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.weight",
        "result": null
      },
      {
        "name": "api.FontFaceSet",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.check",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloadingdone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloadingerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.status",
        "result": null
      },
      {
        "name": "api.FontFaceSetLoadEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFaceSetLoadEvent' is undefined",
        "name": "api.FontFaceSetLoadEvent.fontfaces",
        "result": null
      },
      {
        "name": "api.FontMetrics",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.advances",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.baselines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxLeft",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxRight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.dominantBaseline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.emHeightAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.emHeightDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fontBoundingBoxAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fontBoundingBoxDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fonts",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.width",
        "result": null
      },
      {
        "name": "api.FormData",
        "result": true
      },
      {
        "name": "api.FormData.append",
        "result": true
      },
      {
        "name": "api.FormData.append",
        "result": true
      },
      {
        "name": "api.FormData.delete",
        "result": false
      },
      {
        "name": "api.FormData.get",
        "result": false
      },
      {
        "name": "api.FormData.getAll",
        "result": false
      },
      {
        "name": "api.FormData.has",
        "result": false
      },
      {
        "name": "api.FormData.set",
        "result": false
      },
      {
        "name": "api.FormData.set",
        "result": false
      },
      {
        "name": "api.FormDataEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FormDataEvent' is undefined",
        "name": "api.FormDataEvent.formData",
        "result": null
      },
      {
        "name": "api.FragmentResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FragmentResult' is undefined",
        "name": "api.FragmentResult.blockSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FragmentResult' is undefined",
        "name": "api.FragmentResult.inlineSize",
        "result": null
      },
      {
        "name": "api.GainNode",
        "result": true
      },
      {
        "name": "api.GainNode.gain",
        "result": true
      },
      {
        "name": "api.Gamepad",
        "result": true
      },
      {
        "name": "api.Gamepad.axes",
        "result": true
      },
      {
        "name": "api.Gamepad.buttons",
        "result": true
      },
      {
        "name": "api.Gamepad.connected",
        "result": true
      },
      {
        "name": "api.Gamepad.id",
        "result": true
      },
      {
        "name": "api.Gamepad.index",
        "result": true
      },
      {
        "name": "api.Gamepad.mapping",
        "result": true
      },
      {
        "name": "api.Gamepad.timestamp",
        "result": true
      },
      {
        "name": "api.GamepadButton",
        "result": true
      },
      {
        "name": "api.GamepadButton.pressed",
        "result": true
      },
      {
        "name": "api.GamepadButton.touched",
        "result": false
      },
      {
        "name": "api.GamepadButton.value",
        "result": true
      },
      {
        "name": "api.GamepadEvent",
        "result": true
      },
      {
        "name": "api.GamepadEvent.gamepad",
        "result": true
      },
      {
        "name": "api.Geolocation",
        "result": true
      },
      {
        "name": "api.Geolocation.clearWatch",
        "result": true
      },
      {
        "name": "api.Geolocation.getCurrentPosition",
        "result": true
      },
      {
        "name": "api.Geolocation.watchPosition",
        "result": true
      },
      {
        "name": "api.GeolocationSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.accuracy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.altitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.altitudeAccuracy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.heading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.latitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.longitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.speed",
        "result": null
      },
      {
        "name": "api.GravitySensor",
        "result": false
      },
      {
        "name": "api.Gyroscope",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.z",
        "result": null
      },
      {
        "name": "api.HashChangeEvent",
        "result": true
      },
      {
        "name": "api.HashChangeEvent.newURL",
        "result": true
      },
      {
        "name": "api.HashChangeEvent.oldURL",
        "result": true
      },
      {
        "name": "api.Headers",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.set",
        "result": null
      },
      {
        "name": "api.History",
        "result": true
      },
      {
        "name": "api.History.back",
        "result": true
      },
      {
        "name": "api.History.forward",
        "result": true
      },
      {
        "name": "api.History.go",
        "result": true
      },
      {
        "name": "api.History.length",
        "result": true
      },
      {
        "name": "api.History.pushState",
        "result": true
      },
      {
        "name": "api.History.replaceState",
        "result": true
      },
      {
        "name": "api.History.scrollRestoration",
        "result": false
      },
      {
        "name": "api.History.state",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.item",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.length",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.coords",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.download",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.hash",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.host",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.hostname",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.href",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.hreflang",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.name",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.origin",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.password",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.pathname",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.ping",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.port",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.protocol",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.rev",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.search",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.shape",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.target",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.text",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.type",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.username",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.coords",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.download",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.hash",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.host",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.hostname",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.href",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.noHref",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.origin",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.password",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.pathname",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.ping",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.port",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.protocol",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.search",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.shape",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.target",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.username",
        "result": false
      },
      {
        "name": "api.HTMLAudioElement",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement.href",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement.target",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.aLink",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.background",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.link",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onafterprint",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onbeforeprint",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onbeforeunload",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onhashchange",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onmessage",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onoffline",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.ononline",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onorientationchange",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onpagehide",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onpageshow",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onpopstate",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onstorage",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onunload",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.text",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.vLink",
        "result": true
      },
      {
        "name": "api.HTMLBRElement",
        "result": true
      },
      {
        "name": "api.HTMLBRElement.clear",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.form",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formAction",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formEnctype",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formMethod",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formNoValidate",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formTarget",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLButtonElement.name",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLButtonElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.type",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.value",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.captureStream",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.getContext",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.height",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.toBlob",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.toDataURL",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.transferControlToOffscreen",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.width",
        "result": true
      },
      {
        "name": "api.HTMLCollection",
        "result": true
      },
      {
        "name": "api.HTMLCollection.item",
        "result": true
      },
      {
        "name": "api.HTMLCollection.length",
        "result": true
      },
      {
        "name": "api.HTMLCollection.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLDataElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDataElement' is undefined",
        "name": "api.HTMLDataElement.value",
        "result": null
      },
      {
        "name": "api.HTMLDataListElement",
        "result": true
      },
      {
        "name": "api.HTMLDataListElement.options",
        "result": true
      },
      {
        "name": "api.HTMLDetailsElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDetailsElement' is undefined",
        "name": "api.HTMLDetailsElement.open",
        "result": null
      },
      {
        "name": "api.HTMLDialogElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.returnValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.show",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.showModal",
        "result": null
      },
      {
        "name": "api.HTMLDirectoryElement",
        "result": true
      },
      {
        "name": "api.HTMLDirectoryElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLDivElement",
        "result": true
      },
      {
        "name": "api.HTMLDivElement.align",
        "result": true
      },
      {
        "name": "api.HTMLDListElement",
        "result": true
      },
      {
        "name": "api.HTMLDListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLElement",
        "result": true
      },
      {
        "name": "api.HTMLElement.accessKey",
        "result": true
      },
      {
        "name": "api.HTMLElement.accessKeyLabel",
        "result": false
      },
      {
        "name": "api.HTMLElement.attributeStyleMap",
        "result": false
      },
      {
        "name": "api.HTMLElement.autocapitalize",
        "result": false
      },
      {
        "name": "api.HTMLElement.blur",
        "result": true
      },
      {
        "name": "api.HTMLElement.click",
        "result": true
      },
      {
        "name": "api.HTMLElement.contentEditable",
        "result": true
      },
      {
        "name": "api.HTMLElement.dataset",
        "result": true
      },
      {
        "name": "api.HTMLElement.dir",
        "result": true
      },
      {
        "name": "api.HTMLElement.draggable",
        "result": true
      },
      {
        "name": "api.HTMLElement.enterKeyHint",
        "result": false
      },
      {
        "name": "api.HTMLElement.focus",
        "result": true
      },
      {
        "name": "api.HTMLElement.hidden",
        "result": true
      },
      {
        "name": "api.HTMLElement.innerText",
        "result": true
      },
      {
        "name": "api.HTMLElement.inputMode",
        "result": false
      },
      {
        "name": "api.HTMLElement.isContentEditable",
        "result": true
      },
      {
        "name": "api.HTMLElement.lang",
        "result": true
      },
      {
        "name": "api.HTMLElement.nonce",
        "result": false
      },
      {
        "name": "api.HTMLElement.offsetHeight",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetLeft",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetParent",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetTop",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetWidth",
        "result": true
      },
      {
        "name": "api.HTMLElement.onabort",
        "result": true
      },
      {
        "name": "api.HTMLElement.onanimationcancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationend",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationiteration",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.onauxclick",
        "result": false
      },
      {
        "name": "api.HTMLElement.onblur",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.oncanplay",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.HTMLElement.onchange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onclick",
        "result": true
      },
      {
        "name": "api.HTMLElement.onclose",
        "result": false
      },
      {
        "name": "api.HTMLElement.oncontextmenu",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncopy",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncuechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncut",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondblclick",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondrag",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragend",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragexit",
        "result": false
      },
      {
        "name": "api.HTMLElement.ondragleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragover",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondrop",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondurationchange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onemptied",
        "result": true
      },
      {
        "name": "api.HTMLElement.onended",
        "result": true
      },
      {
        "name": "api.HTMLElement.onerror",
        "result": true
      },
      {
        "name": "api.HTMLElement.onfocus",
        "result": true
      },
      {
        "name": "api.HTMLElement.onformdata",
        "result": false
      },
      {
        "name": "api.HTMLElement.ongotpointercapture",
        "result": true
      },
      {
        "name": "api.HTMLElement.oninput",
        "result": true
      },
      {
        "name": "api.HTMLElement.oninvalid",
        "result": false
      },
      {
        "name": "api.HTMLElement.onkeydown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onkeypress",
        "result": true
      },
      {
        "name": "api.HTMLElement.onkeyup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onload",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadeddata",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadend",
        "result": false
      },
      {
        "name": "api.HTMLElement.onloadstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.onlostpointercapture",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmousedown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmousemove",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseout",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseover",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpaste",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpause",
        "result": true
      },
      {
        "name": "api.HTMLElement.onplay",
        "result": true
      },
      {
        "name": "api.HTMLElement.onplaying",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointercancel",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerdown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointermove",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerout",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerover",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onprogress",
        "result": true
      },
      {
        "name": "api.HTMLElement.onratechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onreset",
        "result": true
      },
      {
        "name": "api.HTMLElement.onresize",
        "result": false
      },
      {
        "name": "api.HTMLElement.onscroll",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.HTMLElement.onseeked",
        "result": true
      },
      {
        "name": "api.HTMLElement.onseeking",
        "result": true
      },
      {
        "name": "api.HTMLElement.onselect",
        "result": true
      },
      {
        "name": "api.HTMLElement.onselectionchange",
        "result": false
      },
      {
        "name": "api.HTMLElement.onselectstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.onstalled",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsubmit",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsuspend",
        "result": true
      },
      {
        "name": "api.HTMLElement.ontimeupdate",
        "result": true
      },
      {
        "name": "api.HTMLElement.ontoggle",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchcancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchend",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchmove",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionend",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionrun",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.onvolumechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onwaiting",
        "result": true
      },
      {
        "name": "api.HTMLElement.onwheel",
        "result": true
      },
      {
        "name": "api.HTMLElement.spellcheck",
        "result": true
      },
      {
        "name": "api.HTMLElement.style",
        "result": true
      },
      {
        "name": "api.HTMLElement.tabIndex",
        "result": true
      },
      {
        "name": "api.HTMLElement.title",
        "result": true
      },
      {
        "name": "api.HTMLElement.translate",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.align",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.height",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.name",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.src",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.type",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement.width",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.elements",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.form",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.name",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.type",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLFontElement",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.color",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.face",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.size",
        "result": true
      },
      {
        "name": "api.HTMLFormControlsCollection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLFormControlsCollection' is undefined",
        "name": "api.HTMLFormControlsCollection.namedItem",
        "result": null
      },
      {
        "name": "api.HTMLFormElement",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.acceptCharset",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.action",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.autocomplete",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.elements",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.encoding",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.enctype",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.length",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.method",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.name",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.noValidate",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.rel",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.reset",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.submit",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.target",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.contentWindow",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.frameBorder",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.marginHeight",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.marginWidth",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.name",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.noResize",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.scrolling",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.src",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.cols",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onafterprint",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onbeforeprint",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onbeforeunload",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onhashchange",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onmessage",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onoffline",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.ononline",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpagehide",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpageshow",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpopstate",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onstorage",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onunload",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLHeadElement",
        "result": true
      },
      {
        "name": "api.HTMLHeadingElement",
        "result": true
      },
      {
        "name": "api.HTMLHeadingElement.align",
        "result": true
      },
      {
        "name": "api.HTMLHRElement",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.align",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.color",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.noShade",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.size",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.width",
        "result": true
      },
      {
        "name": "api.HTMLHtmlElement",
        "result": true
      },
      {
        "name": "api.HTMLHtmlElement.version",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.align",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.allow",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.allowFullscreen",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.allowPaymentRequest",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.contentWindow",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.csp",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.featurePolicy",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.frameBorder",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.height",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.marginHeight",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.marginWidth",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.name",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.sandbox",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.scrolling",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.src",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.srcdoc",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.width",
        "result": true
      },
      {
        "name": "api.HTMLImageElement",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.align",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.border",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.complete",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.crossOrigin",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.currentSrc",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.decode",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.decoding",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.height",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.isMap",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.lowsrc",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.name",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.naturalHeight",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.naturalWidth",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.src",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.srcset",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.width",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.x",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.y",
        "result": true
      },
      {
        "name": "api.HTMLInputElement",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.accept",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.align",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.autocomplete",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.capture",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.checked",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.defaultChecked",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.defaultValue",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.dirName",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.files",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.form",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formAction",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formEnctype",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formMethod",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formNoValidate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formTarget",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.height",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.indeterminate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.list",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.max",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.maxLength",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.min",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.minLength",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.multiple",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.name",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.pattern",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.placeholder",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.readOnly",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.required",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.select",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.selectionDirection",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.selectionEnd",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.selectionStart",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.setSelectionRange",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.size",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.src",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.step",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.stepDown",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.stepUp",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.type",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.value",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.valueAsDate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.valueAsNumber",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.webkitdirectory",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.webkitEntries",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.width",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement.control",
        "result": false
      },
      {
        "name": "api.HTMLLabelElement.form",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement.htmlFor",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement.align",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement.form",
        "result": true
      },
      {
        "name": "api.HTMLLIElement",
        "result": true
      },
      {
        "name": "api.HTMLLIElement.type",
        "result": true
      },
      {
        "name": "api.HTMLLIElement.value",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.as",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.href",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.hreflang",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.imageSizes",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.imageSrcset",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.media",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.rev",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.sheet",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.target",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.type",
        "result": true
      },
      {
        "name": "api.HTMLMapElement",
        "result": true
      },
      {
        "name": "api.HTMLMapElement.areas",
        "result": true
      },
      {
        "name": "api.HTMLMapElement.name",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.behavior",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.direction",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.height",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.loop",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onbounce",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onfinish",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onstart",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.scrollAmount",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.scrollDelay",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.start",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.stop",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.trueSpeed",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.width",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.addTextTrack",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.audioTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.autoplay",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.buffered",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.canPlayType",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.captureStream",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.controls",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.currentSrc",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.currentTime",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.defaultMuted",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.defaultPlaybackRate",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.disableRemotePlayback",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.duration",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.ended",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.error",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.fastSeek",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.getStartDate",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.HAVE_CURRENT_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_ENOUGH_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_FUTURE_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_METADATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_NOTHING",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.load",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.loop",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.mediaKeys",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.muted",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_EMPTY",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_IDLE",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_LOADING",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_NO_SOURCE",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.networkState",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.onencrypted",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.onwaitingforkey",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.pause",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.paused",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.play",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.playbackRate",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.played",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.preload",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.readyState",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.remote",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.seekable",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.seeking",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.setMediaKeys",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.setSinkId",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.sinkId",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.src",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.srcObject",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.textTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.videoTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.volume",
        "result": true
      },
      {
        "name": "api.HTMLMenuElement",
        "result": true
      },
      {
        "name": "api.HTMLMenuElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.content",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.httpEquiv",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.name",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.scheme",
        "result": true
      },
      {
        "name": "api.HTMLMeterElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.high",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.labels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.low",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.optimum",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.value",
        "result": null
      },
      {
        "name": "api.HTMLModElement",
        "result": true
      },
      {
        "name": "api.HTMLModElement.cite",
        "result": true
      },
      {
        "name": "api.HTMLModElement.dateTime",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.align",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.archive",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.border",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.code",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.codeBase",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.codeType",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.contentWindow",
        "result": false
      },
      {
        "name": "api.HTMLObjectElement.data",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.declare",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.form",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.height",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.name",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLObjectElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.standby",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.type",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.width",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLOListElement",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.reversed",
        "result": false
      },
      {
        "name": "api.HTMLOListElement.start",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.type",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement.label",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.defaultSelected",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.form",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.index",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.label",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.selected",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.text",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.value",
        "result": true
      },
      {
        "name": "api.HTMLOptionsCollection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.length",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.remove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.selectedIndex",
        "result": null
      },
      {
        "name": "api.HTMLOutputElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.checkValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.defaultValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.form",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.htmlFor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.labels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.reportValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.setCustomValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.validationMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.validity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.willValidate",
        "result": null
      },
      {
        "name": "api.HTMLParagraphElement",
        "result": true
      },
      {
        "name": "api.HTMLParagraphElement.align",
        "result": true
      },
      {
        "name": "api.HTMLParamElement",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.name",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.type",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.value",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.valueType",
        "result": true
      },
      {
        "name": "api.HTMLPictureElement",
        "result": false
      },
      {
        "name": "api.HTMLPreElement",
        "result": true
      },
      {
        "name": "api.HTMLPreElement.width",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLProgressElement.max",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.position",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.value",
        "result": true
      },
      {
        "name": "api.HTMLQuoteElement",
        "result": true
      },
      {
        "name": "api.HTMLQuoteElement.cite",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.async",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.defer",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.event",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.htmlFor",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.noModule",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.src",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.text",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.add",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.autocomplete",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.form",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.item",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.length",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.multiple",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.name",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.options",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.remove",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.remove",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.required",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.selectedIndex",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.selectedOptions",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.size",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.value",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLSlotElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.assignedElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.assignedNodes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.name",
        "result": null
      },
      {
        "name": "api.HTMLSourceElement",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.media",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLSourceElement.src",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.srcset",
        "result": false
      },
      {
        "name": "api.HTMLSourceElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSpanElement",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.media",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.sheet",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.type",
        "result": true
      },
      {
        "name": "api.HTMLTableCaptionElement",
        "result": true
      },
      {
        "name": "api.HTMLTableCaptionElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.abbr",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.axis",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.cellIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.colSpan",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.headers",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.height",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.noWrap",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.rowSpan",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.scope",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.span",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableElement",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.border",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.caption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.cellPadding",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.cellSpacing",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createCaption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTBody",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteCaption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteRow",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteTFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteTHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.frame",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.insertRow",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.rules",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.summary",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tBodies",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.cells",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.deleteCell",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.insertCell",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.rowIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.sectionRowIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.deleteRow",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.insertRow",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTemplateElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLTemplateElement' is undefined",
        "name": "api.HTMLTemplateElement.content",
        "result": null
      },
      {
        "name": "api.HTMLTextAreaElement",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.autocomplete",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.cols",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.defaultValue",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.dirName",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.form",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.maxLength",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.minLength",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.name",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.placeholder",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.readOnly",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.required",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.select",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.selectionDirection",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.selectionEnd",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.selectionStart",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.setSelectionRange",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.textLength",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.type",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.value",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.wrap",
        "result": true
      },
      {
        "name": "api.HTMLTimeElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLTimeElement' is undefined",
        "name": "api.HTMLTimeElement.dateTime",
        "result": null
      },
      {
        "name": "api.HTMLTitleElement",
        "result": true
      },
      {
        "name": "api.HTMLTitleElement.text",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.default",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.ERROR",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.kind",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.label",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.LOADED",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.LOADING",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.NONE",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.readyState",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.src",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.srclang",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.track",
        "result": true
      },
      {
        "name": "api.HTMLUListElement",
        "result": true
      },
      {
        "name": "api.HTMLUListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLUListElement.type",
        "result": true
      },
      {
        "name": "api.HTMLUnknownElement",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.autoPictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.disablePictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.height",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.onenterpictureinpicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.onleavepictureinpicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.playsInline",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.poster",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.requestPictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.videoHeight",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.videoWidth",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.width",
        "result": true
      },
      {
        "name": "api.IDBCursor",
        "result": true
      },
      {
        "name": "api.IDBCursor.advance",
        "result": true
      },
      {
        "name": "api.IDBCursor.continue",
        "result": true
      },
      {
        "name": "api.IDBCursor.continuePrimaryKey",
        "result": false
      },
      {
        "name": "api.IDBCursor.delete",
        "result": true
      },
      {
        "name": "api.IDBCursor.direction",
        "result": true
      },
      {
        "name": "api.IDBCursor.key",
        "result": true
      },
      {
        "name": "api.IDBCursor.primaryKey",
        "result": true
      },
      {
        "name": "api.IDBCursor.request",
        "result": false
      },
      {
        "name": "api.IDBCursor.source",
        "result": true
      },
      {
        "name": "api.IDBCursor.update",
        "result": true
      },
      {
        "name": "api.IDBCursorWithValue",
        "result": true
      },
      {
        "name": "api.IDBCursorWithValue.value",
        "result": true
      },
      {
        "name": "api.IDBDatabase",
        "result": true
      },
      {
        "name": "api.IDBDatabase.close",
        "result": true
      },
      {
        "name": "api.IDBDatabase.createObjectStore",
        "result": true
      },
      {
        "name": "api.IDBDatabase.deleteObjectStore",
        "result": true
      },
      {
        "name": "api.IDBDatabase.name",
        "result": true
      },
      {
        "name": "api.IDBDatabase.objectStoreNames",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onabort",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onclose",
        "result": false
      },
      {
        "name": "api.IDBDatabase.onerror",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onversionchange",
        "result": false
      },
      {
        "name": "api.IDBDatabase.transaction",
        "result": true
      },
      {
        "name": "api.IDBDatabase.version",
        "result": true
      },
      {
        "name": "api.IDBFactory",
        "result": true
      },
      {
        "name": "api.IDBFactory.cmp",
        "result": true
      },
      {
        "name": "api.IDBFactory.databases",
        "result": false
      },
      {
        "name": "api.IDBFactory.deleteDatabase",
        "result": true
      },
      {
        "name": "api.IDBFactory.open",
        "result": true
      },
      {
        "name": "api.IDBIndex",
        "result": true
      },
      {
        "name": "api.IDBIndex.count",
        "result": true
      },
      {
        "name": "api.IDBIndex.get",
        "result": true
      },
      {
        "name": "api.IDBIndex.getAll",
        "result": false
      },
      {
        "name": "api.IDBIndex.getAllKeys",
        "result": false
      },
      {
        "name": "api.IDBIndex.getKey",
        "result": true
      },
      {
        "name": "api.IDBIndex.keyPath",
        "result": true
      },
      {
        "name": "api.IDBIndex.multiEntry",
        "result": false
      },
      {
        "name": "api.IDBIndex.name",
        "result": true
      },
      {
        "name": "api.IDBIndex.objectStore",
        "result": true
      },
      {
        "name": "api.IDBIndex.openCursor",
        "result": true
      },
      {
        "name": "api.IDBIndex.openKeyCursor",
        "result": true
      },
      {
        "name": "api.IDBIndex.unique",
        "result": true
      },
      {
        "name": "api.IDBKeyRange",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.bound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.includes",
        "result": false
      },
      {
        "name": "api.IDBKeyRange.lower",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.lowerBound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.lowerOpen",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.only",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upper",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upperBound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upperOpen",
        "result": true
      },
      {
        "name": "api.IDBObjectStore",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.add",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.autoIncrement",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.clear",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.count",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.createIndex",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.delete",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.deleteIndex",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.get",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.getAll",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.getAllKeys",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.getKey",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.index",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.indexNames",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.keyPath",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.name",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.openCursor",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.openKeyCursor",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.put",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.transaction",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest.onblocked",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest.onupgradeneeded",
        "result": true
      },
      {
        "name": "api.IDBRequest",
        "result": true
      },
      {
        "name": "api.IDBRequest.error",
        "result": true
      },
      {
        "name": "api.IDBRequest.onerror",
        "result": true
      },
      {
        "name": "api.IDBRequest.onsuccess",
        "result": true
      },
      {
        "name": "api.IDBRequest.readyState",
        "result": true
      },
      {
        "name": "api.IDBRequest.result",
        "result": true
      },
      {
        "name": "api.IDBRequest.source",
        "result": true
      },
      {
        "name": "api.IDBRequest.transaction",
        "result": true
      },
      {
        "name": "api.IDBTransaction",
        "result": true
      },
      {
        "name": "api.IDBTransaction.abort",
        "result": true
      },
      {
        "name": "api.IDBTransaction.commit",
        "result": false
      },
      {
        "name": "api.IDBTransaction.db",
        "result": true
      },
      {
        "name": "api.IDBTransaction.error",
        "result": true
      },
      {
        "name": "api.IDBTransaction.mode",
        "result": true
      },
      {
        "name": "api.IDBTransaction.objectStore",
        "result": true
      },
      {
        "name": "api.IDBTransaction.objectStoreNames",
        "result": false
      },
      {
        "name": "api.IDBTransaction.onabort",
        "result": true
      },
      {
        "name": "api.IDBTransaction.oncomplete",
        "result": true
      },
      {
        "name": "api.IDBTransaction.onerror",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent.newVersion",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent.oldVersion",
        "result": true
      },
      {
        "name": "api.IdleDeadline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IdleDeadline' is undefined",
        "name": "api.IdleDeadline.didTimeout",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IdleDeadline' is undefined",
        "name": "api.IdleDeadline.timeRemaining",
        "result": null
      },
      {
        "name": "api.IIRFilterNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IIRFilterNode' is undefined",
        "name": "api.IIRFilterNode.getFrequencyResponse",
        "result": null
      },
      {
        "name": "api.ImageBitmap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.width",
        "result": null
      },
      {
        "name": "api.ImageBitmapRenderingContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageBitmapRenderingContext' is undefined",
        "name": "api.ImageBitmapRenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmapRenderingContext' is undefined",
        "name": "api.ImageBitmapRenderingContext.transferFromImageBitmap",
        "result": null
      },
      {
        "name": "api.ImageCapture",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.getPhotoCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.getPhotoSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.grabFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.takePhoto",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.track",
        "result": null
      },
      {
        "name": "api.ImageData",
        "result": true
      },
      {
        "name": "api.ImageData.data",
        "result": true
      },
      {
        "name": "api.ImageData.height",
        "result": true
      },
      {
        "name": "api.ImageData.width",
        "result": true
      },
      {
        "name": "api.InputDeviceCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputDeviceCapabilities' is undefined",
        "name": "api.InputDeviceCapabilities.firesTouchEvents",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputDeviceCapabilities' is undefined",
        "name": "api.InputDeviceCapabilities.pointerMovementScrolls",
        "result": null
      },
      {
        "name": "api.InputDeviceInfo",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputDeviceInfo' is undefined",
        "name": "api.InputDeviceInfo.getCapabilities",
        "result": null
      },
      {
        "name": "api.InputEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.dataTransfer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.getTargetRanges",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.inputType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.isComposing",
        "result": null
      },
      {
        "name": "api.IntersectionObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.root",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.rootMargin",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.takeRecords",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.thresholds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.unobserve",
        "result": null
      },
      {
        "name": "api.IntersectionObserverEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.boundingClientRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.intersectionRatio",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.intersectionRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.isIntersecting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.rootBounds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.target",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.time",
        "result": null
      },
      {
        "name": "api.InterventionReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.Keyboard",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.getLayoutMap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.lock",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.unlock",
        "result": null
      },
      {
        "name": "api.KeyboardEvent",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.altKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.charCode",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.code",
        "result": false
      },
      {
        "name": "api.KeyboardEvent.ctrlKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_LEFT",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_RIGHT",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_STANDARD",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.getModifierState",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.isComposing",
        "result": false
      },
      {
        "name": "api.KeyboardEvent.key",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.keyCode",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.location",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.metaKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.repeat",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.shiftKey",
        "result": true
      },
      {
        "name": "api.KeyboardLayoutMap",
        "result": false
      },
      {
        "name": "api.KeyframeEffect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.composite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.getKeyframes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.iterationComposite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.setKeyframes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.target",
        "result": null
      },
      {
        "name": "api.LinearAccelerationSensor",
        "result": false
      },
      {
        "name": "api.Location",
        "result": true
      },
      {
        "name": "api.Location.ancestorOrigins",
        "result": false
      },
      {
        "name": "api.Location.assign",
        "result": true
      },
      {
        "name": "api.Location.hash",
        "result": true
      },
      {
        "name": "api.Location.host",
        "result": true
      },
      {
        "name": "api.Location.hostname",
        "result": true
      },
      {
        "name": "api.Location.href",
        "result": true
      },
      {
        "name": "api.Location.origin",
        "result": true
      },
      {
        "name": "api.Location.pathname",
        "result": true
      },
      {
        "name": "api.Location.port",
        "result": true
      },
      {
        "name": "api.Location.protocol",
        "result": true
      },
      {
        "name": "api.Location.reload",
        "result": true
      },
      {
        "name": "api.Location.replace",
        "result": true
      },
      {
        "name": "api.Location.search",
        "result": true
      },
      {
        "name": "api.Magnetometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.z",
        "result": null
      },
      {
        "name": "api.MediaCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaCapabilities' is undefined",
        "name": "api.MediaCapabilities.decodingInfo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaCapabilities' is undefined",
        "name": "api.MediaCapabilities.encodingInfo",
        "result": null
      },
      {
        "name": "api.MediaDeviceInfo",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.deviceId",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.groupId",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.kind",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.label",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.toJSON",
        "result": false
      },
      {
        "name": "api.MediaDevices",
        "result": true
      },
      {
        "name": "api.MediaDevices.enumerateDevices",
        "result": true
      },
      {
        "name": "api.MediaDevices.getDisplayMedia",
        "result": false
      },
      {
        "name": "api.MediaDevices.getSupportedConstraints",
        "result": true
      },
      {
        "name": "api.MediaDevices.getUserMedia",
        "result": true
      },
      {
        "name": "api.MediaDevices.ondevicechange",
        "result": true
      },
      {
        "name": "api.MediaElementAudioSourceNode",
        "result": true
      },
      {
        "name": "api.MediaElementAudioSourceNode.mediaElement",
        "result": false
      },
      {
        "name": "api.MediaEncryptedEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaEncryptedEvent' is undefined",
        "name": "api.MediaEncryptedEvent.initData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaEncryptedEvent' is undefined",
        "name": "api.MediaEncryptedEvent.initDataType",
        "result": null
      },
      {
        "name": "api.MediaError",
        "result": true
      },
      {
        "name": "api.MediaError.code",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_ABORTED",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_DECODE",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_NETWORK",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED",
        "result": true
      },
      {
        "name": "api.MediaError.message",
        "result": false
      },
      {
        "name": "api.MediaKeyMessageEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeyMessageEvent' is undefined",
        "name": "api.MediaKeyMessageEvent.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyMessageEvent' is undefined",
        "name": "api.MediaKeyMessageEvent.messageType",
        "result": null
      },
      {
        "name": "api.MediaKeys",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeys' is undefined",
        "name": "api.MediaKeys.createSession",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeys' is undefined",
        "name": "api.MediaKeys.setServerCertificate",
        "result": null
      },
      {
        "name": "api.MediaKeySession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.closed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.expiration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.generateRequest",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.keyStatuses",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.onkeystatuseschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.remove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.sessionId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.update",
        "result": null
      },
      {
        "name": "api.MediaKeyStatusMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.size",
        "result": null
      },
      {
        "name": "api.MediaKeySystemAccess",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.createMediaKeys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.getConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.keySystem",
        "result": null
      },
      {
        "name": "api.MediaList",
        "result": true
      },
      {
        "name": "api.MediaList.appendMedium",
        "result": true
      },
      {
        "name": "api.MediaList.deleteMedium",
        "result": true
      },
      {
        "name": "api.MediaList.item",
        "result": true
      },
      {
        "name": "api.MediaList.length",
        "result": true
      },
      {
        "name": "api.MediaList.mediaText",
        "result": true
      },
      {
        "name": "api.MediaMetadata",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.album",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.artist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.artwork",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.title",
        "result": null
      },
      {
        "name": "api.MediaQueryList",
        "result": true
      },
      {
        "name": "api.MediaQueryList.addListener",
        "result": true
      },
      {
        "name": "api.MediaQueryList.matches",
        "result": true
      },
      {
        "name": "api.MediaQueryList.media",
        "result": true
      },
      {
        "name": "api.MediaQueryList.onchange",
        "result": false
      },
      {
        "name": "api.MediaQueryList.removeListener",
        "result": true
      },
      {
        "name": "api.MediaQueryListEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaQueryListEvent' is undefined",
        "name": "api.MediaQueryListEvent.matches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaQueryListEvent' is undefined",
        "name": "api.MediaQueryListEvent.media",
        "result": null
      },
      {
        "name": "api.MediaRecorder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.audioBitsPerSecond",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.isTypeSupported",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.mimeType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.ondataavailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onpause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onresume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onstop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.requestData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.resume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.stream",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.videoBitsPerSecond",
        "result": null
      },
      {
        "name": "api.MediaRecorderErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaRecorderErrorEvent' is undefined",
        "name": "api.MediaRecorderErrorEvent.error",
        "result": null
      },
      {
        "name": "api.MediaSession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.metadata",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.playbackState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.setActionHandler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.setPositionState",
        "result": null
      },
      {
        "name": "api.MediaSettingsRange",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.step",
        "result": null
      },
      {
        "name": "api.MediaSource",
        "result": true
      },
      {
        "name": "api.MediaSource.activeSourceBuffers",
        "result": true
      },
      {
        "name": "api.MediaSource.addSourceBuffer",
        "result": true
      },
      {
        "name": "api.MediaSource.clearLiveSeekableRange",
        "result": false
      },
      {
        "name": "api.MediaSource.duration",
        "result": true
      },
      {
        "name": "api.MediaSource.endOfStream",
        "result": true
      },
      {
        "name": "api.MediaSource.isTypeSupported",
        "result": true
      },
      {
        "name": "api.MediaSource.onsourceclose",
        "result": false
      },
      {
        "name": "api.MediaSource.onsourceended",
        "result": false
      },
      {
        "name": "api.MediaSource.onsourceopen",
        "result": false
      },
      {
        "name": "api.MediaSource.readyState",
        "result": true
      },
      {
        "name": "api.MediaSource.removeSourceBuffer",
        "result": true
      },
      {
        "name": "api.MediaSource.setLiveSeekableRange",
        "result": false
      },
      {
        "name": "api.MediaSource.sourceBuffers",
        "result": true
      },
      {
        "name": "api.MediaStream",
        "result": true
      },
      {
        "name": "api.MediaStream.active",
        "result": true
      },
      {
        "name": "api.MediaStream.addTrack",
        "result": true
      },
      {
        "name": "api.MediaStream.clone",
        "result": true
      },
      {
        "name": "api.MediaStream.getAudioTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.getTrackById",
        "result": true
      },
      {
        "name": "api.MediaStream.getTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.getVideoTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.id",
        "result": true
      },
      {
        "name": "api.MediaStream.onaddtrack",
        "result": true
      },
      {
        "name": "api.MediaStream.onremovetrack",
        "result": true
      },
      {
        "name": "api.MediaStream.removeTrack",
        "result": true
      },
      {
        "name": "api.MediaStreamAudioDestinationNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaStreamAudioDestinationNode' is undefined",
        "name": "api.MediaStreamAudioDestinationNode.stream",
        "result": null
      },
      {
        "name": "api.MediaStreamAudioSourceNode",
        "result": true
      },
      {
        "name": "api.MediaStreamAudioSourceNode.mediaStream",
        "result": false
      },
      {
        "name": "api.MediaStreamTrack",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.applyConstraints",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.clone",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.contentHint",
        "result": false
      },
      {
        "name": "api.MediaStreamTrack.enabled",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getCapabilities",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getConstraints",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getSettings",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.id",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.kind",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.label",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.muted",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onended",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onmute",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onunmute",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.readyState",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.stop",
        "result": true
      },
      {
        "name": "api.MediaStreamTrackAudioSourceNode",
        "result": false
      },
      {
        "name": "api.MediaStreamTrackEvent",
        "result": true
      },
      {
        "name": "api.MediaStreamTrackEvent.track",
        "result": true
      },
      {
        "name": "api.MerchantValidationEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.complete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.methodName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.validationURL",
        "result": null
      },
      {
        "name": "api.MessageChannel",
        "result": true
      },
      {
        "name": "api.MessageChannel.port1",
        "result": true
      },
      {
        "name": "api.MessageChannel.port2",
        "result": true
      },
      {
        "name": "api.MessageEvent",
        "result": true
      },
      {
        "name": "api.MessageEvent.data",
        "result": true
      },
      {
        "name": "api.MessageEvent.initMessageEvent",
        "result": true
      },
      {
        "name": "api.MessageEvent.lastEventId",
        "result": false
      },
      {
        "name": "api.MessageEvent.origin",
        "result": true
      },
      {
        "name": "api.MessageEvent.ports",
        "result": true
      },
      {
        "name": "api.MessageEvent.source",
        "result": true
      },
      {
        "name": "api.MessagePort",
        "result": true
      },
      {
        "name": "api.MessagePort.close",
        "result": true
      },
      {
        "name": "api.MessagePort.onmessage",
        "result": true
      },
      {
        "name": "api.MessagePort.onmessageerror",
        "result": false
      },
      {
        "name": "api.MessagePort.postMessage",
        "result": true
      },
      {
        "name": "api.MessagePort.postMessage",
        "result": true
      },
      {
        "name": "api.MessagePort.start",
        "result": true
      },
      {
        "name": "api.MIDIAccess",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.inputs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.outputs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.sysexEnabled",
        "result": null
      },
      {
        "name": "api.MIDIConnectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIConnectionEvent' is undefined",
        "name": "api.MIDIConnectionEvent.port",
        "result": null
      },
      {
        "name": "api.MIDIInput",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIInput' is undefined",
        "name": "api.MIDIInput.onmidimessage",
        "result": null
      },
      {
        "name": "api.MIDIInputMap",
        "result": false
      },
      {
        "name": "api.MIDIMessageEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIMessageEvent' is undefined",
        "name": "api.MIDIMessageEvent.data",
        "result": null
      },
      {
        "name": "api.MIDIOutput",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIOutput' is undefined",
        "name": "api.MIDIOutput.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIOutput' is undefined",
        "name": "api.MIDIOutput.send",
        "result": null
      },
      {
        "name": "api.MIDIOutputMap",
        "result": false
      },
      {
        "name": "api.MIDIPort",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.connection",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.manufacturer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.version",
        "result": null
      },
      {
        "name": "api.MimeType",
        "result": true
      },
      {
        "name": "api.MimeType.description",
        "result": true
      },
      {
        "name": "api.MimeType.enabledPlugin",
        "result": true
      },
      {
        "name": "api.MimeType.suffixes",
        "result": true
      },
      {
        "name": "api.MimeType.type",
        "result": true
      },
      {
        "name": "api.MimeTypeArray",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.item",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.length",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.namedItem",
        "result": true
      },
      {
        "name": "api.MouseEvent",
        "result": true
      },
      {
        "name": "api.MouseEvent.altKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.button",
        "result": true
      },
      {
        "name": "api.MouseEvent.buttons",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientX",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientX",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientY",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientY",
        "result": true
      },
      {
        "name": "api.MouseEvent.ctrlKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.getModifierState",
        "result": true
      },
      {
        "name": "api.MouseEvent.metaKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.movementX",
        "result": false
      },
      {
        "name": "api.MouseEvent.movementY",
        "result": false
      },
      {
        "name": "api.MouseEvent.offsetX",
        "result": true
      },
      {
        "name": "api.MouseEvent.offsetY",
        "result": true
      },
      {
        "name": "api.MouseEvent.pageX",
        "result": true
      },
      {
        "name": "api.MouseEvent.pageY",
        "result": true
      },
      {
        "name": "api.MouseEvent.relatedTarget",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenX",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenX",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenY",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenY",
        "result": true
      },
      {
        "name": "api.MouseEvent.shiftKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.x",
        "result": true
      },
      {
        "name": "api.MouseEvent.y",
        "result": true
      },
      {
        "name": "api.MutationObserver",
        "result": true
      },
      {
        "name": "api.MutationObserver.disconnect",
        "result": true
      },
      {
        "name": "api.MutationObserver.observe",
        "result": true
      },
      {
        "name": "api.MutationObserver.takeRecords",
        "result": true
      },
      {
        "name": "api.MutationRecord",
        "result": true
      },
      {
        "name": "api.MutationRecord.addedNodes",
        "result": true
      },
      {
        "name": "api.MutationRecord.attributeName",
        "result": true
      },
      {
        "name": "api.MutationRecord.attributeNamespace",
        "result": true
      },
      {
        "name": "api.MutationRecord.nextSibling",
        "result": true
      },
      {
        "name": "api.MutationRecord.oldValue",
        "result": true
      },
      {
        "name": "api.MutationRecord.previousSibling",
        "result": true
      },
      {
        "name": "api.MutationRecord.removedNodes",
        "result": true
      },
      {
        "name": "api.MutationRecord.target",
        "result": true
      },
      {
        "name": "api.MutationRecord.type",
        "result": true
      },
      {
        "name": "api.NamedFlow",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.firstEmptyRegionIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getContent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getRegions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getRegionsByContent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.overset",
        "result": null
      },
      {
        "name": "api.NamedFlowMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.set",
        "result": null
      },
      {
        "name": "api.NamedNodeMap",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.getNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.getNamedItemNS",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.item",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.length",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.removeNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.removeNamedItemNS",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.setNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.setNamedItemNS",
        "result": true
      },
      {
        "name": "api.NavigationPreloadManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.disable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.enable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.getState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.setHeaderValue",
        "result": null
      },
      {
        "name": "api.Navigator",
        "result": true
      },
      {
        "name": "api.Navigator.appCodeName",
        "result": true
      },
      {
        "name": "api.Navigator.appName",
        "result": true
      },
      {
        "name": "api.Navigator.appVersion",
        "result": true
      },
      {
        "name": "api.Navigator.bluetooth",
        "result": false
      },
      {
        "name": "api.Navigator.clipboard",
        "result": false
      },
      {
        "name": "api.Navigator.connection",
        "result": false
      },
      {
        "name": "api.Navigator.cookieEnabled",
        "result": true
      },
      {
        "name": "api.Navigator.credentials",
        "result": false
      },
      {
        "name": "api.Navigator.geolocation",
        "result": true
      },
      {
        "name": "api.Navigator.getBattery",
        "result": false
      },
      {
        "name": "api.Navigator.getGamepads",
        "result": true
      },
      {
        "name": "api.Navigator.getUserMedia",
        "result": true
      },
      {
        "name": "api.Navigator.hardwareConcurrency",
        "result": false
      },
      {
        "name": "api.Navigator.javaEnabled",
        "result": true
      },
      {
        "name": "api.Navigator.keyboard",
        "result": false
      },
      {
        "name": "api.Navigator.keyboard",
        "result": false
      },
      {
        "name": "api.Navigator.language",
        "result": true
      },
      {
        "name": "api.Navigator.languages",
        "result": false
      },
      {
        "name": "api.Navigator.maxTouchPoints",
        "result": true
      },
      {
        "name": "api.Navigator.mediaCapabilities",
        "result": false
      },
      {
        "name": "api.Navigator.mediaDevices",
        "result": true
      },
      {
        "name": "api.Navigator.mediaSession",
        "result": false
      },
      {
        "name": "api.Navigator.mimeTypes",
        "result": true
      },
      {
        "name": "api.Navigator.onLine",
        "result": true
      },
      {
        "name": "api.Navigator.oscpu",
        "result": false
      },
      {
        "name": "api.Navigator.permissions",
        "result": false
      },
      {
        "name": "api.Navigator.platform",
        "result": true
      },
      {
        "name": "api.Navigator.plugins",
        "result": true
      },
      {
        "name": "api.Navigator.presentation",
        "result": false
      },
      {
        "name": "api.Navigator.product",
        "result": true
      },
      {
        "name": "api.Navigator.productSub",
        "result": true
      },
      {
        "name": "api.Navigator.registerProtocolHandler",
        "result": false
      },
      {
        "name": "api.Navigator.requestMediaKeySystemAccess",
        "result": false
      },
      {
        "name": "api.Navigator.requestMIDIAccess",
        "result": false
      },
      {
        "name": "api.Navigator.sendBeacon",
        "result": false
      },
      {
        "name": "api.Navigator.serviceWorker",
        "result": false
      },
      {
        "name": "api.Navigator.share",
        "result": false
      },
      {
        "name": "api.Navigator.storage",
        "result": false
      },
      {
        "name": "api.Navigator.taintEnabled",
        "result": false
      },
      {
        "name": "api.Navigator.unregisterProtocolHandler",
        "result": false
      },
      {
        "name": "api.Navigator.usb",
        "result": false
      },
      {
        "name": "api.Navigator.userAgent",
        "result": true
      },
      {
        "name": "api.Navigator.vendor",
        "result": true
      },
      {
        "name": "api.Navigator.vendorSub",
        "result": true
      },
      {
        "name": "api.Navigator.vibrate",
        "result": false
      },
      {
        "name": "api.Navigator.webdriver",
        "result": true
      },
      {
        "name": "api.Navigator.xr",
        "result": false
      },
      {
        "name": "api.NetworkInformation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.downlink",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.downlinkMax",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.effectiveType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.rtt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.saveData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.type",
        "result": null
      },
      {
        "name": "api.NFCErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCErrorEvent' is undefined",
        "name": "api.NFCErrorEvent.error",
        "result": null
      },
      {
        "name": "api.NFCReader",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.onreading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.stop",
        "result": null
      },
      {
        "name": "api.NFCReadingEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCReadingEvent' is undefined",
        "name": "api.NFCReadingEvent.message",
        "result": null
      },
      {
        "name": "api.NFCWriter",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCWriter' is undefined",
        "name": "api.NFCWriter.push",
        "result": null
      },
      {
        "name": "api.Node",
        "result": true
      },
      {
        "name": "api.Node.appendChild",
        "result": true
      },
      {
        "name": "api.Node.ATTRIBUTE_NODE",
        "result": true
      },
      {
        "name": "api.Node.baseURI",
        "result": true
      },
      {
        "name": "api.Node.CDATA_SECTION_NODE",
        "result": true
      },
      {
        "name": "api.Node.childNodes",
        "result": true
      },
      {
        "name": "api.Node.cloneNode",
        "result": true
      },
      {
        "name": "api.Node.COMMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.compareDocumentPosition",
        "result": true
      },
      {
        "name": "api.Node.contains",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_FRAGMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_CONTAINED_BY",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_CONTAINS",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_DISCONNECTED",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_FOLLOWING",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_PRECEDING",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_TYPE_NODE",
        "result": true
      },
      {
        "name": "api.Node.ELEMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.ENTITY_NODE",
        "result": true
      },
      {
        "name": "api.Node.ENTITY_REFERENCE_NODE",
        "result": true
      },
      {
        "name": "api.Node.firstChild",
        "result": true
      },
      {
        "name": "api.Node.getRootNode",
        "result": false
      },
      {
        "name": "api.Node.hasChildNodes",
        "result": true
      },
      {
        "name": "api.Node.insertBefore",
        "result": true
      },
      {
        "name": "api.Node.isConnected",
        "result": false
      },
      {
        "name": "api.Node.isDefaultNamespace",
        "result": true
      },
      {
        "name": "api.Node.isEqualNode",
        "result": true
      },
      {
        "name": "api.Node.isSameNode",
        "result": true
      },
      {
        "name": "api.Node.lastChild",
        "result": true
      },
      {
        "name": "api.Node.lookupNamespaceURI",
        "result": true
      },
      {
        "name": "api.Node.lookupPrefix",
        "result": true
      },
      {
        "name": "api.Node.nextSibling",
        "result": true
      },
      {
        "name": "api.Node.nodeName",
        "result": true
      },
      {
        "name": "api.Node.nodeType",
        "result": true
      },
      {
        "name": "api.Node.nodeValue",
        "result": true
      },
      {
        "name": "api.Node.normalize",
        "result": true
      },
      {
        "name": "api.Node.NOTATION_NODE",
        "result": true
      },
      {
        "name": "api.Node.ownerDocument",
        "result": true
      },
      {
        "name": "api.Node.parentElement",
        "result": true
      },
      {
        "name": "api.Node.parentNode",
        "result": true
      },
      {
        "name": "api.Node.previousSibling",
        "result": true
      },
      {
        "name": "api.Node.PROCESSING_INSTRUCTION_NODE",
        "result": true
      },
      {
        "name": "api.Node.removeChild",
        "result": true
      },
      {
        "name": "api.Node.replaceChild",
        "result": true
      },
      {
        "name": "api.Node.TEXT_NODE",
        "result": true
      },
      {
        "name": "api.Node.textContent",
        "result": true
      },
      {
        "name": "api.NodeIterator",
        "result": true
      },
      {
        "name": "api.NodeIterator.detach",
        "result": true
      },
      {
        "name": "api.NodeIterator.filter",
        "result": true
      },
      {
        "name": "api.NodeIterator.nextNode",
        "result": true
      },
      {
        "name": "api.NodeIterator.pointerBeforeReferenceNode",
        "result": false
      },
      {
        "name": "api.NodeIterator.previousNode",
        "result": true
      },
      {
        "name": "api.NodeIterator.referenceNode",
        "result": false
      },
      {
        "name": "api.NodeIterator.root",
        "result": true
      },
      {
        "name": "api.NodeIterator.whatToShow",
        "result": true
      },
      {
        "name": "api.NodeList",
        "result": true
      },
      {
        "name": "api.NodeList.item",
        "result": true
      },
      {
        "name": "api.NodeList.length",
        "result": true
      },
      {
        "name": "api.Notification",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.actions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.badge",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.dir",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.icon",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.image",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.maxActions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onclick",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onshow",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.permission",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.renotify",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.requestPermission",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.requireInteraction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.silent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.tag",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.timestamp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.title",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.vibrate",
        "result": null
      },
      {
        "name": "api.OfflineAudioCompletionEvent",
        "result": true
      },
      {
        "name": "api.OfflineAudioCompletionEvent.renderedBuffer",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.length",
        "result": false
      },
      {
        "name": "api.OfflineAudioContext.oncomplete",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.resume",
        "result": false
      },
      {
        "name": "api.OfflineAudioContext.startRendering",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.suspend",
        "result": false
      },
      {
        "name": "api.OffscreenCanvas",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.convertToBlob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.getContext",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.transferToImageBitmap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.width",
        "result": null
      },
      {
        "name": "api.OffscreenCanvasRenderingContext2D",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.arc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.arcTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.beginPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.bezierCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clearRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clip",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clip",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.closePath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.commit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createLinearGradient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createPattern",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createRadialGradient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.ellipse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.filter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.font",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getLineDash",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.globalAlpha",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.globalCompositeOperation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.imageSmoothingEnabled",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.imageSmoothingQuality",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineCap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineDashOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineJoin",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.measureText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.miterLimit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.moveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.putImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.putImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.quadraticCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.rect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.resetTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.restore",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.rotate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.save",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.scale",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setLineDash",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowBlur",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowOffsetX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowOffsetY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.stroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.stroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.textAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.textBaseline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.transform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.translate",
        "result": null
      },
      {
        "name": "api.OrientationSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OrientationSensor' is undefined",
        "name": "api.OrientationSensor.populateMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OrientationSensor' is undefined",
        "name": "api.OrientationSensor.quaternion",
        "result": null
      },
      {
        "name": "api.OscillatorNode",
        "result": true
      },
      {
        "name": "api.OscillatorNode.detune",
        "result": true
      },
      {
        "name": "api.OscillatorNode.frequency",
        "result": true
      },
      {
        "name": "api.OscillatorNode.setPeriodicWave",
        "result": true
      },
      {
        "name": "api.OscillatorNode.type",
        "result": true
      },
      {
        "name": "api.PageTransitionEvent",
        "result": true
      },
      {
        "name": "api.PageTransitionEvent.persisted",
        "result": true
      },
      {
        "name": "api.PannerNode",
        "result": true
      },
      {
        "name": "api.PannerNode.coneInnerAngle",
        "result": true
      },
      {
        "name": "api.PannerNode.coneOuterAngle",
        "result": true
      },
      {
        "name": "api.PannerNode.coneOuterGain",
        "result": true
      },
      {
        "name": "api.PannerNode.distanceModel",
        "result": true
      },
      {
        "name": "api.PannerNode.maxDistance",
        "result": true
      },
      {
        "name": "api.PannerNode.orientationX",
        "result": false
      },
      {
        "name": "api.PannerNode.orientationY",
        "result": false
      },
      {
        "name": "api.PannerNode.orientationZ",
        "result": false
      },
      {
        "name": "api.PannerNode.panningModel",
        "result": true
      },
      {
        "name": "api.PannerNode.positionX",
        "result": false
      },
      {
        "name": "api.PannerNode.positionY",
        "result": false
      },
      {
        "name": "api.PannerNode.positionZ",
        "result": false
      },
      {
        "name": "api.PannerNode.refDistance",
        "result": true
      },
      {
        "name": "api.PannerNode.rolloffFactor",
        "result": true
      },
      {
        "name": "api.PannerNode.setOrientation",
        "result": true
      },
      {
        "name": "api.PannerNode.setPosition",
        "result": true
      },
      {
        "name": "api.PasswordCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.iconURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.password",
        "result": null
      },
      {
        "name": "api.Path2D",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.addPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.arc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.arcTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.bezierCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.closePath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.ellipse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.lineTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.moveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.quadraticCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.rect",
        "result": null
      },
      {
        "name": "api.PaymentAddress",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.addressLine",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.city",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.country",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.dependentLocality",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.organization",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.phone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.postalCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.recipient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.region",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.sortingCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.toJSON",
        "result": null
      },
      {
        "name": "api.PaymentInstruments",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.set",
        "result": null
      },
      {
        "name": "api.PaymentManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentManager' is undefined",
        "name": "api.PaymentManager.instruments",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentManager' is undefined",
        "name": "api.PaymentManager.userHint",
        "result": null
      },
      {
        "name": "api.PaymentMethodChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentMethodChangeEvent' is undefined",
        "name": "api.PaymentMethodChangeEvent.methodDetails",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentMethodChangeEvent' is undefined",
        "name": "api.PaymentMethodChangeEvent.methodName",
        "result": null
      },
      {
        "name": "api.PaymentRequest",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.canMakePayment",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.hasEnrolledInstrument",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onmerchantvalidation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onpaymentmethodchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onshippingaddresschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onshippingoptionchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingOption",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.show",
        "result": null
      },
      {
        "name": "api.PaymentRequestUpdateEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentRequestUpdateEvent' is undefined",
        "name": "api.PaymentRequestUpdateEvent.updateWith",
        "result": null
      },
      {
        "name": "api.PaymentResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.complete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.details",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.methodName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.onpayerdetailchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerEmail",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerPhone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.requestId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.retry",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.shippingAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.shippingOption",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.toJSON",
        "result": null
      },
      {
        "name": "api.Performance",
        "result": true
      },
      {
        "name": "api.Performance.clearMarks",
        "result": true
      },
      {
        "name": "api.Performance.clearMeasures",
        "result": true
      },
      {
        "name": "api.Performance.clearResourceTimings",
        "result": true
      },
      {
        "name": "api.Performance.eventCounts",
        "result": false
      },
      {
        "name": "api.Performance.getEntries",
        "result": true
      },
      {
        "name": "api.Performance.getEntriesByName",
        "result": true
      },
      {
        "name": "api.Performance.getEntriesByType",
        "result": true
      },
      {
        "name": "api.Performance.mark",
        "result": true
      },
      {
        "name": "api.Performance.measure",
        "result": true
      },
      {
        "name": "api.Performance.navigation",
        "result": true
      },
      {
        "name": "api.Performance.now",
        "result": true
      },
      {
        "name": "api.Performance.onresourcetimingbufferfull",
        "result": false
      },
      {
        "name": "api.Performance.setResourceTimingBufferSize",
        "result": true
      },
      {
        "name": "api.Performance.timeOrigin",
        "result": false
      },
      {
        "name": "api.Performance.timing",
        "result": true
      },
      {
        "name": "api.Performance.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceEntry",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.duration",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.entryType",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.name",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.startTime",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceEventTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.cancelable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.processingEnd",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.processingStart",
        "result": null
      },
      {
        "name": "api.PerformanceLongTaskTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceLongTaskTiming' is undefined",
        "name": "api.PerformanceLongTaskTiming.attribution",
        "result": null
      },
      {
        "name": "api.PerformanceMark",
        "result": true
      },
      {
        "name": "api.PerformanceMark.detail",
        "result": false
      },
      {
        "name": "api.PerformanceMeasure",
        "result": true
      },
      {
        "name": "api.PerformanceMeasure.detail",
        "result": false
      },
      {
        "name": "api.PerformanceNavigation",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.redirectCount",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.type",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_BACK_FORWARD",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_NAVIGATE",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_RELOAD",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_RESERVED",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domComplete",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domContentLoadedEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domContentLoadedEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domInteractive",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.loadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.loadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.redirectCount",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceNavigationTiming.type",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.unloadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.unloadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.supportedEntryTypes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.takeRecords",
        "result": null
      },
      {
        "name": "api.PerformanceObserverEntryList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntries",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntriesByName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntriesByType",
        "result": null
      },
      {
        "name": "api.PerformancePaintTiming",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.connectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.connectStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.decodedBodySize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.domainLookupEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.domainLookupStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.encodedBodySize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.fetchStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.initiatorType",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.nextHopProtocol",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.redirectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.redirectStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.requestStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.responseEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.responseStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.secureConnectionStart",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.serverTiming",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.transferSize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.workerStart",
        "result": false
      },
      {
        "name": "api.PerformanceServerTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.description",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.duration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.toJSON",
        "result": null
      },
      {
        "name": "api.PerformanceTiming",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.connectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.connectStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domainLookupEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domainLookupStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domComplete",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domContentLoadedEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domContentLoadedEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domInteractive",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domLoading",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.fetchStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.loadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.loadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.navigationStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.redirectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.redirectStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.requestStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.responseEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.responseStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.secureConnectionStart",
        "result": false
      },
      {
        "name": "api.PerformanceTiming.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.unloadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.unloadEventStart",
        "result": true
      },
      {
        "name": "api.PeriodicWave",
        "result": true
      },
      {
        "name": "api.Permissions",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Permissions' is undefined",
        "name": "api.Permissions.query",
        "result": null
      },
      {
        "name": "api.PermissionStatus",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PermissionStatus' is undefined",
        "name": "api.PermissionStatus.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PermissionStatus' is undefined",
        "name": "api.PermissionStatus.state",
        "result": null
      },
      {
        "name": "api.PhotoCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.fillLightMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.imageHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.imageWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.redEyeReduction",
        "result": null
      },
      {
        "name": "api.PictureInPictureWindow",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.onresize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.width",
        "result": null
      },
      {
        "name": "api.Plugin",
        "result": true
      },
      {
        "name": "api.Plugin.description",
        "result": true
      },
      {
        "name": "api.Plugin.filename",
        "result": true
      },
      {
        "name": "api.Plugin.item",
        "result": true
      },
      {
        "name": "api.Plugin.length",
        "result": true
      },
      {
        "name": "api.Plugin.name",
        "result": true
      },
      {
        "name": "api.Plugin.namedItem",
        "result": true
      },
      {
        "name": "api.PluginArray",
        "result": true
      },
      {
        "name": "api.PluginArray.item",
        "result": true
      },
      {
        "name": "api.PluginArray.length",
        "result": true
      },
      {
        "name": "api.PluginArray.namedItem",
        "result": true
      },
      {
        "name": "api.PluginArray.refresh",
        "result": true
      },
      {
        "name": "api.PointerEvent",
        "result": true
      },
      {
        "name": "api.PointerEvent.getCoalescedEvents",
        "result": false
      },
      {
        "name": "api.PointerEvent.getPredictedEvents",
        "result": false
      },
      {
        "name": "api.PointerEvent.height",
        "result": true
      },
      {
        "name": "api.PointerEvent.isPrimary",
        "result": true
      },
      {
        "name": "api.PointerEvent.pointerId",
        "result": true
      },
      {
        "name": "api.PointerEvent.pointerType",
        "result": true
      },
      {
        "name": "api.PointerEvent.pressure",
        "result": true
      },
      {
        "name": "api.PointerEvent.tangentialPressure",
        "result": false
      },
      {
        "name": "api.PointerEvent.tiltX",
        "result": true
      },
      {
        "name": "api.PointerEvent.tiltY",
        "result": true
      },
      {
        "name": "api.PointerEvent.twist",
        "result": false
      },
      {
        "name": "api.PointerEvent.width",
        "result": true
      },
      {
        "name": "api.PopStateEvent",
        "result": true
      },
      {
        "name": "api.PopStateEvent.state",
        "result": true
      },
      {
        "name": "api.Position",
        "result": true
      },
      {
        "name": "api.Position.coords",
        "result": true
      },
      {
        "name": "api.Position.timestamp",
        "result": true
      },
      {
        "name": "api.PositionError",
        "result": true
      },
      {
        "name": "api.PositionError.code",
        "result": true
      },
      {
        "name": "api.PositionError.message",
        "result": true
      },
      {
        "name": "api.PositionError.PERMISSION_DENIED",
        "result": true
      },
      {
        "name": "api.PositionError.POSITION_UNAVAILABLE",
        "result": true
      },
      {
        "name": "api.PositionError.TIMEOUT",
        "result": true
      },
      {
        "name": "api.Presentation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Presentation' is undefined",
        "name": "api.Presentation.defaultRequest",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Presentation' is undefined",
        "name": "api.Presentation.receiver",
        "result": null
      },
      {
        "name": "api.PresentationAvailability",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationAvailability' is undefined",
        "name": "api.PresentationAvailability.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationAvailability' is undefined",
        "name": "api.PresentationAvailability.value",
        "result": null
      },
      {
        "name": "api.PresentationConnection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.binaryType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onterminate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.terminate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.url",
        "result": null
      },
      {
        "name": "api.PresentationConnectionAvailableEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionAvailableEvent' is undefined",
        "name": "api.PresentationConnectionAvailableEvent.connection",
        "result": null
      },
      {
        "name": "api.PresentationConnectionCloseEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionCloseEvent' is undefined",
        "name": "api.PresentationConnectionCloseEvent.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionCloseEvent' is undefined",
        "name": "api.PresentationConnectionCloseEvent.reason",
        "result": null
      },
      {
        "name": "api.PresentationConnectionList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionList' is undefined",
        "name": "api.PresentationConnectionList.connections",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionList' is undefined",
        "name": "api.PresentationConnectionList.onconnectionavailable",
        "result": null
      },
      {
        "name": "api.PresentationReceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationReceiver' is undefined",
        "name": "api.PresentationReceiver.connectionList",
        "result": null
      },
      {
        "name": "api.PresentationRequest",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.getAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.onconnectionavailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.reconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.start",
        "result": null
      },
      {
        "name": "api.ProcessingInstruction",
        "result": true
      },
      {
        "name": "api.ProcessingInstruction.sheet",
        "result": false
      },
      {
        "name": "api.ProcessingInstruction.target",
        "result": true
      },
      {
        "name": "api.ProgressEvent",
        "result": true
      },
      {
        "name": "api.ProgressEvent.lengthComputable",
        "result": true
      },
      {
        "name": "api.ProgressEvent.loaded",
        "result": true
      },
      {
        "name": "api.ProgressEvent.total",
        "result": true
      },
      {
        "name": "api.PromiseRejectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PromiseRejectionEvent' is undefined",
        "name": "api.PromiseRejectionEvent.promise",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PromiseRejectionEvent' is undefined",
        "name": "api.PromiseRejectionEvent.reason",
        "result": null
      },
      {
        "name": "api.ProximitySensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.distance",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.near",
        "result": null
      },
      {
        "name": "api.PublicKeyCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.getClientExtensionResults",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.rawId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.response",
        "result": null
      },
      {
        "name": "api.PushManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.getSubscription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.permissionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.subscribe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.supportedContentEncodings",
        "result": null
      },
      {
        "name": "api.PushSubscription",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.endpoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.expirationTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.getKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.options",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.unsubscribe",
        "result": null
      },
      {
        "name": "api.PushSubscriptionOptions",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushSubscriptionOptions' is undefined",
        "name": "api.PushSubscriptionOptions.applicationServerKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscriptionOptions' is undefined",
        "name": "api.PushSubscriptionOptions.userVisibleOnly",
        "result": null
      },
      {
        "name": "api.RadioNodeList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RadioNodeList' is undefined",
        "name": "api.RadioNodeList.value",
        "result": null
      },
      {
        "name": "api.Range",
        "result": true
      },
      {
        "name": "api.Range.cloneContents",
        "result": true
      },
      {
        "name": "api.Range.cloneRange",
        "result": true
      },
      {
        "name": "api.Range.collapse",
        "result": true
      },
      {
        "name": "api.Range.commonAncestorContainer",
        "result": true
      },
      {
        "name": "api.Range.compareBoundaryPoints",
        "result": true
      },
      {
        "name": "api.Range.comparePoint",
        "result": false
      },
      {
        "name": "api.Range.createContextualFragment",
        "result": true
      },
      {
        "name": "api.Range.deleteContents",
        "result": true
      },
      {
        "name": "api.Range.detach",
        "result": true
      },
      {
        "name": "api.Range.END_TO_END",
        "result": true
      },
      {
        "name": "api.Range.END_TO_START",
        "result": true
      },
      {
        "name": "api.Range.extractContents",
        "result": true
      },
      {
        "name": "api.Range.getBoundingClientRect",
        "result": true
      },
      {
        "name": "api.Range.getClientRects",
        "result": true
      },
      {
        "name": "api.Range.insertNode",
        "result": true
      },
      {
        "name": "api.Range.intersectsNode",
        "result": false
      },
      {
        "name": "api.Range.isPointInRange",
        "result": false
      },
      {
        "name": "api.Range.selectNode",
        "result": true
      },
      {
        "name": "api.Range.selectNodeContents",
        "result": true
      },
      {
        "name": "api.Range.setEnd",
        "result": true
      },
      {
        "name": "api.Range.setEndAfter",
        "result": true
      },
      {
        "name": "api.Range.setEndBefore",
        "result": true
      },
      {
        "name": "api.Range.setStart",
        "result": true
      },
      {
        "name": "api.Range.setStartAfter",
        "result": true
      },
      {
        "name": "api.Range.setStartBefore",
        "result": true
      },
      {
        "name": "api.Range.START_TO_END",
        "result": true
      },
      {
        "name": "api.Range.START_TO_START",
        "result": true
      },
      {
        "name": "api.Range.surroundContents",
        "result": true
      },
      {
        "name": "api.RelativeOrientationSensor",
        "result": false
      },
      {
        "name": "api.RemotePlayback",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.cancelWatchAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.onconnecting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.ondisconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.prompt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.watchAvailability",
        "result": null
      },
      {
        "name": "api.Report",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.url",
        "result": null
      },
      {
        "name": "api.ReportBody",
        "result": false
      },
      {
        "name": "api.ReportingObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.takeRecords",
        "result": null
      },
      {
        "name": "api.Request",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.arrayBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.blob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.bodyUsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.cache",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.clone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.credentials",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.destination",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.formData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.headers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.integrity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.isHistoryNavigation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.isReloadNavigation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.json",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.keepalive",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.method",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.mode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.redirect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.referrerPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.signal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.url",
        "result": null
      },
      {
        "name": "api.ResizeObservation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.lastReportedSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.observedBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.target",
        "result": null
      },
      {
        "name": "api.ResizeObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.unobserve",
        "result": null
      },
      {
        "name": "api.ResizeObserverEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.borderBoxSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.contentBoxSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.contentRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.target",
        "result": null
      },
      {
        "name": "api.ResizeObserverSize",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverSize' is undefined",
        "name": "api.ResizeObserverSize.blockSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverSize' is undefined",
        "name": "api.ResizeObserverSize.inlineSize",
        "result": null
      },
      {
        "name": "api.Response",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.arrayBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.blob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.bodyUsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.clone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.error",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.formData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.headers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.json",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.ok",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.redirect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.redirected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.status",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.statusText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.trailer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.url",
        "result": null
      },
      {
        "name": "api.RTCCertificate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.expires",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.getFingerprints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.getSupportedAlgorithms",
        "result": null
      },
      {
        "name": "api.RTCDataChannel",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.binaryType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.bufferedAmount",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.bufferedAmountLowThreshold",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.label",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.maxPacketLifeTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.maxRetransmits",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.negotiated",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onbufferedamountlow",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onopen",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.ordered",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.priority",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.readyState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "name": "api.RTCDataChannelEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannelEvent' is undefined",
        "name": "api.RTCDataChannelEvent.channel",
        "result": null
      },
      {
        "name": "api.RTCDtlsTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.getRemoteCertificates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.iceTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.state",
        "result": null
      },
      {
        "name": "api.RTCDTMFSender",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.canInsertDTMF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.insertDTMF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.ontonechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.toneBuffer",
        "result": null
      },
      {
        "name": "api.RTCDTMFToneChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFToneChangeEvent' is undefined",
        "name": "api.RTCDTMFToneChangeEvent.tone",
        "result": null
      },
      {
        "name": "api.RTCError",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.errorDetail",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.httpRequestStatusCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.receivedAlert",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sctpCauseCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sdpLineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sentAlert",
        "result": null
      },
      {
        "name": "api.RTCErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCErrorEvent' is undefined",
        "name": "api.RTCErrorEvent.error",
        "result": null
      },
      {
        "name": "api.RTCIceCandidate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.address",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.candidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.component",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.foundation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.port",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.priority",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.relatedAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.relatedPort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.sdpMid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.sdpMLineIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.tcpType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.usernameFragment",
        "result": null
      },
      {
        "name": "api.RTCIceTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.component",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.gatheringState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getLocalCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getLocalParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getRemoteCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getRemoteParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getSelectedCandidatePair",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.ongatheringstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.onselectedcandidatepairchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.role",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.state",
        "result": null
      },
      {
        "name": "api.RTCPeerConnection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addIceCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addIceCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addTransceiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.canTrickleIceCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.connectionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createAnswer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createAnswer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createDataChannel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createOffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createOffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.currentLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.currentRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.generateCertificate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getDefaultIceServers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getReceivers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getSenders",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getTransceivers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.iceConnectionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.iceGatheringState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.localDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onconnectionstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.ondatachannel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicecandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicecandidateerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.oniceconnectionstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicegatheringstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onnegotiationneeded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onsignalingstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onstatsended",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.ontrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.pendingLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.pendingRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.remoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.removeTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.sctp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.signalingState",
        "result": null
      },
      {
        "name": "api.RTCPeerConnectionIceErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.errorCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.errorText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.hostCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.url",
        "result": null
      },
      {
        "name": "api.RTCPeerConnectionIceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceEvent' is undefined",
        "name": "api.RTCPeerConnectionIceEvent.candidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceEvent' is undefined",
        "name": "api.RTCPeerConnectionIceEvent.url",
        "result": null
      },
      {
        "name": "api.RTCRtpReceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getContributingSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getSynchronizationSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.rtcpTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.transport",
        "result": null
      },
      {
        "name": "api.RTCRtpSender",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.dtmf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.replaceTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.rtcpTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.setParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.setStreams",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.transport",
        "result": null
      },
      {
        "name": "api.RTCRtpTransceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.currentDirection",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.mid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.receiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.sender",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.setCodecPreferences",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.stopped",
        "result": null
      },
      {
        "name": "api.RTCSctpTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.maxChannels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.maxMessageSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.transport",
        "result": null
      },
      {
        "name": "api.RTCSessionDescription",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.sdp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.type",
        "result": null
      },
      {
        "name": "api.RTCStatsEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCStatsEvent' is undefined",
        "name": "api.RTCStatsEvent.report",
        "result": null
      },
      {
        "name": "api.RTCStatsReport",
        "result": false
      },
      {
        "name": "api.RTCTrackEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.receiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.streams",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.transceiver",
        "result": null
      },
      {
        "name": "api.Screen",
        "result": true
      },
      {
        "name": "api.Screen.availHeight",
        "result": true
      },
      {
        "name": "api.Screen.availWidth",
        "result": true
      },
      {
        "name": "api.Screen.colorDepth",
        "result": true
      },
      {
        "name": "api.Screen.colorGamut",
        "result": false
      },
      {
        "name": "api.Screen.height",
        "result": true
      },
      {
        "name": "api.Screen.luminance",
        "result": false
      },
      {
        "name": "api.Screen.onchange",
        "result": false
      },
      {
        "name": "api.Screen.orientation",
        "result": false
      },
      {
        "name": "api.Screen.pixelDepth",
        "result": true
      },
      {
        "name": "api.Screen.width",
        "result": true
      },
      {
        "name": "api.ScreenLuminance",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.maxAverage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.min",
        "result": null
      },
      {
        "name": "api.ScreenOrientation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.angle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.lock",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.unlock",
        "result": null
      },
      {
        "name": "api.ScriptProcessorNode",
        "result": true
      },
      {
        "name": "api.ScriptProcessorNode.bufferSize",
        "result": true
      },
      {
        "name": "api.ScriptProcessorNode.onaudioprocess",
        "result": true
      },
      {
        "name": "api.ScrollTimeline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.endScrollOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.orientation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.scrollSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.startScrollOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.timeRange",
        "result": null
      },
      {
        "name": "api.SecurityPolicyViolationEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.blockedURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.blockedURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.colno",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.documentURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.documentURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.effectiveDirective",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.lineno",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.originalPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.sample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.sourceFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.statusCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.violatedDirective",
        "result": null
      },
      {
        "name": "api.Selection",
        "result": true
      },
      {
        "name": "api.Selection.addRange",
        "result": true
      },
      {
        "name": "api.Selection.anchorNode",
        "result": true
      },
      {
        "name": "api.Selection.anchorOffset",
        "result": true
      },
      {
        "name": "api.Selection.collapse",
        "result": true
      },
      {
        "name": "api.Selection.collapseToEnd",
        "result": true
      },
      {
        "name": "api.Selection.collapseToStart",
        "result": true
      },
      {
        "name": "api.Selection.containsNode",
        "result": true
      },
      {
        "name": "api.Selection.deleteFromDocument",
        "result": true
      },
      {
        "name": "api.Selection.empty",
        "result": true
      },
      {
        "name": "api.Selection.extend",
        "result": true
      },
      {
        "name": "api.Selection.focusNode",
        "result": true
      },
      {
        "name": "api.Selection.focusOffset",
        "result": true
      },
      {
        "name": "api.Selection.getRangeAt",
        "result": true
      },
      {
        "name": "api.Selection.isCollapsed",
        "result": true
      },
      {
        "name": "api.Selection.rangeCount",
        "result": true
      },
      {
        "name": "api.Selection.removeAllRanges",
        "result": true
      },
      {
        "name": "api.Selection.removeRange",
        "result": true
      },
      {
        "name": "api.Selection.selectAllChildren",
        "result": true
      },
      {
        "name": "api.Selection.setBaseAndExtent",
        "result": true
      },
      {
        "name": "api.Selection.setPosition",
        "result": false
      },
      {
        "name": "api.Selection.type",
        "result": true
      },
      {
        "name": "api.Sensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.activated",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.hasReading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onactivate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onreading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.timestamp",
        "result": null
      },
      {
        "name": "api.SensorErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SensorErrorEvent' is undefined",
        "name": "api.SensorErrorEvent.error",
        "result": null
      },
      {
        "name": "api.ServiceWorker",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.postMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.postMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.scriptURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.state",
        "result": null
      },
      {
        "name": "api.ServiceWorkerContainer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.controller",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.getRegistration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.getRegistrations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.oncontrollerchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.onmessageerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.register",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.startMessages",
        "result": null
      },
      {
        "name": "api.ServiceWorkerRegistration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.active",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.backgroundFetch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.getNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.installing",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.navigationPreload",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.onupdatefound",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.paymentManager",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.pushManager",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.scope",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.showNotification",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.sync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.unregister",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.update",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.updateViaCache",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.waiting",
        "result": null
      },
      {
        "name": "api.ShadowAnimation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ShadowAnimation' is undefined",
        "name": "api.ShadowAnimation.sourceAnimation",
        "result": null
      },
      {
        "name": "api.ShadowRoot",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.fullscreenElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.host",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.innerHTML",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.mode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.pictureInPictureElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.pointerLockElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.styleSheets",
        "result": null
      },
      {
        "name": "api.SharedWorker",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SharedWorker' is undefined",
        "name": "api.SharedWorker.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SharedWorker' is undefined",
        "name": "api.SharedWorker.port",
        "result": null
      },
      {
        "name": "api.SourceBuffer",
        "result": true
      },
      {
        "name": "api.SourceBuffer.abort",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendBuffer",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendWindowEnd",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendWindowStart",
        "result": true
      },
      {
        "name": "api.SourceBuffer.audioTracks",
        "result": true
      },
      {
        "name": "api.SourceBuffer.buffered",
        "result": true
      },
      {
        "name": "api.SourceBuffer.mode",
        "result": true
      },
      {
        "name": "api.SourceBuffer.onabort",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onerror",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdate",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdateend",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdatestart",
        "result": false
      },
      {
        "name": "api.SourceBuffer.remove",
        "result": true
      },
      {
        "name": "api.SourceBuffer.textTracks",
        "result": false
      },
      {
        "name": "api.SourceBuffer.timestampOffset",
        "result": true
      },
      {
        "name": "api.SourceBuffer.updating",
        "result": true
      },
      {
        "name": "api.SourceBuffer.videoTracks",
        "result": true
      },
      {
        "name": "api.SourceBufferList",
        "result": true
      },
      {
        "name": "api.SourceBufferList.length",
        "result": true
      },
      {
        "name": "api.SourceBufferList.onaddsourcebuffer",
        "result": false
      },
      {
        "name": "api.SourceBufferList.onremovesourcebuffer",
        "result": false
      },
      {
        "name": "api.SpeechGrammar",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammar' is undefined",
        "name": "api.SpeechGrammar.src",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammar' is undefined",
        "name": "api.SpeechGrammar.weight",
        "result": null
      },
      {
        "name": "api.SpeechGrammarList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.addFromString",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.addFromURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.length",
        "result": null
      },
      {
        "name": "api.SpeechRecognition",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.continuous",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.grammars",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.interimResults",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.maxAlternatives",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onaudioend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onaudiostart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onnomatch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onresult",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onsoundend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onsoundstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onspeechend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onspeechstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.serviceURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.stop",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionAlternative",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionAlternative' is undefined",
        "name": "api.SpeechRecognitionAlternative.confidence",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionAlternative' is undefined",
        "name": "api.SpeechRecognitionAlternative.transcript",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionErrorEvent' is undefined",
        "name": "api.SpeechRecognitionErrorEvent.error",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionErrorEvent' is undefined",
        "name": "api.SpeechRecognitionErrorEvent.message",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.emma",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.interpretation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.resultIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.results",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.isFinal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.length",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionResultList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResultList' is undefined",
        "name": "api.SpeechRecognitionResultList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResultList' is undefined",
        "name": "api.SpeechRecognitionResultList.length",
        "result": null
      },
      {
        "name": "api.SpeechSynthesis",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.cancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.getVoices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.onvoiceschanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.paused",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.pending",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.resume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.speak",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.speaking",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisErrorEvent' is undefined",
        "name": "api.SpeechSynthesisErrorEvent.error",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.charIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.charLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.elapsedTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.utterance",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisUtterance",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onboundary",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onmark",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onpause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onresume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.pitch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.rate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.voice",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.volume",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisVoice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.default",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.localService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.voiceURI",
        "result": null
      },
      {
        "name": "api.StaticRange",
        "result": false
      },
      {
        "name": "api.StereoPannerNode",
        "result": true
      },
      {
        "name": "api.StereoPannerNode.pan",
        "result": true
      },
      {
        "name": "api.Storage",
        "result": true
      },
      {
        "name": "api.Storage.clear",
        "result": true
      },
      {
        "name": "api.Storage.getItem",
        "result": true
      },
      {
        "name": "api.Storage.key",
        "result": true
      },
      {
        "name": "api.Storage.length",
        "result": true
      },
      {
        "name": "api.Storage.removeItem",
        "result": true
      },
      {
        "name": "api.Storage.setItem",
        "result": true
      },
      {
        "name": "api.StorageEvent",
        "result": true
      },
      {
        "name": "api.StorageEvent.initStorageEvent",
        "result": true
      },
      {
        "name": "api.StorageEvent.key",
        "result": true
      },
      {
        "name": "api.StorageEvent.newValue",
        "result": true
      },
      {
        "name": "api.StorageEvent.oldValue",
        "result": true
      },
      {
        "name": "api.StorageEvent.storageArea",
        "result": true
      },
      {
        "name": "api.StorageEvent.url",
        "result": true
      },
      {
        "name": "api.StorageManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.estimate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.persist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.persisted",
        "result": null
      },
      {
        "name": "api.StylePropertyMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.set",
        "result": null
      },
      {
        "name": "api.StylePropertyMapReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.size",
        "result": null
      },
      {
        "name": "api.StyleSheet",
        "result": true
      },
      {
        "name": "api.StyleSheet.disabled",
        "result": true
      },
      {
        "name": "api.StyleSheet.href",
        "result": true
      },
      {
        "name": "api.StyleSheet.media",
        "result": true
      },
      {
        "name": "api.StyleSheet.ownerNode",
        "result": true
      },
      {
        "name": "api.StyleSheet.parentStyleSheet",
        "result": true
      },
      {
        "name": "api.StyleSheet.title",
        "result": true
      },
      {
        "name": "api.StyleSheet.type",
        "result": true
      },
      {
        "name": "api.StyleSheetList",
        "result": true
      },
      {
        "name": "api.StyleSheetList.item",
        "result": true
      },
      {
        "name": "api.StyleSheetList.length",
        "result": true
      },
      {
        "name": "api.SubtleCrypto",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.decrypt",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.deriveBits",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.deriveKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.digest",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.encrypt",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.exportKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.generateKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.importKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.sign",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.unwrapKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.verify",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.wrapKey",
        "result": true
      },
      {
        "name": "api.SVGAElement",
        "result": true
      },
      {
        "name": "api.SVGAElement.download",
        "result": false
      },
      {
        "name": "api.SVGAElement.hash",
        "result": false
      },
      {
        "name": "api.SVGAElement.host",
        "result": false
      },
      {
        "name": "api.SVGAElement.hostname",
        "result": false
      },
      {
        "name": "api.SVGAElement.href",
        "result": true
      },
      {
        "name": "api.SVGAElement.href",
        "result": true
      },
      {
        "name": "api.SVGAElement.hreflang",
        "result": false
      },
      {
        "name": "api.SVGAElement.origin",
        "result": false
      },
      {
        "name": "api.SVGAElement.password",
        "result": false
      },
      {
        "name": "api.SVGAElement.pathname",
        "result": false
      },
      {
        "name": "api.SVGAElement.ping",
        "result": false
      },
      {
        "name": "api.SVGAElement.port",
        "result": false
      },
      {
        "name": "api.SVGAElement.protocol",
        "result": false
      },
      {
        "name": "api.SVGAElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.SVGAElement.rel",
        "result": false
      },
      {
        "name": "api.SVGAElement.relList",
        "result": false
      },
      {
        "name": "api.SVGAElement.search",
        "result": false
      },
      {
        "name": "api.SVGAElement.target",
        "result": true
      },
      {
        "name": "api.SVGAElement.text",
        "result": false
      },
      {
        "name": "api.SVGAElement.type",
        "result": false
      },
      {
        "name": "api.SVGAElement.username",
        "result": false
      },
      {
        "name": "api.SVGAngle",
        "result": true
      },
      {
        "name": "api.SVGAngle.convertToSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAngle.newValueSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_DEG",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_GRAD",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_RAD",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_UNSPECIFIED",
        "result": true
      },
      {
        "name": "api.SVGAngle.unitType",
        "result": true
      },
      {
        "name": "api.SVGAngle.value",
        "result": true
      },
      {
        "name": "api.SVGAngle.valueAsString",
        "result": true
      },
      {
        "name": "api.SVGAngle.valueInSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGCircleElement",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.cx",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.cy",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.r",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement.clipPathUnits",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement.transform",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.amplitude",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.exponent",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.intercept",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.offset",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.slope",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.tableValues",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.type",
        "result": true
      },
      {
        "name": "api.SVGDefsElement",
        "result": true
      },
      {
        "name": "api.SVGDescElement",
        "result": true
      },
      {
        "name": "api.SVGElement",
        "result": true
      },
      {
        "name": "api.SVGElement.attributeStyleMap",
        "result": false
      },
      {
        "name": "api.SVGElement.blur",
        "result": false
      },
      {
        "name": "api.SVGElement.className",
        "result": false
      },
      {
        "name": "api.SVGElement.correspondingElement",
        "result": false
      },
      {
        "name": "api.SVGElement.correspondingUseElement",
        "result": false
      },
      {
        "name": "api.SVGElement.dataset",
        "result": false
      },
      {
        "name": "api.SVGElement.focus",
        "result": false
      },
      {
        "name": "api.SVGElement.nonce",
        "result": false
      },
      {
        "name": "api.SVGElement.onabort",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationcancel",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationend",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationiteration",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onauxclick",
        "result": false
      },
      {
        "name": "api.SVGElement.onblur",
        "result": false
      },
      {
        "name": "api.SVGElement.oncancel",
        "result": false
      },
      {
        "name": "api.SVGElement.oncanplay",
        "result": false
      },
      {
        "name": "api.SVGElement.oncanplaythrough",
        "result": false
      },
      {
        "name": "api.SVGElement.onchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onclick",
        "result": true
      },
      {
        "name": "api.SVGElement.onclose",
        "result": false
      },
      {
        "name": "api.SVGElement.oncontextmenu",
        "result": false
      },
      {
        "name": "api.SVGElement.oncopy",
        "result": false
      },
      {
        "name": "api.SVGElement.oncuechange",
        "result": false
      },
      {
        "name": "api.SVGElement.oncut",
        "result": false
      },
      {
        "name": "api.SVGElement.ondblclick",
        "result": true
      },
      {
        "name": "api.SVGElement.ondrag",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragend",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragenter",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragexit",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragleave",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragover",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragstart",
        "result": false
      },
      {
        "name": "api.SVGElement.ondrop",
        "result": false
      },
      {
        "name": "api.SVGElement.ondurationchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onemptied",
        "result": false
      },
      {
        "name": "api.SVGElement.onended",
        "result": false
      },
      {
        "name": "api.SVGElement.onerror",
        "result": false
      },
      {
        "name": "api.SVGElement.onfocus",
        "result": false
      },
      {
        "name": "api.SVGElement.onformdata",
        "result": false
      },
      {
        "name": "api.SVGElement.ongotpointercapture",
        "result": true
      },
      {
        "name": "api.SVGElement.oninput",
        "result": false
      },
      {
        "name": "api.SVGElement.oninvalid",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeydown",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeypress",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeyup",
        "result": false
      },
      {
        "name": "api.SVGElement.onload",
        "result": true
      },
      {
        "name": "api.SVGElement.onloadeddata",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadedmetadata",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadend",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onlostpointercapture",
        "result": true
      },
      {
        "name": "api.SVGElement.onmousedown",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseenter",
        "result": false
      },
      {
        "name": "api.SVGElement.onmouseleave",
        "result": false
      },
      {
        "name": "api.SVGElement.onmousemove",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseout",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseover",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseup",
        "result": true
      },
      {
        "name": "api.SVGElement.onpaste",
        "result": false
      },
      {
        "name": "api.SVGElement.onpause",
        "result": false
      },
      {
        "name": "api.SVGElement.onplay",
        "result": false
      },
      {
        "name": "api.SVGElement.onplaying",
        "result": false
      },
      {
        "name": "api.SVGElement.onpointercancel",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerdown",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerenter",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerleave",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointermove",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerout",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerover",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerup",
        "result": true
      },
      {
        "name": "api.SVGElement.onprogress",
        "result": false
      },
      {
        "name": "api.SVGElement.onratechange",
        "result": false
      },
      {
        "name": "api.SVGElement.onreset",
        "result": false
      },
      {
        "name": "api.SVGElement.onresize",
        "result": false
      },
      {
        "name": "api.SVGElement.onscroll",
        "result": false
      },
      {
        "name": "api.SVGElement.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.SVGElement.onseeked",
        "result": false
      },
      {
        "name": "api.SVGElement.onseeking",
        "result": false
      },
      {
        "name": "api.SVGElement.onselect",
        "result": false
      },
      {
        "name": "api.SVGElement.onselectionchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onselectstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onstalled",
        "result": false
      },
      {
        "name": "api.SVGElement.onsubmit",
        "result": false
      },
      {
        "name": "api.SVGElement.onsuspend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontimeupdate",
        "result": false
      },
      {
        "name": "api.SVGElement.ontoggle",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchcancel",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchmove",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchstart",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionrun",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onvolumechange",
        "result": false
      },
      {
        "name": "api.SVGElement.onwaiting",
        "result": false
      },
      {
        "name": "api.SVGElement.onwheel",
        "result": true
      },
      {
        "name": "api.SVGElement.ownerSVGElement",
        "result": true
      },
      {
        "name": "api.SVGElement.style",
        "result": false
      },
      {
        "name": "api.SVGElement.tabIndex",
        "result": false
      },
      {
        "name": "api.SVGElement.viewportElement",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.cx",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.cy",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.rx",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.ry",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.mode",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_BURN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_DODGE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_DARKEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_DIFFERENCE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_EXCLUSION",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_HARD_LIGHT",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_HUE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_LIGHTEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_LUMINOSITY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_MULTIPLY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_NORMAL",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_OVERLAY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SATURATION",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SCREEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SOFT_LIGHT",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_HUEROTATE",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_MATRIX",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.type",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.values",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.y",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.height",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k1",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k2",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k3",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k4",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.operator",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.result",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ATOP",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_IN",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OUT",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OVER",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_XOR",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.width",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.x",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.bias",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.divisor",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.edgeMode",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelMatrix",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.orderX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.orderY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.preserveAlpha",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_DUPLICATE",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_WRAP",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.targetX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.targetY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.diffuseConstant",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.surfaceScale",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.scale",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_A",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_B",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_G",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_R",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.xChannelSelector",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.yChannelSelector",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement.azimuth",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement.elevation",
        "result": true
      },
      {
        "name": "api.SVGFEDropShadowElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.dx",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.dy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.in1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.result",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.setStdDeviation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.stdDeviationX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.stdDeviationY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.y",
        "result": null
      },
      {
        "name": "api.SVGFEFloodElement",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEFuncAElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncBElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncGElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncRElement",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.edgeMode",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.setStdDeviation",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.stdDeviationX",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.stdDeviationY",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_DUPLICATE",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_NONE",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_UNKNOWN",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_WRAP",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGFEImageElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.href",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEMergeNodeElement",
        "result": true
      },
      {
        "name": "api.SVGFEMergeNodeElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.operator",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.radiusX",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.radiusY",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_DILATE",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_ERODE",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.dx",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.dy",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.z",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.height",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.result",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.specularConstant",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.specularExponent",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.surfaceScale",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.width",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.x",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.y",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.limitingConeAngle",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtX",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtY",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtZ",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.specularExponent",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.x",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.y",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.z",
        "result": true
      },
      {
        "name": "api.SVGFETileElement",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.height",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.result",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.width",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.x",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.y",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.baseFrequencyX",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.baseFrequencyY",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.height",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.numOctaves",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.result",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.seed",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.stitchTiles",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_NOSTITCH",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_STITCH",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_FRACTALNOISE",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_TURBULENCE",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.type",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.width",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.x",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.y",
        "result": true
      },
      {
        "name": "api.SVGFilterElement",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.filterUnits",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.height",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.href",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.primitiveUnits",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.width",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.x",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.y",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.height",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.width",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.x",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.y",
        "result": true
      },
      {
        "name": "api.SVGGElement",
        "result": true
      },
      {
        "name": "api.SVGGeometryElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.getPointAtLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.getTotalLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.isPointInFill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.pathLength",
        "result": null
      },
      {
        "name": "api.SVGGradientElement",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.gradientTransform",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.gradientUnits",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.href",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.spreadMethod",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_PAD",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_REFLECT",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_REPEAT",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGGraphicsElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getBBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getCTM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getScreenCTM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.requiredExtensions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.systemLanguage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.transform",
        "result": null
      },
      {
        "name": "api.SVGImageElement",
        "result": true
      },
      {
        "name": "api.SVGImageElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGImageElement.height",
        "result": true
      },
      {
        "name": "api.SVGImageElement.href",
        "result": true
      },
      {
        "name": "api.SVGImageElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGImageElement.width",
        "result": true
      },
      {
        "name": "api.SVGImageElement.x",
        "result": true
      },
      {
        "name": "api.SVGImageElement.y",
        "result": true
      },
      {
        "name": "api.SVGLength",
        "result": true
      },
      {
        "name": "api.SVGLength.convertToSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLength.newValueSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_CM",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_EMS",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_EXS",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_IN",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_MM",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_NUMBER",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PC",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PERCENTAGE",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PT",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PX",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGLength.unitType",
        "result": true
      },
      {
        "name": "api.SVGLength.value",
        "result": true
      },
      {
        "name": "api.SVGLength.valueAsString",
        "result": true
      },
      {
        "name": "api.SVGLength.valueInSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLengthList",
        "result": true
      },
      {
        "name": "api.SVGLengthList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.clear",
        "result": true
      },
      {
        "name": "api.SVGLengthList.getItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.initialize",
        "result": true
      },
      {
        "name": "api.SVGLengthList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGLengthList.length",
        "result": false
      },
      {
        "name": "api.SVGLengthList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGLengthList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.x1",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.x2",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.y1",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.y2",
        "result": true
      },
      {
        "name": "api.SVGLineElement",
        "result": true
      },
      {
        "name": "api.SVGLineElement.x1",
        "result": true
      },
      {
        "name": "api.SVGLineElement.x2",
        "result": true
      },
      {
        "name": "api.SVGLineElement.y1",
        "result": true
      },
      {
        "name": "api.SVGLineElement.y2",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerHeight",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerUnits",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerWidth",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.orient",
        "result": false
      },
      {
        "name": "api.SVGMarkerElement.orientAngle",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.orientType",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.refX",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.refY",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.setOrientToAngle",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.setOrientToAuto",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_AUTO",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_STROKEWIDTH",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_USERSPACEONUSE",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGMaskElement",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.height",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.maskContentUnits",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.maskUnits",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.width",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.x",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.y",
        "result": true
      },
      {
        "name": "api.SVGMetadataElement",
        "result": true
      },
      {
        "name": "api.SVGNumber",
        "result": true
      },
      {
        "name": "api.SVGNumber.value",
        "result": true
      },
      {
        "name": "api.SVGNumberList",
        "result": true
      },
      {
        "name": "api.SVGNumberList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.clear",
        "result": true
      },
      {
        "name": "api.SVGNumberList.getItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.initialize",
        "result": true
      },
      {
        "name": "api.SVGNumberList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGNumberList.length",
        "result": false
      },
      {
        "name": "api.SVGNumberList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGNumberList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGPathElement",
        "result": true
      },
      {
        "name": "api.SVGPatternElement",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.height",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.href",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternContentUnits",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternTransform",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternUnits",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.width",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.x",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.y",
        "result": true
      },
      {
        "name": "api.SVGPointList",
        "result": true
      },
      {
        "name": "api.SVGPointList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.clear",
        "result": true
      },
      {
        "name": "api.SVGPointList.getItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.initialize",
        "result": true
      },
      {
        "name": "api.SVGPointList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGPointList.length",
        "result": false
      },
      {
        "name": "api.SVGPointList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGPointList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement.animatedPoints",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement.points",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement.animatedPoints",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement.points",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.align",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.meetOrSlice",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_SLICE",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMIN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.cx",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.cy",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.fr",
        "result": false
      },
      {
        "name": "api.SVGRadialGradientElement.fx",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.fy",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.r",
        "result": true
      },
      {
        "name": "api.SVGRectElement",
        "result": true
      },
      {
        "name": "api.SVGRectElement.height",
        "result": true
      },
      {
        "name": "api.SVGRectElement.rx",
        "result": true
      },
      {
        "name": "api.SVGRectElement.ry",
        "result": true
      },
      {
        "name": "api.SVGRectElement.width",
        "result": true
      },
      {
        "name": "api.SVGRectElement.x",
        "result": true
      },
      {
        "name": "api.SVGRectElement.y",
        "result": true
      },
      {
        "name": "api.SVGScriptElement",
        "result": true
      },
      {
        "name": "api.SVGScriptElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGScriptElement.href",
        "result": true
      },
      {
        "name": "api.SVGScriptElement.type",
        "result": true
      },
      {
        "name": "api.SVGStopElement",
        "result": true
      },
      {
        "name": "api.SVGStopElement.offset",
        "result": true
      },
      {
        "name": "api.SVGStringList",
        "result": true
      },
      {
        "name": "api.SVGStringList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.clear",
        "result": true
      },
      {
        "name": "api.SVGStringList.getItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.initialize",
        "result": true
      },
      {
        "name": "api.SVGStringList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGStringList.length",
        "result": false
      },
      {
        "name": "api.SVGStringList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGStringList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGStyleElement",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.media",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.sheet",
        "result": false
      },
      {
        "name": "api.SVGStyleElement.title",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.type",
        "result": true
      },
      {
        "name": "api.SVGSVGElement",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.checkEnclosure",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.checkIntersection",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGAngle",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGLength",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGMatrix",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGNumber",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGPoint",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGRect",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGTransform",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGTransformFromMatrix",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.currentScale",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.currentTranslate",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.deselectAll",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.forceRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getElementById",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getEnclosureList",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getIntersectionList",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.height",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.onafterprint",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onbeforeprint",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onbeforeunload",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onhashchange",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onmessage",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onoffline",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.ononline",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpagehide",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpageshow",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpopstate",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onstorage",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onunload",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.suspendRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_DISABLE",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_MAGNIFY",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.unsuspendRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.unsuspendRedrawAll",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.width",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.x",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.y",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.zoomAndPan",
        "result": true
      },
      {
        "name": "api.SVGSwitchElement",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getCharNumAtPosition",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getComputedTextLength",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getEndPositionOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getExtentOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getNumberOfChars",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getRotationOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getStartPositionOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getSubStringLength",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.lengthAdjust",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_SPACING",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_SPACINGANDGLYPHS",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.selectSubString",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.textLength",
        "result": true
      },
      {
        "name": "api.SVGTextElement",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.href",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.method",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.spacing",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.startOffset",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_ALIGN",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_STRETCH",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_AUTO",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_EXACT",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.dx",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.dy",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.rotate",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.x",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.y",
        "result": true
      },
      {
        "name": "api.SVGTitleElement",
        "result": true
      },
      {
        "name": "api.SVGTransform",
        "result": true
      },
      {
        "name": "api.SVGTransform.angle",
        "result": true
      },
      {
        "name": "api.SVGTransform.matrix",
        "result": true
      },
      {
        "name": "api.SVGTransform.setMatrix",
        "result": true
      },
      {
        "name": "api.SVGTransform.setRotate",
        "result": true
      },
      {
        "name": "api.SVGTransform.setScale",
        "result": true
      },
      {
        "name": "api.SVGTransform.setSkewX",
        "result": true
      },
      {
        "name": "api.SVGTransform.setSkewY",
        "result": true
      },
      {
        "name": "api.SVGTransform.setTranslate",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_MATRIX",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_ROTATE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SCALE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SKEWX",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SKEWY",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_TRANSLATE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTransform.type",
        "result": true
      },
      {
        "name": "api.SVGTransformList",
        "result": true
      },
      {
        "name": "api.SVGTransformList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.clear",
        "result": true
      },
      {
        "name": "api.SVGTransformList.consolidate",
        "result": true
      },
      {
        "name": "api.SVGTransformList.createSVGTransformFromMatrix",
        "result": true
      },
      {
        "name": "api.SVGTransformList.getItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.initialize",
        "result": true
      },
      {
        "name": "api.SVGTransformList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGTransformList.length",
        "result": false
      },
      {
        "name": "api.SVGTransformList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGTransformList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGTSpanElement",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE",
        "result": true
      },
      {
        "name": "api.SVGUseElement",
        "result": true
      },
      {
        "name": "api.SVGUseElement.animatedInstanceRoot",
        "result": true
      },
      {
        "name": "api.SVGUseElement.height",
        "result": true
      },
      {
        "name": "api.SVGUseElement.href",
        "result": true
      },
      {
        "name": "api.SVGUseElement.instanceRoot",
        "result": true
      },
      {
        "name": "api.SVGUseElement.width",
        "result": true
      },
      {
        "name": "api.SVGUseElement.x",
        "result": true
      },
      {
        "name": "api.SVGUseElement.y",
        "result": true
      },
      {
        "name": "api.SVGUseElementShadowRoot",
        "result": false
      },
      {
        "name": "api.SVGViewElement",
        "result": true
      },
      {
        "name": "api.SVGViewElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_DISABLE",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_MAGNIFY",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGViewElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGViewElement.zoomAndPan",
        "result": true
      },
      {
        "name": "api.SyncManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SyncManager' is undefined",
        "name": "api.SyncManager.getTags",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SyncManager' is undefined",
        "name": "api.SyncManager.register",
        "result": null
      },
      {
        "name": "api.TaskAttributionTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerSrc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerType",
        "result": null
      },
      {
        "name": "api.Text",
        "result": true
      },
      {
        "name": "api.Text.assignedSlot",
        "result": false
      },
      {
        "name": "api.Text.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Text.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Text.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Text.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Text.splitText",
        "result": true
      },
      {
        "name": "api.Text.wholeText",
        "result": true
      },
      {
        "name": "api.TextDecoder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.decode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.fatal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.ignoreBOM",
        "result": null
      },
      {
        "name": "api.TextDecoderStream",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.fatal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.ignoreBOM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.readable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.writable",
        "result": null
      },
      {
        "name": "api.TextEncoder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encodeInto",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encoding",
        "result": null
      },
      {
        "name": "api.TextEncoderStream",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.readable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.writable",
        "result": null
      },
      {
        "name": "api.TextMetrics",
        "result": true
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxLeft",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxRight",
        "result": false
      },
      {
        "name": "api.TextMetrics.alphabeticBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.emHeightAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.emHeightDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.fontBoundingBoxAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.fontBoundingBoxDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.hangingBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.ideographicBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.width",
        "result": true
      },
      {
        "name": "api.TextTrack",
        "result": true
      },
      {
        "name": "api.TextTrack.activeCues",
        "result": true
      },
      {
        "name": "api.TextTrack.addCue",
        "result": true
      },
      {
        "name": "api.TextTrack.cues",
        "result": true
      },
      {
        "name": "api.TextTrack.id",
        "result": false
      },
      {
        "name": "api.TextTrack.inBandMetadataTrackDispatchType",
        "result": true
      },
      {
        "name": "api.TextTrack.kind",
        "result": true
      },
      {
        "name": "api.TextTrack.label",
        "result": true
      },
      {
        "name": "api.TextTrack.language",
        "result": true
      },
      {
        "name": "api.TextTrack.mode",
        "result": true
      },
      {
        "name": "api.TextTrack.oncuechange",
        "result": true
      },
      {
        "name": "api.TextTrack.removeCue",
        "result": true
      },
      {
        "name": "api.TextTrack.sourceBuffer",
        "result": false
      },
      {
        "name": "api.TextTrackCue",
        "result": true
      },
      {
        "name": "api.TextTrackCue.endTime",
        "result": true
      },
      {
        "name": "api.TextTrackCue.id",
        "result": true
      },
      {
        "name": "api.TextTrackCue.onenter",
        "result": true
      },
      {
        "name": "api.TextTrackCue.onexit",
        "result": true
      },
      {
        "name": "api.TextTrackCue.pauseOnExit",
        "result": true
      },
      {
        "name": "api.TextTrackCue.startTime",
        "result": true
      },
      {
        "name": "api.TextTrackCue.track",
        "result": true
      },
      {
        "name": "api.TextTrackCueList",
        "result": true
      },
      {
        "name": "api.TextTrackCueList.getCueById",
        "result": true
      },
      {
        "name": "api.TextTrackCueList.length",
        "result": true
      },
      {
        "name": "api.TextTrackList",
        "result": true
      },
      {
        "name": "api.TextTrackList.getTrackById",
        "result": false
      },
      {
        "name": "api.TextTrackList.length",
        "result": true
      },
      {
        "name": "api.TextTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.TextTrackList.onchange",
        "result": false
      },
      {
        "name": "api.TextTrackList.onremovetrack",
        "result": false
      },
      {
        "name": "api.TimeRanges",
        "result": true
      },
      {
        "name": "api.TimeRanges.end",
        "result": true
      },
      {
        "name": "api.TimeRanges.length",
        "result": true
      },
      {
        "name": "api.TimeRanges.start",
        "result": true
      },
      {
        "name": "api.Touch",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.altitudeAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.azimuthAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.clientX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.clientY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.force",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.identifier",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.pageX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.pageY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.radiusX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.radiusY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.rotationAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.screenX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.screenY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.target",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.touchType",
        "result": null
      },
      {
        "name": "api.TouchEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.altKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.changedTouches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.ctrlKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.metaKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.shiftKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.targetTouches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.touches",
        "result": null
      },
      {
        "name": "api.TouchList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TouchList' is undefined",
        "name": "api.TouchList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchList' is undefined",
        "name": "api.TouchList.length",
        "result": null
      },
      {
        "name": "api.TrackEvent",
        "result": true
      },
      {
        "name": "api.TrackEvent.track",
        "result": true
      },
      {
        "name": "api.TransitionEvent",
        "result": true
      },
      {
        "name": "api.TransitionEvent.elapsedTime",
        "result": true
      },
      {
        "name": "api.TransitionEvent.propertyName",
        "result": true
      },
      {
        "name": "api.TransitionEvent.pseudoElement",
        "result": false
      },
      {
        "name": "api.TreeWalker",
        "result": true
      },
      {
        "name": "api.TreeWalker.currentNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.filter",
        "result": true
      },
      {
        "name": "api.TreeWalker.firstChild",
        "result": true
      },
      {
        "name": "api.TreeWalker.lastChild",
        "result": true
      },
      {
        "name": "api.TreeWalker.nextNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.nextSibling",
        "result": true
      },
      {
        "name": "api.TreeWalker.parentNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.previousNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.previousSibling",
        "result": true
      },
      {
        "name": "api.TreeWalker.root",
        "result": true
      },
      {
        "name": "api.TreeWalker.whatToShow",
        "result": true
      },
      {
        "name": "api.UIEvent",
        "result": true
      },
      {
        "name": "api.UIEvent.detail",
        "result": true
      },
      {
        "name": "api.UIEvent.sourceCapabilities",
        "result": false
      },
      {
        "name": "api.UIEvent.view",
        "result": true
      },
      {
        "name": "api.UIEvent.which",
        "result": false
      },
      {
        "name": "api.UncalibratedMagnetometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.xBias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.yBias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.zBias",
        "result": null
      },
      {
        "name": "api.URL",
        "result": true
      },
      {
        "name": "api.URL.createObjectURL",
        "result": true
      },
      {
        "name": "api.URL.createObjectURL",
        "result": true
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.hash",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.host",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.hostname",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.href",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.origin",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.password",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.pathname",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.port",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.protocol",
        "result": null
      },
      {
        "name": "api.URL.revokeObjectURL",
        "result": true
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.search",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.searchParams",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.toJSON",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.username",
        "result": null
      },
      {
        "name": "api.URLSearchParams",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.sort",
        "result": null
      },
      {
        "name": "api.USB",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.getDevices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.ondisconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.requestDevice",
        "result": null
      },
      {
        "name": "api.USBAlternateInterface",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.alternateSetting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.endpoints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceClass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceProtocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceSubclass",
        "result": null
      },
      {
        "name": "api.USBConfiguration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.configurationName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.configurationValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.interfaces",
        "result": null
      },
      {
        "name": "api.USBConnectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBConnectionEvent' is undefined",
        "name": "api.USBConnectionEvent.device",
        "result": null
      },
      {
        "name": "api.USBDevice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.claimInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.clearHalt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.configuration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.configurations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.controlTransferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.controlTransferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceClass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceProtocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceSubclass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionMajor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionMinor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionSubminor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.isochronousTransferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.isochronousTransferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.manufacturerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.opened",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.productId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.productName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.releaseInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.reset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.selectAlternateInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.selectConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.serialNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.transferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.transferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionMajor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionMinor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionSubminor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.vendorId",
        "result": null
      },
      {
        "name": "api.USBEndpoint",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.endpointNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.packetSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.type",
        "result": null
      },
      {
        "name": "api.USBInterface",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.alternate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.alternates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.claimed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.interfaceNumber",
        "result": null
      },
      {
        "name": "api.USBInTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBInTransferResult' is undefined",
        "name": "api.USBInTransferResult.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInTransferResult' is undefined",
        "name": "api.USBInTransferResult.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousInTransferPacket",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferPacket' is undefined",
        "name": "api.USBIsochronousInTransferPacket.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferPacket' is undefined",
        "name": "api.USBIsochronousInTransferPacket.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousInTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferResult' is undefined",
        "name": "api.USBIsochronousInTransferResult.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferResult' is undefined",
        "name": "api.USBIsochronousInTransferResult.packets",
        "result": null
      },
      {
        "name": "api.USBIsochronousOutTransferPacket",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferPacket' is undefined",
        "name": "api.USBIsochronousOutTransferPacket.bytesWritten",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferPacket' is undefined",
        "name": "api.USBIsochronousOutTransferPacket.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousOutTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferResult' is undefined",
        "name": "api.USBIsochronousOutTransferResult.packets",
        "result": null
      },
      {
        "name": "api.USBOutTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBOutTransferResult' is undefined",
        "name": "api.USBOutTransferResult.bytesWritten",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBOutTransferResult' is undefined",
        "name": "api.USBOutTransferResult.status",
        "result": null
      },
      {
        "name": "api.USBPermissionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBPermissionResult' is undefined",
        "name": "api.USBPermissionResult.devices",
        "result": null
      },
      {
        "name": "api.ValidityState",
        "result": true
      },
      {
        "name": "api.ValidityState.badInput",
        "result": true
      },
      {
        "name": "api.ValidityState.customError",
        "result": true
      },
      {
        "name": "api.ValidityState.patternMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.rangeOverflow",
        "result": true
      },
      {
        "name": "api.ValidityState.rangeUnderflow",
        "result": true
      },
      {
        "name": "api.ValidityState.stepMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.tooLong",
        "result": true
      },
      {
        "name": "api.ValidityState.tooShort",
        "result": false
      },
      {
        "name": "api.ValidityState.typeMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.valid",
        "result": true
      },
      {
        "name": "api.ValidityState.valueMissing",
        "result": true
      },
      {
        "name": "api.ValueEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ValueEvent' is undefined",
        "name": "api.ValueEvent.value",
        "result": null
      },
      {
        "name": "api.VideoTrack",
        "result": true
      },
      {
        "name": "api.VideoTrack.id",
        "result": true
      },
      {
        "name": "api.VideoTrack.kind",
        "result": true
      },
      {
        "name": "api.VideoTrack.label",
        "result": true
      },
      {
        "name": "api.VideoTrack.language",
        "result": true
      },
      {
        "name": "api.VideoTrack.selected",
        "result": true
      },
      {
        "name": "api.VideoTrack.sourceBuffer",
        "result": true
      },
      {
        "name": "api.VideoTrackList",
        "result": true
      },
      {
        "name": "api.VideoTrackList.getTrackById",
        "result": true
      },
      {
        "name": "api.VideoTrackList.length",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onchange",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onremovetrack",
        "result": true
      },
      {
        "name": "api.VideoTrackList.selectedIndex",
        "result": true
      },
      {
        "name": "api.VTTCue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.align",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.getCueAsHTML",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.line",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.lineAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.position",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.positionAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.region",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.size",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.snapToLines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.vertical",
        "result": null
      },
      {
        "name": "api.VTTRegion",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.lines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.regionAnchorX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.regionAnchorY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.scroll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.viewportAnchorX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.viewportAnchorY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.width",
        "result": null
      },
      {
        "name": "api.WakeLock",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WakeLock' is undefined",
        "name": "api.WakeLock.request",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WakeLock' is undefined",
        "name": "api.WakeLock.requestPermission",
        "result": null
      },
      {
        "name": "api.WaveShaperNode",
        "result": true
      },
      {
        "name": "api.WaveShaperNode.curve",
        "result": true
      },
      {
        "name": "api.WaveShaperNode.oversample",
        "result": true
      },
      {
        "name": "api.WebGL2RenderingContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_ATTRIBUTES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_UNIFORMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.activeTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALIASED_LINE_WIDTH_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALIASED_POINT_SIZE_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALPHA_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALREADY_SIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALWAYS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ANY_SAMPLES_PASSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ANY_SAMPLES_PASSED_CONSERVATIVE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ARRAY_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ATTACHED_SHADERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.attachShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.beginQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.beginTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindAttribLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBufferBase",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBufferRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_DST_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_SRC_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendEquation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendEquationSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendFuncSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blitFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLUE_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BROWSER_DEFAULT_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BUFFER_USAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BYTE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CCW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.checkFramebufferStatus",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CLAMP_TO_EDGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferfi",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferfv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferuiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearDepth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearStencil",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clientWaitSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.colorMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPARE_REF_TO_TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPILE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compileShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPRESSED_TEXTURE_FORMATS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONDITION_SATISFIED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONSTANT_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONSTANT_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONTEXT_LOST_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_READ_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_READ_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_WRITE_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_WRITE_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyBufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CULL_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CULL_FACE_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.cullFace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_PROGRAM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_QUERY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_VERTEX_ATTRIB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DECR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DECR_WRAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DELETE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT16",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_STENCIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_STENCIL_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH24_STENCIL8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH32F_STENCIL8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.detachShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.disable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.disableVertexAttribArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DITHER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DONT_CARE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawArrays",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawArraysInstanced",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawBuffers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawElementsInstanced",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawingBufferHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawingBufferWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawRangeElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DST_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.enable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.enableVertexAttribArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.endQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.endTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.EQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FASTEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.fenceSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.finish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_32_UNSIGNED_INT_24_8_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2x3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2x4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3x2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3x4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4x2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4x3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.flush",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAGMENT_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAGMENT_SHADER_DERIVATIVE_HINT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_COMPLETE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_DEFAULT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_UNSUPPORTED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferTexture2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferTextureLayer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT_AND_BACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.frontFace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_ADD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_SUBTRACT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GENERATE_MIPMAP_HINT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.generateMipmap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveAttrib",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniformBlockName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniformBlockParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniforms",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getAttachedShaders",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getAttribLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getBufferParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getBufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getContextAttributes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getError",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getExtension",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getFragDataLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getFramebufferAttachmentParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getIndexedParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getInternalformatParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getProgramInfoLog",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getProgramParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getQueryParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getRenderbufferParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSamplerParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderInfoLog",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderPrecisionFormat",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSupportedExtensions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSyncParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getTexParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getTransformFeedbackVarying",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformBlockIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformIndices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getVertexAttrib",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getVertexAttribOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GREATER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GREEN_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HALF_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HIGH_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HIGH_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.hint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INCR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INCR_WRAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_2_10_10_10_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INTERLEAVED_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_ENUM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_FRAMEBUFFER_OPERATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_OPERATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.invalidateFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.invalidateSubFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVERT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isContextLost",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isEnabled",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.KEEP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LESS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_LOOP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_STRIP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_WIDTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR_MIPMAP_LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR_MIPMAP_NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.lineWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINK_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.linkProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LOW_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LOW_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LUMINANCE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LUMINANCE_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.makeXRCompatible",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_DRAW_BUFFERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENT_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENTS_INDICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENTS_VERTICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_INPUT_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_PROGRAM_TEXEL_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_RENDERBUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_SERVER_WAIT_TIMEOUT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_LOD_BIAS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_UNIFORM_BLOCK_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_UNIFORM_BUFFER_BINDINGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VARYING_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VARYING_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_OUTPUT_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VIEWPORT_DIMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MEDIUM_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MEDIUM_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIN_PROGRAM_TEXEL_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIRRORED_REPEAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST_MIPMAP_LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST_MIPMAP_NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEVER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NICEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NO_ERROR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NONE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NOTEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.OBJECT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_DST_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_SRC_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.OUT_OF_MEMORY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_ROW_LENGTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_SKIP_PIXELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_SKIP_ROWS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.pauseTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_PACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_PACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_UNPACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_UNPACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.pixelStorei",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POINTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_FACTOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_FILL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.polygonOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.QUERY_RESULT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.QUERY_RESULT_AVAILABLE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R11F_G11F_B10F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RASTERIZER_DISCARD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_ALPHA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_BLUE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_DEPTH_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_GREEN_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_HEIGHT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_INTERNAL_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_RED_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_STENCIL_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_WIDTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.renderbufferStorage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.renderbufferStorageMultisample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.REPEAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.REPLACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.resumeTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB10_A2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB10_A2UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB5_A1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB565",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB9_E5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_ALPHA_TO_COVERAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_BUFFERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE_INVERT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.sampleCoverage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_ARRAY_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_CUBE_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.samplerParameterf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.samplerParameteri",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.scissor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SCISSOR_BOX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SCISSOR_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SEPARATE_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHADER_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.shaderSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHADING_LANGUAGE_VERSION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SIGNED_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_ALPHA_SATURATE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB8_ALPHA8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_PASS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_REF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_VALUE_MASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_INDEX8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_PASS_DEPTH_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_PASS_DEPTH_PASS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_REF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_VALUE_MASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilFuncSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilMaskSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilOp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilOpSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SUBPIXEL_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_CONDITION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FENCE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FLAGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FLUSH_COMMANDS_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_GPU_COMMANDS_COMPLETE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texParameterf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texParameteri",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texStorage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texStorage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BASE_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_CUBE_MAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_COMPARE_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_COMPARE_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_IMMUTABLE_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_IMMUTABLE_LEVELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAG_FILTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAX_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAX_LOD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MIN_FILTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MIN_LOD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_R",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_S",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_T",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE16",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE17",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE18",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE19",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE20",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE25",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE26",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE27",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE28",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE29",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE30",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TIMEOUT_EXPIRED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TIMEOUT_IGNORED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_ACTIVE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_START",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_PAUSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_VARYINGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.transformFeedbackVaryings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLE_FAN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLE_STRIP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_ARRAY_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_DATA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_START",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_IS_ROW_MAJOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_MATRIX_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformBlockBinding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2x3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2x4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3x2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3x4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4x2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4x3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_FLIP_Y_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_IMAGE_HEIGHT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_ROW_LENGTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_IMAGES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_PIXELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_ROWS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_BYTE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_10F_11F_11F_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_2_10_10_10_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_24_8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_5_9_9_9_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_4_4_4_4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_5_5_5_1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_5_6_5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.useProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VALIDATE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.validateProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VENDOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERSION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ARRAY_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_DIVISOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_POINTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib1f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib1fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib2f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib3f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib4f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribDivisor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribIPointer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribPointer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.viewport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VIEWPORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.WAIT_FAILED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.waitSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ZERO",
        "result": null
      },
      {
        "name": "api.WebGLActiveInfo",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.name",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.size",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.type",
        "result": true
      },
      {
        "name": "api.WebGLBuffer",
        "result": true
      },
      {
        "name": "api.WebGLContextEvent",
        "result": true
      },
      {
        "name": "api.WebGLContextEvent.statusMessage",
        "result": true
      },
      {
        "name": "api.WebGLFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLObject",
        "result": true
      },
      {
        "name": "api.WebGLProgram",
        "result": true
      },
      {
        "name": "api.WebGLQuery",
        "result": false
      },
      {
        "name": "api.WebGLRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_ATTRIBUTES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_TEXTURE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_UNIFORMS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.activeTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALIASED_LINE_WIDTH_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALIASED_POINT_SIZE_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALPHA_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALWAYS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ARRAY_BUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ATTACHED_SHADERS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.attachShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BACK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindAttribLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_DST_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_SRC_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendColor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendEquation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendEquationSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendFuncSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLUE_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BROWSER_DEFAULT_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BUFFER_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BUFFER_USAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferSubData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BYTE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.canvas",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.canvas",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CCW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.checkFramebufferStatus",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CLAMP_TO_EDGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clear",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearColor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearDepth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearStencil",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_ATTACHMENT0",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.colorMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COMPILE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compileShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COMPRESSED_TEXTURE_FORMATS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compressedTexImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compressedTexSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONSTANT_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONSTANT_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONTEXT_LOST_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.copyTexImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.copyTexSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CULL_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CULL_FACE_MODE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.cullFace",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CURRENT_PROGRAM",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CURRENT_VERTEX_ATTRIB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DECR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DECR_WRAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DELETE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_COMPONENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_COMPONENT16",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_STENCIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthRange",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.detachShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.disable",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.disableVertexAttribArray",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DITHER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DONT_CARE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawArrays",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawElements",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawingBufferHeight",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawingBufferWidth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DST_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DYNAMIC_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ELEMENT_ARRAY_BUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ELEMENT_ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.enable",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.enableVertexAttribArray",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.EQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FASTEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.finish",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.flush",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAGMENT_SHADER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_COMPLETE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_UNSUPPORTED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.framebufferRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.framebufferTexture2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT_AND_BACK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.frontFace",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_ADD",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_REVERSE_SUBTRACT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_SUBTRACT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GENERATE_MIPMAP_HINT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.generateMipmap",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getActiveAttrib",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getActiveUniform",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getAttachedShaders",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getAttribLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getBufferParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getContextAttributes",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getError",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getExtension",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getFramebufferAttachmentParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getProgramInfoLog",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getProgramParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getRenderbufferParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderInfoLog",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderPrecisionFormat",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderSource",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getSupportedExtensions",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getTexParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getUniform",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getUniformLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getVertexAttrib",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getVertexAttribOffset",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GREATER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GREEN_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.HIGH_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.HIGH_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.hint",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INCR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INCR_WRAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_ENUM",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_FRAMEBUFFER_OPERATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_OPERATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVERT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isContextLost",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isEnabled",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.KEEP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LESS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_LOOP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_STRIP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_WIDTH",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR_MIPMAP_LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR_MIPMAP_NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.lineWidth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINK_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.linkProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LOW_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LOW_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LUMINANCE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LUMINANCE_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.makeXRCompatible",
        "result": false
      },
      {
        "name": "api.WebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_RENDERBUFFER_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_TEXTURE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VARYING_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_ATTRIBS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_UNIFORM_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VIEWPORT_DIMS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MEDIUM_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MEDIUM_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MIRRORED_REPEAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST_MIPMAP_LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST_MIPMAP_NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEVER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NICEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NO_ERROR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NONE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NOTEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_DST_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_SRC_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.OUT_OF_MEMORY",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.PACK_ALIGNMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.pixelStorei",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POINTS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_FACTOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_FILL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.polygonOffset",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.readPixels",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RED_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_ALPHA_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_BLUE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_DEPTH_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_GREEN_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_HEIGHT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_INTERNAL_FORMAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_RED_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_STENCIL_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_WIDTH",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.renderbufferStorage",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.REPEAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.REPLACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB5_A1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB565",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGBA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGBA4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_ALPHA_TO_COVERAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_BUFFERS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE_INVERT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.sampleCoverage",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLER_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLER_CUBE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.scissor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SCISSOR_BOX",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SCISSOR_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHADER_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.shaderSource",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHADING_LANGUAGE_VERSION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_ALPHA_SATURATE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STATIC_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_PASS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_REF",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_VALUE_MASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_INDEX8",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_PASS_DEPTH_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_PASS_DEPTH_PASS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_REF",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_VALUE_MASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilFuncSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilMaskSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilOp",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilOpSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STREAM_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SUBPIXEL_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texParameterf",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texParameteri",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_BINDING_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_BINDING_CUBE_MAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_MAG_FILTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_MIN_FILTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_WRAP_S",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_WRAP_T",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE0",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE10",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE11",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE12",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE13",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE14",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE15",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE16",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE17",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE18",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE19",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE20",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE21",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE22",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE23",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE24",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE25",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE26",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE27",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE28",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE29",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE30",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE31",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE5",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE6",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE7",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE8",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE9",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLE_FAN",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLE_STRIP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_ALIGNMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_BYTE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_5_6_5",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.useProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VALIDATE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.validateProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VENDOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERSION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_POINTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_SHADER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib1f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib1fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib2f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib3f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib4f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttribPointer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.viewport",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VIEWPORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ZERO",
        "result": true
      },
      {
        "name": "api.WebGLSampler",
        "result": false
      },
      {
        "name": "api.WebGLShader",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.precision",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.rangeMax",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.rangeMin",
        "result": true
      },
      {
        "name": "api.WebGLSync",
        "result": false
      },
      {
        "name": "api.WebGLTexture",
        "result": true
      },
      {
        "name": "api.WebGLTransformFeedback",
        "result": false
      },
      {
        "name": "api.WebGLUniformLocation",
        "result": true
      },
      {
        "name": "api.WebGLVertexArrayObject",
        "result": false
      },
      {
        "name": "api.WebSocket",
        "result": true
      },
      {
        "name": "api.WebSocket.binaryType",
        "result": true
      },
      {
        "name": "api.WebSocket.bufferedAmount",
        "result": true
      },
      {
        "name": "api.WebSocket.close",
        "result": true
      },
      {
        "name": "api.WebSocket.CLOSED",
        "result": true
      },
      {
        "name": "api.WebSocket.CLOSING",
        "result": true
      },
      {
        "name": "api.WebSocket.CONNECTING",
        "result": true
      },
      {
        "name": "api.WebSocket.extensions",
        "result": true
      },
      {
        "name": "api.WebSocket.onclose",
        "result": true
      },
      {
        "name": "api.WebSocket.onerror",
        "result": true
      },
      {
        "name": "api.WebSocket.onmessage",
        "result": true
      },
      {
        "name": "api.WebSocket.onopen",
        "result": true
      },
      {
        "name": "api.WebSocket.OPEN",
        "result": true
      },
      {
        "name": "api.WebSocket.protocol",
        "result": true
      },
      {
        "name": "api.WebSocket.readyState",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.url",
        "result": true
      },
      {
        "name": "api.WheelEvent",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaMode",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaX",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaY",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaZ",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_LINE",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_PAGE",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_PIXEL",
        "result": true
      },
      {
        "name": "api.Window",
        "result": true
      },
      {
        "name": "api.Window.alert",
        "result": true
      },
      {
        "name": "api.Window.alert",
        "result": true
      },
      {
        "name": "api.Window.applicationCache",
        "result": true
      },
      {
        "name": "api.Window.atob",
        "result": true
      },
      {
        "name": "api.Window.blur",
        "result": true
      },
      {
        "name": "api.Window.btoa",
        "result": true
      },
      {
        "name": "api.Window.caches",
        "result": false
      },
      {
        "name": "api.Window.cancelAnimationFrame",
        "result": true
      },
      {
        "name": "api.Window.cancelIdleCallback",
        "result": false
      },
      {
        "name": "api.Window.captureEvents",
        "result": true
      },
      {
        "name": "api.Window.clearInterval",
        "result": true
      },
      {
        "name": "api.Window.clearTimeout",
        "result": true
      },
      {
        "name": "api.Window.close",
        "result": true
      },
      {
        "name": "api.Window.closed",
        "result": true
      },
      {
        "name": "api.Window.confirm",
        "result": true
      },
      {
        "name": "api.Window.cookieStore",
        "result": false
      },
      {
        "name": "api.Window.createImageBitmap",
        "result": false
      },
      {
        "name": "api.Window.createImageBitmap",
        "result": false
      },
      {
        "name": "api.Window.crypto",
        "result": true
      },
      {
        "name": "api.Window.customElements",
        "result": false
      },
      {
        "name": "api.Window.devicePixelRatio",
        "result": true
      },
      {
        "name": "api.Window.document",
        "result": true
      },
      {
        "name": "api.Window.event",
        "result": true
      },
      {
        "name": "api.Window.external",
        "result": true
      },
      {
        "name": "api.Window.fetch",
        "result": false
      },
      {
        "name": "api.Window.focus",
        "result": true
      },
      {
        "name": "api.Window.frameElement",
        "result": true
      },
      {
        "name": "api.Window.frames",
        "result": true
      },
      {
        "name": "api.Window.getComputedStyle",
        "result": true
      },
      {
        "name": "api.Window.getSelection",
        "result": true
      },
      {
        "name": "api.Window.history",
        "result": true
      },
      {
        "name": "api.Window.indexedDB",
        "result": true
      },
      {
        "name": "api.Window.innerHeight",
        "result": true
      },
      {
        "name": "api.Window.innerWidth",
        "result": true
      },
      {
        "name": "api.Window.isSecureContext",
        "result": false
      },
      {
        "name": "api.Window.length",
        "result": true
      },
      {
        "name": "api.Window.localStorage",
        "result": true
      },
      {
        "name": "api.Window.location",
        "result": true
      },
      {
        "name": "api.Window.locationbar",
        "result": true
      },
      {
        "name": "api.Window.matchMedia",
        "result": true
      },
      {
        "name": "api.Window.menubar",
        "result": true
      },
      {
        "name": "api.Window.moveBy",
        "result": true
      },
      {
        "name": "api.Window.moveTo",
        "result": true
      },
      {
        "name": "api.Window.name",
        "result": true
      },
      {
        "name": "api.Window.navigator",
        "result": true
      },
      {
        "name": "api.Window.onabort",
        "result": true
      },
      {
        "name": "api.Window.onafterprint",
        "result": true
      },
      {
        "name": "api.Window.onanimationcancel",
        "result": false
      },
      {
        "name": "api.Window.onanimationend",
        "result": false
      },
      {
        "name": "api.Window.onanimationiteration",
        "result": false
      },
      {
        "name": "api.Window.onanimationstart",
        "result": false
      },
      {
        "name": "api.Window.onappinstalled",
        "result": false
      },
      {
        "name": "api.Window.onauxclick",
        "result": false
      },
      {
        "name": "api.Window.onbeforeinstallprompt",
        "result": false
      },
      {
        "name": "api.Window.onbeforeprint",
        "result": true
      },
      {
        "name": "api.Window.onbeforeunload",
        "result": true
      },
      {
        "name": "api.Window.onblur",
        "result": true
      },
      {
        "name": "api.Window.oncancel",
        "result": false
      },
      {
        "name": "api.Window.oncanplay",
        "result": true
      },
      {
        "name": "api.Window.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.Window.onchange",
        "result": true
      },
      {
        "name": "api.Window.onclick",
        "result": true
      },
      {
        "name": "api.Window.onclose",
        "result": false
      },
      {
        "name": "api.Window.oncontextmenu",
        "result": true
      },
      {
        "name": "api.Window.oncuechange",
        "result": false
      },
      {
        "name": "api.Window.ondblclick",
        "result": true
      },
      {
        "name": "api.Window.ondevicemotion",
        "result": true
      },
      {
        "name": "api.Window.ondeviceorientation",
        "result": true
      },
      {
        "name": "api.Window.ondrag",
        "result": true
      },
      {
        "name": "api.Window.ondragend",
        "result": true
      },
      {
        "name": "api.Window.ondragenter",
        "result": true
      },
      {
        "name": "api.Window.ondragexit",
        "result": false
      },
      {
        "name": "api.Window.ondragleave",
        "result": true
      },
      {
        "name": "api.Window.ondragover",
        "result": true
      },
      {
        "name": "api.Window.ondragstart",
        "result": true
      },
      {
        "name": "api.Window.ondrop",
        "result": true
      },
      {
        "name": "api.Window.ondurationchange",
        "result": true
      },
      {
        "name": "api.Window.onemptied",
        "result": true
      },
      {
        "name": "api.Window.onended",
        "result": true
      },
      {
        "name": "api.Window.onerror",
        "result": true
      },
      {
        "name": "api.Window.onfocus",
        "result": true
      },
      {
        "name": "api.Window.onformdata",
        "result": false
      },
      {
        "name": "api.Window.ongotpointercapture",
        "result": false
      },
      {
        "name": "api.Window.onhashchange",
        "result": true
      },
      {
        "name": "api.Window.oninput",
        "result": true
      },
      {
        "name": "api.Window.oninvalid",
        "result": false
      },
      {
        "name": "api.Window.onkeydown",
        "result": true
      },
      {
        "name": "api.Window.onkeypress",
        "result": true
      },
      {
        "name": "api.Window.onkeyup",
        "result": true
      },
      {
        "name": "api.Window.onlanguagechange",
        "result": false
      },
      {
        "name": "api.Window.onload",
        "result": true
      },
      {
        "name": "api.Window.onloadeddata",
        "result": true
      },
      {
        "name": "api.Window.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.Window.onloadend",
        "result": false
      },
      {
        "name": "api.Window.onloadstart",
        "result": true
      },
      {
        "name": "api.Window.onlostpointercapture",
        "result": false
      },
      {
        "name": "api.Window.onmessage",
        "result": true
      },
      {
        "name": "api.Window.onmessageerror",
        "result": false
      },
      {
        "name": "api.Window.onmousedown",
        "result": true
      },
      {
        "name": "api.Window.onmouseenter",
        "result": true
      },
      {
        "name": "api.Window.onmouseleave",
        "result": true
      },
      {
        "name": "api.Window.onmousemove",
        "result": true
      },
      {
        "name": "api.Window.onmouseout",
        "result": true
      },
      {
        "name": "api.Window.onmouseover",
        "result": true
      },
      {
        "name": "api.Window.onmouseup",
        "result": true
      },
      {
        "name": "api.Window.onoffline",
        "result": true
      },
      {
        "name": "api.Window.ononline",
        "result": true
      },
      {
        "name": "api.Window.onorientationchange",
        "result": false
      },
      {
        "name": "api.Window.onpagehide",
        "result": true
      },
      {
        "name": "api.Window.onpageshow",
        "result": true
      },
      {
        "name": "api.Window.onpause",
        "result": true
      },
      {
        "name": "api.Window.onplay",
        "result": true
      },
      {
        "name": "api.Window.onplaying",
        "result": true
      },
      {
        "name": "api.Window.onpointercancel",
        "result": true
      },
      {
        "name": "api.Window.onpointerdown",
        "result": true
      },
      {
        "name": "api.Window.onpointerenter",
        "result": true
      },
      {
        "name": "api.Window.onpointerleave",
        "result": true
      },
      {
        "name": "api.Window.onpointermove",
        "result": true
      },
      {
        "name": "api.Window.onpointerout",
        "result": true
      },
      {
        "name": "api.Window.onpointerover",
        "result": true
      },
      {
        "name": "api.Window.onpointerup",
        "result": true
      },
      {
        "name": "api.Window.onpopstate",
        "result": true
      },
      {
        "name": "api.Window.onprogress",
        "result": true
      },
      {
        "name": "api.Window.onratechange",
        "result": true
      },
      {
        "name": "api.Window.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.Window.onreset",
        "result": true
      },
      {
        "name": "api.Window.onresize",
        "result": true
      },
      {
        "name": "api.Window.onscroll",
        "result": true
      },
      {
        "name": "api.Window.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.Window.onseeked",
        "result": true
      },
      {
        "name": "api.Window.onseeking",
        "result": true
      },
      {
        "name": "api.Window.onselect",
        "result": true
      },
      {
        "name": "api.Window.onselectionchange",
        "result": false
      },
      {
        "name": "api.Window.onselectstart",
        "result": false
      },
      {
        "name": "api.Window.onstalled",
        "result": true
      },
      {
        "name": "api.Window.onstorage",
        "result": true
      },
      {
        "name": "api.Window.onsubmit",
        "result": true
      },
      {
        "name": "api.Window.onsuspend",
        "result": true
      },
      {
        "name": "api.Window.ontimeupdate",
        "result": true
      },
      {
        "name": "api.Window.ontoggle",
        "result": false
      },
      {
        "name": "api.Window.ontouchcancel",
        "result": false
      },
      {
        "name": "api.Window.ontouchend",
        "result": false
      },
      {
        "name": "api.Window.ontouchmove",
        "result": false
      },
      {
        "name": "api.Window.ontouchstart",
        "result": false
      },
      {
        "name": "api.Window.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.Window.ontransitionend",
        "result": false
      },
      {
        "name": "api.Window.ontransitionrun",
        "result": false
      },
      {
        "name": "api.Window.ontransitionstart",
        "result": false
      },
      {
        "name": "api.Window.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.Window.onunload",
        "result": true
      },
      {
        "name": "api.Window.onvolumechange",
        "result": true
      },
      {
        "name": "api.Window.onwaiting",
        "result": true
      },
      {
        "name": "api.Window.onwheel",
        "result": true
      },
      {
        "name": "api.Window.open",
        "result": true
      },
      {
        "name": "api.Window.opener",
        "result": true
      },
      {
        "name": "api.Window.orientation",
        "result": false
      },
      {
        "name": "api.Window.origin",
        "result": false
      },
      {
        "name": "api.Window.outerHeight",
        "result": true
      },
      {
        "name": "api.Window.outerWidth",
        "result": true
      },
      {
        "name": "api.Window.pageXOffset",
        "result": true
      },
      {
        "name": "api.Window.pageYOffset",
        "result": true
      },
      {
        "name": "api.Window.parent",
        "result": true
      },
      {
        "name": "api.Window.performance",
        "result": true
      },
      {
        "name": "api.Window.personalbar",
        "result": true
      },
      {
        "name": "api.Window.postMessage",
        "result": true
      },
      {
        "name": "api.Window.postMessage",
        "result": true
      },
      {
        "name": "api.Window.print",
        "result": true
      },
      {
        "name": "api.Window.prompt",
        "result": true
      },
      {
        "name": "api.Window.queueMicrotask",
        "result": false
      },
      {
        "name": "api.Window.releaseEvents",
        "result": true
      },
      {
        "name": "api.Window.requestAnimationFrame",
        "result": true
      },
      {
        "name": "api.Window.requestIdleCallback",
        "result": false
      },
      {
        "name": "api.Window.resizeBy",
        "result": true
      },
      {
        "name": "api.Window.resizeTo",
        "result": true
      },
      {
        "name": "api.Window.screen",
        "result": true
      },
      {
        "name": "api.Window.screenLeft",
        "result": true
      },
      {
        "name": "api.Window.screenTop",
        "result": true
      },
      {
        "name": "api.Window.screenX",
        "result": true
      },
      {
        "name": "api.Window.screenY",
        "result": true
      },
      {
        "name": "api.Window.scroll",
        "result": true
      },
      {
        "name": "api.Window.scroll",
        "result": true
      },
      {
        "name": "api.Window.scrollbars",
        "result": true
      },
      {
        "name": "api.Window.scrollBy",
        "result": true
      },
      {
        "name": "api.Window.scrollBy",
        "result": true
      },
      {
        "name": "api.Window.scrollTo",
        "result": true
      },
      {
        "name": "api.Window.scrollTo",
        "result": true
      },
      {
        "name": "api.Window.scrollX",
        "result": true
      },
      {
        "name": "api.Window.scrollY",
        "result": true
      },
      {
        "name": "api.Window.self",
        "result": true
      },
      {
        "name": "api.Window.sessionStorage",
        "result": true
      },
      {
        "name": "api.Window.setInterval",
        "result": true
      },
      {
        "name": "api.Window.setTimeout",
        "result": true
      },
      {
        "name": "api.Window.speechSynthesis",
        "result": false
      },
      {
        "name": "api.Window.status",
        "result": true
      },
      {
        "name": "api.Window.statusbar",
        "result": true
      },
      {
        "name": "api.Window.stop",
        "result": false
      },
      {
        "name": "api.Window.toolbar",
        "result": true
      },
      {
        "name": "api.Window.top",
        "result": true
      },
      {
        "name": "api.Window.window",
        "result": true
      },
      {
        "name": "api.Worker",
        "result": true
      },
      {
        "name": "api.Worker.onerror",
        "result": true
      },
      {
        "name": "api.Worker.onmessage",
        "result": true
      },
      {
        "name": "api.Worker.onmessageerror",
        "result": false
      },
      {
        "name": "api.Worker.postMessage",
        "result": true
      },
      {
        "name": "api.Worker.postMessage",
        "result": true
      },
      {
        "name": "api.Worker.terminate",
        "result": true
      },
      {
        "name": "api.Worklet",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Worklet' is undefined",
        "name": "api.Worklet.addModule",
        "result": null
      },
      {
        "name": "api.WorkletAnimation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WorkletAnimation' is undefined",
        "name": "api.WorkletAnimation.animatorName",
        "result": null
      },
      {
        "name": "api.XMLDocument",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.abort",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.DONE",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.getAllResponseHeaders",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.getResponseHeader",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.HEADERS_RECEIVED",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.LOADING",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.onreadystatechange",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.open",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.open",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.OPENED",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.overrideMimeType",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.readyState",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.response",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseText",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseType",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseURL",
        "result": false
      },
      {
        "name": "api.XMLHttpRequest.responseXML",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.send",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.setRequestHeader",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.status",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.statusText",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.timeout",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.UNSENT",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.upload",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.withCredentials",
        "result": true
      },
      {
        "name": "api.XMLHttpRequestEventTarget",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onabort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onload",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onloadend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onloadstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onprogress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.ontimeout",
        "result": null
      },
      {
        "name": "api.XMLHttpRequestUpload",
        "result": true
      },
      {
        "name": "api.XMLSerializer",
        "result": true
      },
      {
        "name": "api.XMLSerializer.serializeToString",
        "result": true
      },
      {
        "name": "api.XR",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.ondevicechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.requestSession",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.supportsSession",
        "result": null
      },
      {
        "name": "api.XRBoundedReferenceSpace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRBoundedReferenceSpace' is undefined",
        "name": "api.XRBoundedReferenceSpace.boundsGeometry",
        "result": null
      },
      {
        "name": "api.XRFrame",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.getPose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.getViewerPose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.session",
        "result": null
      },
      {
        "name": "api.XRInputSource",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.gamepad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.gripSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.handedness",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.targetRayMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.targetRaySpace",
        "result": null
      },
      {
        "name": "api.XRInputSourceArray",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceArray' is undefined",
        "name": "api.XRInputSourceArray.length",
        "result": null
      },
      {
        "name": "api.XRInputSourceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.buttonIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.frame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.inputSource",
        "result": null
      },
      {
        "name": "api.XRInputSourcesChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.added",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.removed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.session",
        "result": null
      },
      {
        "name": "api.XRLayer",
        "result": false
      },
      {
        "name": "api.XRPose",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRPose' is undefined",
        "name": "api.XRPose.emulatedPosition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRPose' is undefined",
        "name": "api.XRPose.transform",
        "result": null
      },
      {
        "name": "api.XRPresentationContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRPresentationContext' is undefined",
        "name": "api.XRPresentationContext.canvas",
        "result": null
      },
      {
        "name": "api.XRRay",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.matrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.origin",
        "result": null
      },
      {
        "name": "api.XRReferenceSpace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpace' is undefined",
        "name": "api.XRReferenceSpace.getOffsetReferenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpace' is undefined",
        "name": "api.XRReferenceSpace.onreset",
        "result": null
      },
      {
        "name": "api.XRReferenceSpaceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpaceEvent' is undefined",
        "name": "api.XRReferenceSpaceEvent.referenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpaceEvent' is undefined",
        "name": "api.XRReferenceSpaceEvent.transform",
        "result": null
      },
      {
        "name": "api.XRRenderState",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.baseLayer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.depthFar",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.depthNear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.inlineVerticalFieldOfView",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.outputContext",
        "result": null
      },
      {
        "name": "api.XRRigidTransform",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.inverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.matrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.orientation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.position",
        "result": null
      },
      {
        "name": "api.XRSession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.cancelAnimationFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.end",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.environmentBlendMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.inputSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onblur",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onfocus",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.oninputsourceschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselectend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselectstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.renderState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.requestAnimationFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.requestReferenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.updateRenderState",
        "result": null
      },
      {
        "name": "api.XRSessionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRSessionEvent' is undefined",
        "name": "api.XRSessionEvent.session",
        "result": null
      },
      {
        "name": "api.XRSpace",
        "result": false
      },
      {
        "name": "api.XRView",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.eye",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.projectionMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.transform",
        "result": null
      },
      {
        "name": "api.XRViewerPose",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRViewerPose' is undefined",
        "name": "api.XRViewerPose.views",
        "result": null
      },
      {
        "name": "api.XRViewport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.y",
        "result": null
      },
      {
        "name": "api.XRWebGLLayer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.antialias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.context",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebufferHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebufferWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.getNativeFramebufferScaleFactor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.getViewport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.ignoreDepthValues",
        "result": null
      },
      {
        "name": "api.console",
        "result": true
      },
      {
        "name": "api.console.assert",
        "result": true
      },
      {
        "name": "api.console.clear",
        "result": true
      },
      {
        "name": "api.console.count",
        "result": true
      },
      {
        "name": "api.console.countReset",
        "result": false
      },
      {
        "name": "api.console.debug",
        "result": true
      },
      {
        "name": "api.console.dir",
        "result": true
      },
      {
        "name": "api.console.dirxml",
        "result": true
      },
      {
        "name": "api.console.error",
        "result": true
      },
      {
        "name": "api.console.group",
        "result": true
      },
      {
        "name": "api.console.groupCollapsed",
        "result": true
      },
      {
        "name": "api.console.groupEnd",
        "result": true
      },
      {
        "name": "api.console.info",
        "result": true
      },
      {
        "name": "api.console.log",
        "result": true
      },
      {
        "name": "api.console.table",
        "result": false
      },
      {
        "name": "api.console.time",
        "result": true
      },
      {
        "name": "api.console.timeEnd",
        "result": true
      },
      {
        "name": "api.console.timeLog",
        "result": false
      },
      {
        "name": "api.console.trace",
        "result": true
      },
      {
        "name": "api.console.warn",
        "result": true
      },
      {
        "name": "api.CSS",
        "result": true
      },
      {
        "name": "api.CSS.animationWorklet",
        "result": false
      },
      {
        "name": "api.CSS.ch",
        "result": false
      },
      {
        "name": "api.CSS.cm",
        "result": false
      },
      {
        "name": "api.CSS.deg",
        "result": false
      },
      {
        "name": "api.CSS.dpcm",
        "result": false
      },
      {
        "name": "api.CSS.dpi",
        "result": false
      },
      {
        "name": "api.CSS.dppx",
        "result": false
      },
      {
        "name": "api.CSS.elementSources",
        "result": false
      },
      {
        "name": "api.CSS.em",
        "result": false
      },
      {
        "name": "api.CSS.escape",
        "result": false
      },
      {
        "name": "api.CSS.ex",
        "result": false
      },
      {
        "name": "api.CSS.fr",
        "result": false
      },
      {
        "name": "api.CSS.grad",
        "result": false
      },
      {
        "name": "api.CSS.Hz",
        "result": false
      },
      {
        "name": "api.CSS.ic",
        "result": false
      },
      {
        "name": "api.CSS.in",
        "result": false
      },
      {
        "name": "api.CSS.kHz",
        "result": false
      },
      {
        "name": "api.CSS.layoutWorklet",
        "result": false
      },
      {
        "name": "api.CSS.lh",
        "result": false
      },
      {
        "name": "api.CSS.mm",
        "result": false
      },
      {
        "name": "api.CSS.ms",
        "result": false
      },
      {
        "name": "api.CSS.number",
        "result": false
      },
      {
        "name": "api.CSS.paintWorklet",
        "result": false
      },
      {
        "name": "api.CSS.parseCommaValueList",
        "result": false
      },
      {
        "name": "api.CSS.parseDeclaration",
        "result": false
      },
      {
        "name": "api.CSS.parseDeclarationList",
        "result": false
      },
      {
        "name": "api.CSS.parseRule",
        "result": false
      },
      {
        "name": "api.CSS.parseRuleList",
        "result": false
      },
      {
        "name": "api.CSS.parseStylesheet",
        "result": false
      },
      {
        "name": "api.CSS.parseValue",
        "result": false
      },
      {
        "name": "api.CSS.parseValueList",
        "result": false
      },
      {
        "name": "api.CSS.pc",
        "result": false
      },
      {
        "name": "api.CSS.percent",
        "result": false
      },
      {
        "name": "api.CSS.pt",
        "result": false
      },
      {
        "name": "api.CSS.px",
        "result": false
      },
      {
        "name": "api.CSS.Q",
        "result": false
      },
      {
        "name": "api.CSS.rad",
        "result": false
      },
      {
        "name": "api.CSS.registerProperty",
        "result": false
      },
      {
        "name": "api.CSS.rem",
        "result": false
      },
      {
        "name": "api.CSS.rlh",
        "result": false
      },
      {
        "name": "api.CSS.s",
        "result": false
      },
      {
        "name": "api.CSS.supports",
        "result": true
      },
      {
        "name": "api.CSS.supports",
        "result": true
      },
      {
        "name": "api.CSS.turn",
        "result": false
      },
      {
        "name": "api.CSS.vb",
        "result": false
      },
      {
        "name": "api.CSS.vh",
        "result": false
      },
      {
        "name": "api.CSS.vi",
        "result": false
      },
      {
        "name": "api.CSS.vmax",
        "result": false
      },
      {
        "name": "api.CSS.vmin",
        "result": false
      },
      {
        "name": "api.CSS.vw",
        "result": false
      },
      {
        "name": "api.WebAssembly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.compile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.compileStreaming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiateStreaming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.validate",
        "result": null
      }
    ],
    "http://mdn-bcd-collector.appspot.com/css/properties/dot-supports.html": [
      {
        "name": "css.properties.-khtml-box-align",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-khtml-line-break",
        "result": false
      },
      {
        "name": "css.properties.-khtml-opacity",
        "result": false
      },
      {
        "name": "css.properties.-khtml-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-khtml-user-select",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-moz-all",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-moz-appearance",
        "result": false
      },
      {
        "name": "css.properties.-moz-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-moz-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-moz-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-moz-backface-visibility",
        "result": false
      },
      {
        "name": "css.properties.-moz-background",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-moz-binding",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-moz-border",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-moz-clear",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-count",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-span",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-contain",
        "result": false
      },
      {
        "name": "css.properties.-moz-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-moz-continue",
        "result": false
      },
      {
        "name": "css.properties.-moz-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-moz-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-moz-corners",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-cursor",
        "result": false
      },
      {
        "name": "css.properties.-moz-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-moz-cx",
        "result": false
      },
      {
        "name": "css.properties.-moz-cy",
        "result": false
      },
      {
        "name": "css.properties.-moz-d",
        "result": false
      },
      {
        "name": "css.properties.-moz-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-display",
        "result": false
      },
      {
        "name": "css.properties.-moz-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-moz-elevation",
        "result": false
      },
      {
        "name": "css.properties.-moz-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-filter",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-basis",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-grow",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-shrink",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-float",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-moz-flow-from",
        "result": false
      },
      {
        "name": "css.properties.-moz-flow-into",
        "result": false
      },
      {
        "name": "css.properties.-moz-font",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-family",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-feature-settings",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-moz-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-moz-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphens",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-region",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-isolation",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-moz-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-moz-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-moz-object-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-moz-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-order",
        "result": false
      },
      {
        "name": "css.properties.-moz-orient",
        "result": false
      },
      {
        "name": "css.properties.-moz-orphans",
        "result": false
      },
      {
        "name": "css.properties.-moz-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-page",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-perspective",
        "result": false
      },
      {
        "name": "css.properties.-moz-perspective-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-pitch",
        "result": false
      },
      {
        "name": "css.properties.-moz-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-play-during",
        "result": false
      },
      {
        "name": "css.properties.-moz-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-moz-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-quotes",
        "result": false
      },
      {
        "name": "css.properties.-moz-r",
        "result": false
      },
      {
        "name": "css.properties.-moz-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-moz-resize",
        "result": false
      },
      {
        "name": "css.properties.-moz-richness",
        "result": false
      },
      {
        "name": "css.properties.-moz-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-rotate",
        "result": false
      },
      {
        "name": "css.properties.-moz-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-rx",
        "result": false
      },
      {
        "name": "css.properties.-moz-ry",
        "result": false
      },
      {
        "name": "css.properties.-moz-scale",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-moz-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-moz-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-moz-stress",
        "result": false
      },
      {
        "name": "css.properties.-moz-string-set",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-justify",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-touch-action",
        "result": false
      },
      {
        "name": "css.properties.-moz-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-moz-translate",
        "result": false
      },
      {
        "name": "css.properties.-moz-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-input",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-select",
        "result": false
      },
      {
        "name": "css.properties.-moz-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-moz-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-visibility",
        "result": false
      },
      {
        "name": "css.properties.-moz-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-moz-volume",
        "result": false
      },
      {
        "name": "css.properties.-moz-white-space",
        "result": false
      },
      {
        "name": "css.properties.-moz-widows",
        "result": false
      },
      {
        "name": "css.properties.-moz-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-will-change",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-through",
        "result": false
      },
      {
        "name": "css.properties.-moz-writing-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-z-index",
        "result": false
      },
      {
        "name": "css.properties.-moz-zoom",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-ms-all",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-ms-appearance",
        "result": false
      },
      {
        "name": "css.properties.-ms-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-ms-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-ms-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-ms-backface-visibility",
        "result": false
      },
      {
        "name": "css.properties.-ms-background",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-ms-binding",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-ms-border",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-ms-clear",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-count",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-span",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-contain",
        "result": false
      },
      {
        "name": "css.properties.-ms-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-ms-continue",
        "result": false
      },
      {
        "name": "css.properties.-ms-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-ms-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-ms-corners",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-cursor",
        "result": false
      },
      {
        "name": "css.properties.-ms-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-ms-cx",
        "result": false
      },
      {
        "name": "css.properties.-ms-cy",
        "result": false
      },
      {
        "name": "css.properties.-ms-d",
        "result": false
      },
      {
        "name": "css.properties.-ms-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-display",
        "result": false
      },
      {
        "name": "css.properties.-ms-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-ms-elevation",
        "result": false
      },
      {
        "name": "css.properties.-ms-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-filter",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-basis",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-flow",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-grow",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-shrink",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-float",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-ms-flow-from",
        "result": true
      },
      {
        "name": "css.properties.-ms-flow-into",
        "result": true
      },
      {
        "name": "css.properties.-ms-font",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-family",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-feature-settings",
        "result": true
      },
      {
        "name": "css.properties.-ms-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-ms-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-column",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-columns",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-row",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-rows",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-ms-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-ms-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-chars",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-lines",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-zone",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphens",
        "result": true
      },
      {
        "name": "css.properties.-ms-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-ms-image-region",
        "result": false
      },
      {
        "name": "css.properties.-ms-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-isolation",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-ms-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-break",
        "result": true
      },
      {
        "name": "css.properties.-ms-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-ms-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-ms-object-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-ms-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-order",
        "result": false
      },
      {
        "name": "css.properties.-ms-orient",
        "result": false
      },
      {
        "name": "css.properties.-ms-orphans",
        "result": false
      },
      {
        "name": "css.properties.-ms-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-page",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-perspective",
        "result": false
      },
      {
        "name": "css.properties.-ms-perspective-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-pitch",
        "result": false
      },
      {
        "name": "css.properties.-ms-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-play-during",
        "result": false
      },
      {
        "name": "css.properties.-ms-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-ms-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-quotes",
        "result": false
      },
      {
        "name": "css.properties.-ms-r",
        "result": false
      },
      {
        "name": "css.properties.-ms-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-ms-resize",
        "result": false
      },
      {
        "name": "css.properties.-ms-richness",
        "result": false
      },
      {
        "name": "css.properties.-ms-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-rotate",
        "result": false
      },
      {
        "name": "css.properties.-ms-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-rx",
        "result": false
      },
      {
        "name": "css.properties.-ms-ry",
        "result": false
      },
      {
        "name": "css.properties.-ms-scale",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-points-x",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-points-y",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-type",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-ms-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-ms-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-ms-stress",
        "result": false
      },
      {
        "name": "css.properties.-ms-string-set",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-combine-horizontal",
        "result": true
      },
      {
        "name": "css.properties.-ms-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-justify",
        "result": true
      },
      {
        "name": "css.properties.-ms-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-size-adjust",
        "result": true
      },
      {
        "name": "css.properties.-ms-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-touch-action",
        "result": true
      },
      {
        "name": "css.properties.-ms-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-ms-translate",
        "result": false
      },
      {
        "name": "css.properties.-ms-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-input",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-select",
        "result": true
      },
      {
        "name": "css.properties.-ms-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-ms-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-visibility",
        "result": false
      },
      {
        "name": "css.properties.-ms-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-ms-volume",
        "result": false
      },
      {
        "name": "css.properties.-ms-white-space",
        "result": false
      },
      {
        "name": "css.properties.-ms-widows",
        "result": false
      },
      {
        "name": "css.properties.-ms-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-will-change",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-flow",
        "result": true
      },
      {
        "name": "css.properties.-ms-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-through",
        "result": true
      },
      {
        "name": "css.properties.-ms-writing-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-z-index",
        "result": false
      },
      {
        "name": "css.properties.-ms-zoom",
        "result": false
      },
      {
        "name": "css.properties.-o-animation",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-o-background-size",
        "result": false
      },
      {
        "name": "css.properties.-o-border-image",
        "result": false
      },
      {
        "name": "css.properties.-o-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-o-object-position",
        "result": false
      },
      {
        "name": "css.properties.-o-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-o-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-o-transform",
        "result": false
      },
      {
        "name": "css.properties.-o-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-o-transition",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-webkit-align-content",
        "result": true
      },
      {
        "name": "css.properties.-webkit-align-items",
        "result": true
      },
      {
        "name": "css.properties.-webkit-align-self",
        "result": true
      },
      {
        "name": "css.properties.-webkit-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-all",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation-delay",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-duration",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-fill-mode",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-iteration-count",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-name",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-play-state",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation-timing-function",
        "result": true
      },
      {
        "name": "css.properties.-webkit-appearance",
        "result": true
      },
      {
        "name": "css.properties.-webkit-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-webkit-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-webkit-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-backface-visibility",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-clip",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-size",
        "result": true
      },
      {
        "name": "css.properties.-webkit-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-webkit-binding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-left-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-bottom-right-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-left-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-top-right-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-align",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-flex",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-ordinal-group",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-orient",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-pack",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-sizing",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clear",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-column-count",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-webkit-column-gap",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-color",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-style",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-width",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-span",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-width",
        "result": true
      },
      {
        "name": "css.properties.-webkit-columns",
        "result": true
      },
      {
        "name": "css.properties.-webkit-contain",
        "result": false
      },
      {
        "name": "css.properties.-webkit-content",
        "result": false
      },
      {
        "name": "css.properties.-webkit-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-webkit-continue",
        "result": false
      },
      {
        "name": "css.properties.-webkit-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-webkit-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-webkit-corners",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cursor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cx",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cy",
        "result": false
      },
      {
        "name": "css.properties.-webkit-d",
        "result": false
      },
      {
        "name": "css.properties.-webkit-direction",
        "result": false
      },
      {
        "name": "css.properties.-webkit-display",
        "result": false
      },
      {
        "name": "css.properties.-webkit-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-elevation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-filter",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-basis",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-flow",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-grow",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flex-shrink",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-wrap",
        "result": true
      },
      {
        "name": "css.properties.-webkit-float",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flow-from",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flow-into",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-family",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-feature-settings",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-webkit-gap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphens",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-region",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-isolation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-justify-content",
        "result": true
      },
      {
        "name": "css.properties.-webkit-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-webkit-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-webkit-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-webkit-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-object-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-order",
        "result": true
      },
      {
        "name": "css.properties.-webkit-orient",
        "result": false
      },
      {
        "name": "css.properties.-webkit-orphans",
        "result": false
      },
      {
        "name": "css.properties.-webkit-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-perspective",
        "result": true
      },
      {
        "name": "css.properties.-webkit-perspective-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-pitch",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-content",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-items",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-self",
        "result": false
      },
      {
        "name": "css.properties.-webkit-play-during",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-webkit-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-quotes",
        "result": false
      },
      {
        "name": "css.properties.-webkit-r",
        "result": false
      },
      {
        "name": "css.properties.-webkit-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-resize",
        "result": false
      },
      {
        "name": "css.properties.-webkit-richness",
        "result": false
      },
      {
        "name": "css.properties.-webkit-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-rotate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-rx",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ry",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scale",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-webkit-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stress",
        "result": false
      },
      {
        "name": "css.properties.-webkit-string-set",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-fill-color",
        "result": true
      },
      {
        "name": "css.properties.-webkit-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-justify",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-size-adjust",
        "result": true
      },
      {
        "name": "css.properties.-webkit-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-touch-action",
        "result": false
      },
      {
        "name": "css.properties.-webkit-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-webkit-transform",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-webkit-transform-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transform-style",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-delay",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-duration",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-property",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-timing-function",
        "result": true
      },
      {
        "name": "css.properties.-webkit-translate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-input",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-modify",
        "result": true
      },
      {
        "name": "css.properties.-webkit-user-select",
        "result": true
      },
      {
        "name": "css.properties.-webkit-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-webkit-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-visibility",
        "result": false
      },
      {
        "name": "css.properties.-webkit-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-webkit-volume",
        "result": false
      },
      {
        "name": "css.properties.-webkit-white-space",
        "result": false
      },
      {
        "name": "css.properties.-webkit-widows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-will-change",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-through",
        "result": false
      },
      {
        "name": "css.properties.-webkit-writing-mode",
        "result": true
      },
      {
        "name": "css.properties.-webkit-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-z-index",
        "result": false
      },
      {
        "name": "css.properties.-webkit-zoom",
        "result": false
      },
      {
        "name": "css.properties.-webkitmask-size",
        "result": false
      },
      {
        "name": "css.properties.align-content",
        "result": true
      },
      {
        "name": "css.properties.align-items",
        "result": true
      },
      {
        "name": "css.properties.align-self",
        "result": true
      },
      {
        "name": "css.properties.alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.all",
        "result": false
      },
      {
        "name": "css.properties.animation",
        "result": true
      },
      {
        "name": "css.properties.animation-composition",
        "result": false
      },
      {
        "name": "css.properties.animation-delay",
        "result": true
      },
      {
        "name": "css.properties.animation-direction",
        "result": true
      },
      {
        "name": "css.properties.animation-duration",
        "result": true
      },
      {
        "name": "css.properties.animation-fill-mode",
        "result": true
      },
      {
        "name": "css.properties.animation-iteration-count",
        "result": true
      },
      {
        "name": "css.properties.animation-name",
        "result": true
      },
      {
        "name": "css.properties.animation-play-state",
        "result": true
      },
      {
        "name": "css.properties.animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.animation-timing-function",
        "result": true
      },
      {
        "name": "css.properties.appearance",
        "result": false
      },
      {
        "name": "css.properties.aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.azimuth",
        "result": false
      },
      {
        "name": "css.properties.backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.backface-visibility",
        "result": true
      },
      {
        "name": "css.properties.background",
        "result": true
      },
      {
        "name": "css.properties.background-attachment",
        "result": true
      },
      {
        "name": "css.properties.background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.background-clip",
        "result": true
      },
      {
        "name": "css.properties.background-color",
        "result": true
      },
      {
        "name": "css.properties.background-image",
        "result": true
      },
      {
        "name": "css.properties.background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.background-origin",
        "result": true
      },
      {
        "name": "css.properties.background-position",
        "result": true
      },
      {
        "name": "css.properties.background-position-block",
        "result": false
      },
      {
        "name": "css.properties.background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.background-position-x",
        "result": true
      },
      {
        "name": "css.properties.background-position-y",
        "result": true
      },
      {
        "name": "css.properties.background-repeat",
        "result": true
      },
      {
        "name": "css.properties.background-size",
        "result": true
      },
      {
        "name": "css.properties.baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.binding",
        "result": false
      },
      {
        "name": "css.properties.block-size",
        "result": false
      },
      {
        "name": "css.properties.block-step",
        "result": false
      },
      {
        "name": "css.properties.block-step-align",
        "result": false
      },
      {
        "name": "css.properties.block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.block-step-round",
        "result": false
      },
      {
        "name": "css.properties.block-step-size",
        "result": false
      },
      {
        "name": "css.properties.bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.border",
        "result": true
      },
      {
        "name": "css.properties.border-before",
        "result": false
      },
      {
        "name": "css.properties.border-block",
        "result": false
      },
      {
        "name": "css.properties.border-block-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-end",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-block-start",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.border-block-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-width",
        "result": false
      },
      {
        "name": "css.properties.border-bottom",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-color",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.border-bottom-left-radius",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-right-radius",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-style",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-width",
        "result": true
      },
      {
        "name": "css.properties.border-boundary",
        "result": false
      },
      {
        "name": "css.properties.border-clip",
        "result": false
      },
      {
        "name": "css.properties.border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.border-collapse",
        "result": true
      },
      {
        "name": "css.properties.border-color",
        "result": true
      },
      {
        "name": "css.properties.border-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.border-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-image",
        "result": true
      },
      {
        "name": "css.properties.border-image-outset",
        "result": true
      },
      {
        "name": "css.properties.border-image-repeat",
        "result": true
      },
      {
        "name": "css.properties.border-image-slice",
        "result": true
      },
      {
        "name": "css.properties.border-image-source",
        "result": true
      },
      {
        "name": "css.properties.border-image-width",
        "result": true
      },
      {
        "name": "css.properties.border-inline",
        "result": false
      },
      {
        "name": "css.properties.border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.border-left",
        "result": true
      },
      {
        "name": "css.properties.border-left-color",
        "result": true
      },
      {
        "name": "css.properties.border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.border-left-style",
        "result": true
      },
      {
        "name": "css.properties.border-left-width",
        "result": true
      },
      {
        "name": "css.properties.border-limit",
        "result": false
      },
      {
        "name": "css.properties.border-radius",
        "result": true
      },
      {
        "name": "css.properties.border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.border-right",
        "result": true
      },
      {
        "name": "css.properties.border-right-color",
        "result": true
      },
      {
        "name": "css.properties.border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.border-right-style",
        "result": true
      },
      {
        "name": "css.properties.border-right-width",
        "result": true
      },
      {
        "name": "css.properties.border-spacing",
        "result": true
      },
      {
        "name": "css.properties.border-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.border-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-style",
        "result": true
      },
      {
        "name": "css.properties.border-top",
        "result": true
      },
      {
        "name": "css.properties.border-top-color",
        "result": true
      },
      {
        "name": "css.properties.border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.border-top-left-radius",
        "result": true
      },
      {
        "name": "css.properties.border-top-right-radius",
        "result": true
      },
      {
        "name": "css.properties.border-top-style",
        "result": true
      },
      {
        "name": "css.properties.border-top-width",
        "result": true
      },
      {
        "name": "css.properties.border-width",
        "result": true
      },
      {
        "name": "css.properties.bottom",
        "result": true
      },
      {
        "name": "css.properties.box-align",
        "result": false
      },
      {
        "name": "css.properties.box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.box-direction",
        "result": false
      },
      {
        "name": "css.properties.box-flex",
        "result": false
      },
      {
        "name": "css.properties.box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.box-lines",
        "result": false
      },
      {
        "name": "css.properties.box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.box-orient",
        "result": false
      },
      {
        "name": "css.properties.box-pack",
        "result": false
      },
      {
        "name": "css.properties.box-reflect",
        "result": false
      },
      {
        "name": "css.properties.box-shadow",
        "result": true
      },
      {
        "name": "css.properties.box-sizing",
        "result": true
      },
      {
        "name": "css.properties.box-snap",
        "result": false
      },
      {
        "name": "css.properties.break-after",
        "result": true
      },
      {
        "name": "css.properties.break-before",
        "result": true
      },
      {
        "name": "css.properties.break-inside",
        "result": true
      },
      {
        "name": "css.properties.caption-side",
        "result": true
      },
      {
        "name": "css.properties.caret",
        "result": false
      },
      {
        "name": "css.properties.caret-color",
        "result": false
      },
      {
        "name": "css.properties.caret-shape",
        "result": false
      },
      {
        "name": "css.properties.clear",
        "result": true
      },
      {
        "name": "css.properties.clip",
        "result": true
      },
      {
        "name": "css.properties.clip-path",
        "result": true
      },
      {
        "name": "css.properties.clip-rule",
        "result": true
      },
      {
        "name": "css.properties.color",
        "result": true
      },
      {
        "name": "css.properties.color-adjust",
        "result": false
      },
      {
        "name": "css.properties.color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.color-rendering",
        "result": false
      },
      {
        "name": "css.properties.column-count",
        "result": true
      },
      {
        "name": "css.properties.column-fill",
        "result": true
      },
      {
        "name": "css.properties.column-gap",
        "result": true
      },
      {
        "name": "css.properties.column-rule",
        "result": true
      },
      {
        "name": "css.properties.column-rule-color",
        "result": true
      },
      {
        "name": "css.properties.column-rule-style",
        "result": true
      },
      {
        "name": "css.properties.column-rule-width",
        "result": true
      },
      {
        "name": "css.properties.column-span",
        "result": true
      },
      {
        "name": "css.properties.column-width",
        "result": true
      },
      {
        "name": "css.properties.columns",
        "result": true
      },
      {
        "name": "css.properties.contain",
        "result": false
      },
      {
        "name": "css.properties.content",
        "result": true
      },
      {
        "name": "css.properties.context-properties",
        "result": false
      },
      {
        "name": "css.properties.continue",
        "result": false
      },
      {
        "name": "css.properties.copy-into",
        "result": false
      },
      {
        "name": "css.properties.corner-shape",
        "result": false
      },
      {
        "name": "css.properties.corners",
        "result": false
      },
      {
        "name": "css.properties.counter-increment",
        "result": true
      },
      {
        "name": "css.properties.counter-reset",
        "result": true
      },
      {
        "name": "css.properties.counter-set",
        "result": false
      },
      {
        "name": "css.properties.cue",
        "result": false
      },
      {
        "name": "css.properties.cue-after",
        "result": false
      },
      {
        "name": "css.properties.cue-before",
        "result": false
      },
      {
        "name": "css.properties.cursor",
        "result": true
      },
      {
        "name": "css.properties.custom-property",
        "result": false
      },
      {
        "name": "css.properties.cx",
        "result": false
      },
      {
        "name": "css.properties.cy",
        "result": false
      },
      {
        "name": "css.properties.d",
        "result": false
      },
      {
        "name": "css.properties.direction",
        "result": true
      },
      {
        "name": "css.properties.display",
        "result": true
      },
      {
        "name": "css.properties.dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.elevation",
        "result": false
      },
      {
        "name": "css.properties.empty-cells",
        "result": true
      },
      {
        "name": "css.properties.fill",
        "result": true
      },
      {
        "name": "css.properties.fill-break",
        "result": false
      },
      {
        "name": "css.properties.fill-color",
        "result": false
      },
      {
        "name": "css.properties.fill-image",
        "result": false
      },
      {
        "name": "css.properties.fill-opacity",
        "result": true
      },
      {
        "name": "css.properties.fill-origin",
        "result": false
      },
      {
        "name": "css.properties.fill-position",
        "result": false
      },
      {
        "name": "css.properties.fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.fill-rule",
        "result": true
      },
      {
        "name": "css.properties.fill-size",
        "result": false
      },
      {
        "name": "css.properties.filter",
        "result": true
      },
      {
        "name": "css.properties.flex",
        "result": true
      },
      {
        "name": "css.properties.flex-basis",
        "result": true
      },
      {
        "name": "css.properties.flex-direction",
        "result": true
      },
      {
        "name": "css.properties.flex-flow",
        "result": true
      },
      {
        "name": "css.properties.flex-grow",
        "result": true
      },
      {
        "name": "css.properties.flex-positive",
        "result": false
      },
      {
        "name": "css.properties.flex-shrink",
        "result": true
      },
      {
        "name": "css.properties.flex-wrap",
        "result": true
      },
      {
        "name": "css.properties.float",
        "result": true
      },
      {
        "name": "css.properties.float-defer",
        "result": false
      },
      {
        "name": "css.properties.float-offset",
        "result": false
      },
      {
        "name": "css.properties.float-reference",
        "result": false
      },
      {
        "name": "css.properties.flow-from",
        "result": false
      },
      {
        "name": "css.properties.flow-into",
        "result": false
      },
      {
        "name": "css.properties.font",
        "result": true
      },
      {
        "name": "css.properties.font-family",
        "result": true
      },
      {
        "name": "css.properties.font-feature-settings",
        "result": true
      },
      {
        "name": "css.properties.font-kerning",
        "result": false
      },
      {
        "name": "css.properties.font-language-override",
        "result": false
      },
      {
        "name": "css.properties.font-max-size",
        "result": false
      },
      {
        "name": "css.properties.font-min-size",
        "result": false
      },
      {
        "name": "css.properties.font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.font-palette",
        "result": false
      },
      {
        "name": "css.properties.font-size",
        "result": true
      },
      {
        "name": "css.properties.font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.font-smooth",
        "result": false
      },
      {
        "name": "css.properties.font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.font-stretch",
        "result": true
      },
      {
        "name": "css.properties.font-style",
        "result": true
      },
      {
        "name": "css.properties.font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.font-variant",
        "result": true
      },
      {
        "name": "css.properties.font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.font-weight",
        "result": true
      },
      {
        "name": "css.properties.gap",
        "result": false
      },
      {
        "name": "css.properties.glyph-orientation-vertical",
        "result": true
      },
      {
        "name": "css.properties.grid",
        "result": false
      },
      {
        "name": "css.properties.grid-area",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.grid-column",
        "result": false
      },
      {
        "name": "css.properties.grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.grid-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-row",
        "result": false
      },
      {
        "name": "css.properties.grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.grid-rows",
        "result": false
      },
      {
        "name": "css.properties.grid-template",
        "result": false
      },
      {
        "name": "css.properties.grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.height",
        "result": true
      },
      {
        "name": "css.properties.hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.hyphens",
        "result": false
      },
      {
        "name": "css.properties.image-orientation",
        "result": false
      },
      {
        "name": "css.properties.image-region",
        "result": false
      },
      {
        "name": "css.properties.image-rendering",
        "result": false
      },
      {
        "name": "css.properties.ime-mode",
        "result": true
      },
      {
        "name": "css.properties.initial-letter",
        "result": false
      },
      {
        "name": "css.properties.initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.initial-letters",
        "result": false
      },
      {
        "name": "css.properties.initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.inline-size",
        "result": false
      },
      {
        "name": "css.properties.inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.inset",
        "result": false
      },
      {
        "name": "css.properties.inset-after",
        "result": false
      },
      {
        "name": "css.properties.inset-before",
        "result": false
      },
      {
        "name": "css.properties.inset-block",
        "result": false
      },
      {
        "name": "css.properties.inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.inset-end",
        "result": false
      },
      {
        "name": "css.properties.inset-inline",
        "result": false
      },
      {
        "name": "css.properties.inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.inset-start",
        "result": false
      },
      {
        "name": "css.properties.isolation",
        "result": false
      },
      {
        "name": "css.properties.justify-content",
        "result": true
      },
      {
        "name": "css.properties.justify-items",
        "result": false
      },
      {
        "name": "css.properties.justify-self",
        "result": false
      },
      {
        "name": "css.properties.leading-trim",
        "result": false
      },
      {
        "name": "css.properties.leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.left",
        "result": true
      },
      {
        "name": "css.properties.letter-spacing",
        "result": true
      },
      {
        "name": "css.properties.line-break",
        "result": true
      },
      {
        "name": "css.properties.line-grid",
        "result": false
      },
      {
        "name": "css.properties.line-height",
        "result": true
      },
      {
        "name": "css.properties.line-height-step",
        "result": false
      },
      {
        "name": "css.properties.line-padding",
        "result": false
      },
      {
        "name": "css.properties.line-sizing",
        "result": false
      },
      {
        "name": "css.properties.line-snap",
        "result": false
      },
      {
        "name": "css.properties.list-style",
        "result": true
      },
      {
        "name": "css.properties.list-style-image",
        "result": true
      },
      {
        "name": "css.properties.list-style-position",
        "result": true
      },
      {
        "name": "css.properties.list-style-type",
        "result": true
      },
      {
        "name": "css.properties.margin",
        "result": true
      },
      {
        "name": "css.properties.margin-block",
        "result": false
      },
      {
        "name": "css.properties.margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.margin-bottom",
        "result": true
      },
      {
        "name": "css.properties.margin-end",
        "result": false
      },
      {
        "name": "css.properties.margin-inline",
        "result": false
      },
      {
        "name": "css.properties.margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.margin-left",
        "result": true
      },
      {
        "name": "css.properties.margin-right",
        "result": true
      },
      {
        "name": "css.properties.margin-start",
        "result": false
      },
      {
        "name": "css.properties.margin-top",
        "result": true
      },
      {
        "name": "css.properties.margin-trim",
        "result": false
      },
      {
        "name": "css.properties.marker",
        "result": true
      },
      {
        "name": "css.properties.marker-end",
        "result": true
      },
      {
        "name": "css.properties.marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.marker-mid",
        "result": true
      },
      {
        "name": "css.properties.marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.marker-segment",
        "result": false
      },
      {
        "name": "css.properties.marker-side",
        "result": false
      },
      {
        "name": "css.properties.marker-start",
        "result": true
      },
      {
        "name": "css.properties.mask",
        "result": true
      },
      {
        "name": "css.properties.mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.mask-border",
        "result": false
      },
      {
        "name": "css.properties.mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.mask-clip",
        "result": false
      },
      {
        "name": "css.properties.mask-composite",
        "result": false
      },
      {
        "name": "css.properties.mask-image",
        "result": false
      },
      {
        "name": "css.properties.mask-mode",
        "result": false
      },
      {
        "name": "css.properties.mask-origin",
        "result": false
      },
      {
        "name": "css.properties.mask-position",
        "result": false
      },
      {
        "name": "css.properties.mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.mask-size",
        "result": false
      },
      {
        "name": "css.properties.mask-type",
        "result": false
      },
      {
        "name": "css.properties.max-block-size",
        "result": false
      },
      {
        "name": "css.properties.max-height",
        "result": true
      },
      {
        "name": "css.properties.max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.max-lines",
        "result": false
      },
      {
        "name": "css.properties.max-width",
        "result": true
      },
      {
        "name": "css.properties.min-block-size",
        "result": false
      },
      {
        "name": "css.properties.min-height",
        "result": true
      },
      {
        "name": "css.properties.min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.min-width",
        "result": true
      },
      {
        "name": "css.properties.mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.motion",
        "result": false
      },
      {
        "name": "css.properties.motion-distance",
        "result": false
      },
      {
        "name": "css.properties.motion-path",
        "result": false
      },
      {
        "name": "css.properties.motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.nav-down",
        "result": false
      },
      {
        "name": "css.properties.nav-left",
        "result": false
      },
      {
        "name": "css.properties.nav-right",
        "result": false
      },
      {
        "name": "css.properties.nav-up",
        "result": false
      },
      {
        "name": "css.properties.object-fit",
        "result": false
      },
      {
        "name": "css.properties.object-position",
        "result": false
      },
      {
        "name": "css.properties.offset",
        "result": false
      },
      {
        "name": "css.properties.offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.offset-block",
        "result": false
      },
      {
        "name": "css.properties.offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.offset-distance",
        "result": false
      },
      {
        "name": "css.properties.offset-inline",
        "result": false
      },
      {
        "name": "css.properties.offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.offset-path",
        "result": false
      },
      {
        "name": "css.properties.offset-position",
        "result": false
      },
      {
        "name": "css.properties.offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.opacity",
        "result": true
      },
      {
        "name": "css.properties.order",
        "result": true
      },
      {
        "name": "css.properties.orient",
        "result": false
      },
      {
        "name": "css.properties.orphans",
        "result": true
      },
      {
        "name": "css.properties.osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.outline",
        "result": true
      },
      {
        "name": "css.properties.outline-color",
        "result": true
      },
      {
        "name": "css.properties.outline-offset",
        "result": false
      },
      {
        "name": "css.properties.outline-radius",
        "result": false
      },
      {
        "name": "css.properties.outline-style",
        "result": true
      },
      {
        "name": "css.properties.outline-width",
        "result": true
      },
      {
        "name": "css.properties.overflow",
        "result": true
      },
      {
        "name": "css.properties.overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.overflow-block",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.overflow-x",
        "result": true
      },
      {
        "name": "css.properties.overflow-y",
        "result": true
      },
      {
        "name": "css.properties.overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.padding",
        "result": true
      },
      {
        "name": "css.properties.padding-block",
        "result": false
      },
      {
        "name": "css.properties.padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.padding-bottom",
        "result": true
      },
      {
        "name": "css.properties.padding-end",
        "result": false
      },
      {
        "name": "css.properties.padding-inline",
        "result": false
      },
      {
        "name": "css.properties.padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.padding-left",
        "result": true
      },
      {
        "name": "css.properties.padding-right",
        "result": true
      },
      {
        "name": "css.properties.padding-start",
        "result": false
      },
      {
        "name": "css.properties.padding-top",
        "result": true
      },
      {
        "name": "css.properties.page",
        "result": false
      },
      {
        "name": "css.properties.page-break-after",
        "result": true
      },
      {
        "name": "css.properties.page-break-before",
        "result": true
      },
      {
        "name": "css.properties.page-break-inside",
        "result": true
      },
      {
        "name": "css.properties.paint-order",
        "result": false
      },
      {
        "name": "css.properties.pause",
        "result": false
      },
      {
        "name": "css.properties.pause-after",
        "result": false
      },
      {
        "name": "css.properties.pause-before",
        "result": false
      },
      {
        "name": "css.properties.perspective",
        "result": true
      },
      {
        "name": "css.properties.perspective-origin",
        "result": true
      },
      {
        "name": "css.properties.pitch",
        "result": false
      },
      {
        "name": "css.properties.pitch-range",
        "result": false
      },
      {
        "name": "css.properties.place-content",
        "result": false
      },
      {
        "name": "css.properties.place-items",
        "result": false
      },
      {
        "name": "css.properties.place-self",
        "result": false
      },
      {
        "name": "css.properties.play-during",
        "result": false
      },
      {
        "name": "css.properties.pointer-events",
        "result": true
      },
      {
        "name": "css.properties.position",
        "result": true
      },
      {
        "name": "css.properties.print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.quotes",
        "result": true
      },
      {
        "name": "css.properties.r",
        "result": false
      },
      {
        "name": "css.properties.region-fragment",
        "result": false
      },
      {
        "name": "css.properties.resize",
        "result": false
      },
      {
        "name": "css.properties.richness",
        "result": false
      },
      {
        "name": "css.properties.right",
        "result": true
      },
      {
        "name": "css.properties.rotate",
        "result": false
      },
      {
        "name": "css.properties.row-gap",
        "result": false
      },
      {
        "name": "css.properties.ruby-align",
        "result": true
      },
      {
        "name": "css.properties.ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.ruby-position",
        "result": true
      },
      {
        "name": "css.properties.rx",
        "result": false
      },
      {
        "name": "css.properties.ry",
        "result": false
      },
      {
        "name": "css.properties.scale",
        "result": false
      },
      {
        "name": "css.properties.scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.shape-inside",
        "result": false
      },
      {
        "name": "css.properties.shape-margin",
        "result": false
      },
      {
        "name": "css.properties.shape-outside",
        "result": false
      },
      {
        "name": "css.properties.shape-padding",
        "result": false
      },
      {
        "name": "css.properties.shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.size",
        "result": false
      },
      {
        "name": "css.properties.speak",
        "result": false
      },
      {
        "name": "css.properties.speak-header",
        "result": false
      },
      {
        "name": "css.properties.speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.speech-rate",
        "result": false
      },
      {
        "name": "css.properties.stress",
        "result": false
      },
      {
        "name": "css.properties.string-set",
        "result": false
      },
      {
        "name": "css.properties.stroke",
        "result": true
      },
      {
        "name": "css.properties.stroke-align",
        "result": false
      },
      {
        "name": "css.properties.stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.stroke-break",
        "result": false
      },
      {
        "name": "css.properties.stroke-color",
        "result": false
      },
      {
        "name": "css.properties.stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.stroke-dasharray",
        "result": true
      },
      {
        "name": "css.properties.stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.stroke-dashoffset",
        "result": true
      },
      {
        "name": "css.properties.stroke-image",
        "result": false
      },
      {
        "name": "css.properties.stroke-linecap",
        "result": true
      },
      {
        "name": "css.properties.stroke-linejoin",
        "result": true
      },
      {
        "name": "css.properties.stroke-miterlimit",
        "result": true
      },
      {
        "name": "css.properties.stroke-opacity",
        "result": true
      },
      {
        "name": "css.properties.stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.stroke-position",
        "result": false
      },
      {
        "name": "css.properties.stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.stroke-size",
        "result": false
      },
      {
        "name": "css.properties.stroke-width",
        "result": true
      },
      {
        "name": "css.properties.tab-size",
        "result": false
      },
      {
        "name": "css.properties.table-layout",
        "result": true
      },
      {
        "name": "css.properties.text-align",
        "result": true
      },
      {
        "name": "css.properties.text-align-last",
        "result": true
      },
      {
        "name": "css.properties.text-anchor",
        "result": true
      },
      {
        "name": "css.properties.text-blink",
        "result": false
      },
      {
        "name": "css.properties.text-combine",
        "result": false
      },
      {
        "name": "css.properties.text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.text-decoration",
        "result": true
      },
      {
        "name": "css.properties.text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.text-group-align",
        "result": false
      },
      {
        "name": "css.properties.text-indent",
        "result": true
      },
      {
        "name": "css.properties.text-justify",
        "result": true
      },
      {
        "name": "css.properties.text-orientation",
        "result": false
      },
      {
        "name": "css.properties.text-overflow",
        "result": true
      },
      {
        "name": "css.properties.text-rendering",
        "result": false
      },
      {
        "name": "css.properties.text-shadow",
        "result": true
      },
      {
        "name": "css.properties.text-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.text-spacing",
        "result": false
      },
      {
        "name": "css.properties.text-stroke",
        "result": false
      },
      {
        "name": "css.properties.text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.text-transform",
        "result": true
      },
      {
        "name": "css.properties.text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.text-underline-position",
        "result": true
      },
      {
        "name": "css.properties.text-wrap",
        "result": false
      },
      {
        "name": "css.properties.top",
        "result": true
      },
      {
        "name": "css.properties.touch-action",
        "result": true
      },
      {
        "name": "css.properties.touch-callout",
        "result": false
      },
      {
        "name": "css.properties.transform",
        "result": true
      },
      {
        "name": "css.properties.transform-box",
        "result": false
      },
      {
        "name": "css.properties.transform-origin",
        "result": true
      },
      {
        "name": "css.properties.transform-style",
        "result": true
      },
      {
        "name": "css.properties.transition",
        "result": true
      },
      {
        "name": "css.properties.transition-delay",
        "result": true
      },
      {
        "name": "css.properties.transition-duration",
        "result": true
      },
      {
        "name": "css.properties.transition-property",
        "result": true
      },
      {
        "name": "css.properties.transition-timing-function",
        "result": true
      },
      {
        "name": "css.properties.translate",
        "result": false
      },
      {
        "name": "css.properties.unicode-bidi",
        "result": true
      },
      {
        "name": "css.properties.user-focus",
        "result": false
      },
      {
        "name": "css.properties.user-input",
        "result": false
      },
      {
        "name": "css.properties.user-modify",
        "result": false
      },
      {
        "name": "css.properties.user-select",
        "result": false
      },
      {
        "name": "css.properties.vector-effect",
        "result": false
      },
      {
        "name": "css.properties.vertical-align",
        "result": true
      },
      {
        "name": "css.properties.visibility",
        "result": true
      },
      {
        "name": "css.properties.voice-family",
        "result": false
      },
      {
        "name": "css.properties.volume",
        "result": false
      },
      {
        "name": "css.properties.white-space",
        "result": true
      },
      {
        "name": "css.properties.widows",
        "result": true
      },
      {
        "name": "css.properties.width",
        "result": true
      },
      {
        "name": "css.properties.will-change",
        "result": false
      },
      {
        "name": "css.properties.word-break",
        "result": true
      },
      {
        "name": "css.properties.word-spacing",
        "result": true
      },
      {
        "name": "css.properties.word-wrap",
        "result": true
      },
      {
        "name": "css.properties.wrap-after",
        "result": false
      },
      {
        "name": "css.properties.wrap-before",
        "result": false
      },
      {
        "name": "css.properties.wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.wrap-through",
        "result": false
      },
      {
        "name": "css.properties.writing-mode",
        "result": true
      },
      {
        "name": "css.properties.x",
        "result": false
      },
      {
        "name": "css.properties.y",
        "result": false
      },
      {
        "name": "css.properties.z-index",
        "result": true
      },
      {
        "name": "css.properties.zoom",
        "result": true
      }
    ],
    "http://mdn-bcd-collector.appspot.com/css/properties/in-style.html": [
      {
        "name": "css.properties.-khtml-box-align",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-khtml-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-khtml-line-break",
        "result": false
      },
      {
        "name": "css.properties.-khtml-opacity",
        "result": false
      },
      {
        "name": "css.properties.-khtml-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-khtml-user-select",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-align-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-moz-all",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-moz-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-moz-appearance",
        "result": false
      },
      {
        "name": "css.properties.-moz-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-moz-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-moz-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-moz-backface-visibility",
        "result": false
      },
      {
        "name": "css.properties.-moz-background",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-background-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-moz-binding",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-moz-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-moz-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-moz-border",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-border-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-moz-clear",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-moz-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-count",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-rule-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-span",
        "result": false
      },
      {
        "name": "css.properties.-moz-column-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-contain",
        "result": false
      },
      {
        "name": "css.properties.-moz-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-moz-continue",
        "result": false
      },
      {
        "name": "css.properties.-moz-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-moz-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-moz-corners",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-moz-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-cursor",
        "result": false
      },
      {
        "name": "css.properties.-moz-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-moz-cx",
        "result": false
      },
      {
        "name": "css.properties.-moz-cy",
        "result": false
      },
      {
        "name": "css.properties.-moz-d",
        "result": false
      },
      {
        "name": "css.properties.-moz-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-display",
        "result": false
      },
      {
        "name": "css.properties.-moz-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-moz-elevation",
        "result": false
      },
      {
        "name": "css.properties.-moz-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-moz-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-filter",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-basis",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-direction",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-grow",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-shrink",
        "result": false
      },
      {
        "name": "css.properties.-moz-flex-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-float",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-moz-flow-from",
        "result": false
      },
      {
        "name": "css.properties.-moz-flow-into",
        "result": false
      },
      {
        "name": "css.properties.-moz-font",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-family",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-feature-settings",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-moz-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-moz-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-moz-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-moz-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-moz-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.-moz-hyphens",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-region",
        "result": false
      },
      {
        "name": "css.properties.-moz-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-isolation",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-moz-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-moz-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-moz-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-moz-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-moz-max-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-height",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-min-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-moz-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-moz-object-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-moz-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-moz-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-order",
        "result": false
      },
      {
        "name": "css.properties.-moz-orient",
        "result": false
      },
      {
        "name": "css.properties.-moz-orphans",
        "result": false
      },
      {
        "name": "css.properties.-moz-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-page",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-perspective",
        "result": false
      },
      {
        "name": "css.properties.-moz-perspective-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-pitch",
        "result": false
      },
      {
        "name": "css.properties.-moz-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-content",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-items",
        "result": false
      },
      {
        "name": "css.properties.-moz-place-self",
        "result": false
      },
      {
        "name": "css.properties.-moz-play-during",
        "result": false
      },
      {
        "name": "css.properties.-moz-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-moz-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-quotes",
        "result": false
      },
      {
        "name": "css.properties.-moz-r",
        "result": false
      },
      {
        "name": "css.properties.-moz-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-moz-resize",
        "result": false
      },
      {
        "name": "css.properties.-moz-richness",
        "result": false
      },
      {
        "name": "css.properties.-moz-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-rotate",
        "result": false
      },
      {
        "name": "css.properties.-moz-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-moz-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-rx",
        "result": false
      },
      {
        "name": "css.properties.-moz-ry",
        "result": false
      },
      {
        "name": "css.properties.-moz-scale",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-moz-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-moz-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-moz-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-moz-stress",
        "result": false
      },
      {
        "name": "css.properties.-moz-string-set",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-moz-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-justify",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-moz-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-top",
        "result": false
      },
      {
        "name": "css.properties.-moz-touch-action",
        "result": false
      },
      {
        "name": "css.properties.-moz-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-moz-transform-style",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-moz-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-moz-translate",
        "result": false
      },
      {
        "name": "css.properties.-moz-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-input",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-moz-user-select",
        "result": false
      },
      {
        "name": "css.properties.-moz-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-moz-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-moz-visibility",
        "result": false
      },
      {
        "name": "css.properties.-moz-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-moz-volume",
        "result": false
      },
      {
        "name": "css.properties.-moz-white-space",
        "result": false
      },
      {
        "name": "css.properties.-moz-widows",
        "result": false
      },
      {
        "name": "css.properties.-moz-width",
        "result": false
      },
      {
        "name": "css.properties.-moz-will-change",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-break",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-moz-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-moz-wrap-through",
        "result": false
      },
      {
        "name": "css.properties.-moz-writing-mode",
        "result": false
      },
      {
        "name": "css.properties.-moz-x",
        "result": false
      },
      {
        "name": "css.properties.-moz-y",
        "result": false
      },
      {
        "name": "css.properties.-moz-z-index",
        "result": false
      },
      {
        "name": "css.properties.-moz-zoom",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-align-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-ms-all",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-ms-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-ms-appearance",
        "result": false
      },
      {
        "name": "css.properties.-ms-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-ms-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-ms-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-ms-backface-visibility",
        "result": false
      },
      {
        "name": "css.properties.-ms-background",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-background-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-ms-binding",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-ms-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-ms-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-ms-border",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-left-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-right-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-border-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-flex",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-orient",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-pack",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-ms-clear",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-ms-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-count",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-rule-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-span",
        "result": false
      },
      {
        "name": "css.properties.-ms-column-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-contain",
        "result": false
      },
      {
        "name": "css.properties.-ms-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-ms-continue",
        "result": false
      },
      {
        "name": "css.properties.-ms-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-ms-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-ms-corners",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-ms-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-cursor",
        "result": false
      },
      {
        "name": "css.properties.-ms-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-ms-cx",
        "result": false
      },
      {
        "name": "css.properties.-ms-cy",
        "result": false
      },
      {
        "name": "css.properties.-ms-d",
        "result": false
      },
      {
        "name": "css.properties.-ms-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-display",
        "result": false
      },
      {
        "name": "css.properties.-ms-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-ms-elevation",
        "result": false
      },
      {
        "name": "css.properties.-ms-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-ms-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-filter",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-basis",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-direction",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-flow",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-grow",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-shrink",
        "result": false
      },
      {
        "name": "css.properties.-ms-flex-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-float",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-ms-flow-from",
        "result": true
      },
      {
        "name": "css.properties.-ms-flow-into",
        "result": true
      },
      {
        "name": "css.properties.-ms-font",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-family",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-feature-settings",
        "result": true
      },
      {
        "name": "css.properties.-ms-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-ms-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-ms-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-column",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-columns",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-row",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-rows",
        "result": true
      },
      {
        "name": "css.properties.-ms-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-ms-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-ms-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-ms-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-chars",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-lines",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphenate-limit-zone",
        "result": true
      },
      {
        "name": "css.properties.-ms-hyphens",
        "result": true
      },
      {
        "name": "css.properties.-ms-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-ms-image-region",
        "result": false
      },
      {
        "name": "css.properties.-ms-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-isolation",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-ms-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-ms-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-ms-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-ms-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-ms-max-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-height",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-min-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-ms-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-ms-object-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-ms-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-ms-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-order",
        "result": false
      },
      {
        "name": "css.properties.-ms-orient",
        "result": false
      },
      {
        "name": "css.properties.-ms-orphans",
        "result": false
      },
      {
        "name": "css.properties.-ms-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-page",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-perspective",
        "result": false
      },
      {
        "name": "css.properties.-ms-perspective-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-pitch",
        "result": false
      },
      {
        "name": "css.properties.-ms-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-content",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-items",
        "result": false
      },
      {
        "name": "css.properties.-ms-place-self",
        "result": false
      },
      {
        "name": "css.properties.-ms-play-during",
        "result": false
      },
      {
        "name": "css.properties.-ms-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-ms-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-quotes",
        "result": false
      },
      {
        "name": "css.properties.-ms-r",
        "result": false
      },
      {
        "name": "css.properties.-ms-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-ms-resize",
        "result": false
      },
      {
        "name": "css.properties.-ms-richness",
        "result": false
      },
      {
        "name": "css.properties.-ms-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-rotate",
        "result": false
      },
      {
        "name": "css.properties.-ms-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-ms-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-rx",
        "result": false
      },
      {
        "name": "css.properties.-ms-ry",
        "result": false
      },
      {
        "name": "css.properties.-ms-scale",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-points-x",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-points-y",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-type",
        "result": true
      },
      {
        "name": "css.properties.-ms-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-ms-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-ms-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-ms-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-ms-stress",
        "result": false
      },
      {
        "name": "css.properties.-ms-string-set",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-ms-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-combine-horizontal",
        "result": true
      },
      {
        "name": "css.properties.-ms-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-justify",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-size-adjust",
        "result": true
      },
      {
        "name": "css.properties.-ms-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-ms-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-top",
        "result": false
      },
      {
        "name": "css.properties.-ms-touch-action",
        "result": false
      },
      {
        "name": "css.properties.-ms-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-ms-transform-style",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-ms-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-ms-translate",
        "result": false
      },
      {
        "name": "css.properties.-ms-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-input",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-modify",
        "result": false
      },
      {
        "name": "css.properties.-ms-user-select",
        "result": true
      },
      {
        "name": "css.properties.-ms-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-ms-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-ms-visibility",
        "result": false
      },
      {
        "name": "css.properties.-ms-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-ms-volume",
        "result": false
      },
      {
        "name": "css.properties.-ms-white-space",
        "result": false
      },
      {
        "name": "css.properties.-ms-widows",
        "result": false
      },
      {
        "name": "css.properties.-ms-width",
        "result": false
      },
      {
        "name": "css.properties.-ms-will-change",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-break",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-ms-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-flow",
        "result": true
      },
      {
        "name": "css.properties.-ms-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-ms-wrap-through",
        "result": true
      },
      {
        "name": "css.properties.-ms-writing-mode",
        "result": false
      },
      {
        "name": "css.properties.-ms-x",
        "result": false
      },
      {
        "name": "css.properties.-ms-y",
        "result": false
      },
      {
        "name": "css.properties.-ms-z-index",
        "result": false
      },
      {
        "name": "css.properties.-ms-zoom",
        "result": false
      },
      {
        "name": "css.properties.-o-animation",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-delay",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-direction",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-duration",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-fill-mode",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-iteration-count",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-name",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-play-state",
        "result": false
      },
      {
        "name": "css.properties.-o-animation-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-o-background-size",
        "result": false
      },
      {
        "name": "css.properties.-o-border-image",
        "result": false
      },
      {
        "name": "css.properties.-o-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-o-object-position",
        "result": false
      },
      {
        "name": "css.properties.-o-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-o-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-o-transform",
        "result": false
      },
      {
        "name": "css.properties.-o-transform-origin",
        "result": false
      },
      {
        "name": "css.properties.-o-transition",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-delay",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-duration",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-property",
        "result": false
      },
      {
        "name": "css.properties.-o-transition-timing-function",
        "result": false
      },
      {
        "name": "css.properties.-webkit-align-content",
        "result": true
      },
      {
        "name": "css.properties.-webkit-align-items",
        "result": true
      },
      {
        "name": "css.properties.-webkit-align-self",
        "result": true
      },
      {
        "name": "css.properties.-webkit-alignment-baseline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-all",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-composition",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation-delay",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-duration",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-fill-mode",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-iteration-count",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-name",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-play-state",
        "result": true
      },
      {
        "name": "css.properties.-webkit-animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-animation-timing-function",
        "result": true
      },
      {
        "name": "css.properties.-webkit-appearance",
        "result": true
      },
      {
        "name": "css.properties.-webkit-aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.-webkit-azimuth",
        "result": false
      },
      {
        "name": "css.properties.-webkit-backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-backface-visibility",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-attachment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-clip",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-background-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-position-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-background-size",
        "result": true
      },
      {
        "name": "css.properties.-webkit-baseline-shift",
        "result": false
      },
      {
        "name": "css.properties.-webkit-binding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-round",
        "result": false
      },
      {
        "name": "css.properties.-webkit-block-step-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-block-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-left-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-bottom-right-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-bottom-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-bottom-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-boundary",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-collapse",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-image-outset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-slice",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-source",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-image-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-left-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-limit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-right-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-start-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-left-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-top-right-radius",
        "result": true
      },
      {
        "name": "css.properties.-webkit-border-top-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-top-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-border-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-align",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-flex",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-ordinal-group",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-orient",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-pack",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-reflect",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-shadow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-box-sizing",
        "result": true
      },
      {
        "name": "css.properties.-webkit-box-snap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caption-side",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-caret-shape",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clear",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-clip-rule",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-color-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-column-count",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-fill",
        "result": false
      },
      {
        "name": "css.properties.-webkit-column-gap",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-color",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-style",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-rule-width",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-span",
        "result": true
      },
      {
        "name": "css.properties.-webkit-column-width",
        "result": true
      },
      {
        "name": "css.properties.-webkit-columns",
        "result": true
      },
      {
        "name": "css.properties.-webkit-contain",
        "result": false
      },
      {
        "name": "css.properties.-webkit-content",
        "result": false
      },
      {
        "name": "css.properties.-webkit-context-properties",
        "result": false
      },
      {
        "name": "css.properties.-webkit-continue",
        "result": false
      },
      {
        "name": "css.properties.-webkit-copy-into",
        "result": false
      },
      {
        "name": "css.properties.-webkit-corner-shape",
        "result": false
      },
      {
        "name": "css.properties.-webkit-corners",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-increment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-reset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-counter-set",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cue-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cursor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-custom-property",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cx",
        "result": false
      },
      {
        "name": "css.properties.-webkit-cy",
        "result": false
      },
      {
        "name": "css.properties.-webkit-d",
        "result": false
      },
      {
        "name": "css.properties.-webkit-direction",
        "result": false
      },
      {
        "name": "css.properties.-webkit-display",
        "result": false
      },
      {
        "name": "css.properties.-webkit-dominant-baseline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-elevation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-empty-cells",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-rule",
        "result": false
      },
      {
        "name": "css.properties.-webkit-fill-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-filter",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-basis",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-direction",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-flow",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-grow",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-positive",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flex-shrink",
        "result": true
      },
      {
        "name": "css.properties.-webkit-flex-wrap",
        "result": true
      },
      {
        "name": "css.properties.-webkit-float",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-defer",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-float-reference",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flow-from",
        "result": false
      },
      {
        "name": "css.properties.-webkit-flow-into",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-family",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-feature-settings",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-kerning",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-language-override",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-max-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-min-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-palette",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-smooth",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-stretch",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.-webkit-font-weight",
        "result": false
      },
      {
        "name": "css.properties.-webkit-gap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-glyph-orientation-vertical",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-area",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.-webkit-grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.-webkit-hyphens",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-orientation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-region",
        "result": false
      },
      {
        "name": "css.properties.-webkit-image-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ime-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-inset-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-isolation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-justify-content",
        "result": true
      },
      {
        "name": "css.properties.-webkit-justify-items",
        "result": false
      },
      {
        "name": "css.properties.-webkit-justify-self",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.-webkit-leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.-webkit-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-letter-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-grid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-height-step",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-sizing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-line-snap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-list-style-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-margin-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-mid",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-segment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-side",
        "result": false
      },
      {
        "name": "css.properties.-webkit-marker-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-clip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-composite",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mask-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-lines",
        "result": false
      },
      {
        "name": "css.properties.-webkit-max-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-block-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-height",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-min-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-distance",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-down",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-nav-up",
        "result": false
      },
      {
        "name": "css.properties.-webkit-object-fit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-object-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-distance",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-path",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-order",
        "result": true
      },
      {
        "name": "css.properties.-webkit-orient",
        "result": false
      },
      {
        "name": "css.properties.-webkit-orphans",
        "result": false
      },
      {
        "name": "css.properties.-webkit-osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-radius",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-outline-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overflow-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-page-break-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-paint-order",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pause-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-perspective",
        "result": true
      },
      {
        "name": "css.properties.-webkit-perspective-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-pitch",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pitch-range",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-content",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-items",
        "result": false
      },
      {
        "name": "css.properties.-webkit-place-self",
        "result": false
      },
      {
        "name": "css.properties.-webkit-play-during",
        "result": false
      },
      {
        "name": "css.properties.-webkit-pointer-events",
        "result": false
      },
      {
        "name": "css.properties.-webkit-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-quotes",
        "result": false
      },
      {
        "name": "css.properties.-webkit-r",
        "result": false
      },
      {
        "name": "css.properties.-webkit-region-fragment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-resize",
        "result": false
      },
      {
        "name": "css.properties.-webkit-richness",
        "result": false
      },
      {
        "name": "css.properties.-webkit-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-rotate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-row-gap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ruby-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-rx",
        "result": false
      },
      {
        "name": "css.properties.-webkit-ry",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scale",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-margin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-outside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-padding",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.-webkit-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-header",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-speech-rate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stress",
        "result": false
      },
      {
        "name": "css.properties.-webkit-string-set",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dasharray",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-dashoffset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-image",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-linecap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-linejoin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-miterlimit",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-opacity",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-tab-size",
        "result": false
      },
      {
        "name": "css.properties.-webkit-table-layout",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-align-last",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-anchor",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-blink",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-fill-color",
        "result": true
      },
      {
        "name": "css.properties.-webkit-text-group-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-indent",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-justify",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-orientation",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-overflow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-rendering",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-shadow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-size-adjust",
        "result": true
      },
      {
        "name": "css.properties.-webkit-text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-transform",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-underline-position",
        "result": false
      },
      {
        "name": "css.properties.-webkit-text-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-top",
        "result": false
      },
      {
        "name": "css.properties.-webkit-touch-action",
        "result": false
      },
      {
        "name": "css.properties.-webkit-touch-callout",
        "result": false
      },
      {
        "name": "css.properties.-webkit-transform",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transform-box",
        "result": false
      },
      {
        "name": "css.properties.-webkit-transform-origin",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transform-style",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-delay",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-duration",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-property",
        "result": true
      },
      {
        "name": "css.properties.-webkit-transition-timing-function",
        "result": true
      },
      {
        "name": "css.properties.-webkit-translate",
        "result": false
      },
      {
        "name": "css.properties.-webkit-unicode-bidi",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-focus",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-input",
        "result": false
      },
      {
        "name": "css.properties.-webkit-user-modify",
        "result": true
      },
      {
        "name": "css.properties.-webkit-user-select",
        "result": true
      },
      {
        "name": "css.properties.-webkit-vector-effect",
        "result": false
      },
      {
        "name": "css.properties.-webkit-vertical-align",
        "result": false
      },
      {
        "name": "css.properties.-webkit-visibility",
        "result": false
      },
      {
        "name": "css.properties.-webkit-voice-family",
        "result": false
      },
      {
        "name": "css.properties.-webkit-volume",
        "result": false
      },
      {
        "name": "css.properties.-webkit-white-space",
        "result": false
      },
      {
        "name": "css.properties.-webkit-widows",
        "result": false
      },
      {
        "name": "css.properties.-webkit-width",
        "result": false
      },
      {
        "name": "css.properties.-webkit-will-change",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-break",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-spacing",
        "result": false
      },
      {
        "name": "css.properties.-webkit-word-wrap",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-after",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-before",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.-webkit-wrap-through",
        "result": false
      },
      {
        "name": "css.properties.-webkit-writing-mode",
        "result": true
      },
      {
        "name": "css.properties.-webkit-x",
        "result": false
      },
      {
        "name": "css.properties.-webkit-y",
        "result": false
      },
      {
        "name": "css.properties.-webkit-z-index",
        "result": false
      },
      {
        "name": "css.properties.-webkit-zoom",
        "result": false
      },
      {
        "name": "css.properties.-webkitmask-size",
        "result": false
      },
      {
        "name": "css.properties.align-content",
        "result": true
      },
      {
        "name": "css.properties.align-items",
        "result": true
      },
      {
        "name": "css.properties.align-self",
        "result": true
      },
      {
        "name": "css.properties.alignment-baseline",
        "result": true
      },
      {
        "name": "css.properties.all",
        "result": false
      },
      {
        "name": "css.properties.animation",
        "result": true
      },
      {
        "name": "css.properties.animation-composition",
        "result": false
      },
      {
        "name": "css.properties.animation-delay",
        "result": true
      },
      {
        "name": "css.properties.animation-direction",
        "result": true
      },
      {
        "name": "css.properties.animation-duration",
        "result": true
      },
      {
        "name": "css.properties.animation-fill-mode",
        "result": true
      },
      {
        "name": "css.properties.animation-iteration-count",
        "result": true
      },
      {
        "name": "css.properties.animation-name",
        "result": true
      },
      {
        "name": "css.properties.animation-play-state",
        "result": true
      },
      {
        "name": "css.properties.animation-timeline",
        "result": false
      },
      {
        "name": "css.properties.animation-timing-function",
        "result": true
      },
      {
        "name": "css.properties.appearance",
        "result": false
      },
      {
        "name": "css.properties.aspect-ratio",
        "result": false
      },
      {
        "name": "css.properties.azimuth",
        "result": false
      },
      {
        "name": "css.properties.backdrop-filter",
        "result": false
      },
      {
        "name": "css.properties.backface-visibility",
        "result": true
      },
      {
        "name": "css.properties.background",
        "result": true
      },
      {
        "name": "css.properties.background-attachment",
        "result": true
      },
      {
        "name": "css.properties.background-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.background-clip",
        "result": true
      },
      {
        "name": "css.properties.background-color",
        "result": true
      },
      {
        "name": "css.properties.background-image",
        "result": true
      },
      {
        "name": "css.properties.background-inline-policy",
        "result": false
      },
      {
        "name": "css.properties.background-origin",
        "result": true
      },
      {
        "name": "css.properties.background-position",
        "result": true
      },
      {
        "name": "css.properties.background-position-block",
        "result": false
      },
      {
        "name": "css.properties.background-position-inline",
        "result": false
      },
      {
        "name": "css.properties.background-position-x",
        "result": true
      },
      {
        "name": "css.properties.background-position-y",
        "result": true
      },
      {
        "name": "css.properties.background-repeat",
        "result": true
      },
      {
        "name": "css.properties.background-size",
        "result": true
      },
      {
        "name": "css.properties.baseline-shift",
        "result": true
      },
      {
        "name": "css.properties.binding",
        "result": false
      },
      {
        "name": "css.properties.block-size",
        "result": false
      },
      {
        "name": "css.properties.block-step",
        "result": false
      },
      {
        "name": "css.properties.block-step-align",
        "result": false
      },
      {
        "name": "css.properties.block-step-insert",
        "result": false
      },
      {
        "name": "css.properties.block-step-round",
        "result": false
      },
      {
        "name": "css.properties.block-step-size",
        "result": false
      },
      {
        "name": "css.properties.bookmark-label",
        "result": false
      },
      {
        "name": "css.properties.bookmark-level",
        "result": false
      },
      {
        "name": "css.properties.bookmark-state",
        "result": false
      },
      {
        "name": "css.properties.border",
        "result": true
      },
      {
        "name": "css.properties.border-before",
        "result": false
      },
      {
        "name": "css.properties.border-block",
        "result": false
      },
      {
        "name": "css.properties.border-block-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-end",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-block-start",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-start-width",
        "result": false
      },
      {
        "name": "css.properties.border-block-style",
        "result": false
      },
      {
        "name": "css.properties.border-block-width",
        "result": false
      },
      {
        "name": "css.properties.border-bottom",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-color",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-colors",
        "result": false
      },
      {
        "name": "css.properties.border-bottom-left-radius",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-right-radius",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-style",
        "result": true
      },
      {
        "name": "css.properties.border-bottom-width",
        "result": true
      },
      {
        "name": "css.properties.border-boundary",
        "result": false
      },
      {
        "name": "css.properties.border-clip",
        "result": false
      },
      {
        "name": "css.properties.border-clip-bottom",
        "result": false
      },
      {
        "name": "css.properties.border-clip-left",
        "result": false
      },
      {
        "name": "css.properties.border-clip-right",
        "result": false
      },
      {
        "name": "css.properties.border-clip-top",
        "result": false
      },
      {
        "name": "css.properties.border-collapse",
        "result": true
      },
      {
        "name": "css.properties.border-color",
        "result": true
      },
      {
        "name": "css.properties.border-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-end-end-radius",
        "result": false
      },
      {
        "name": "css.properties.border-end-start-radius",
        "result": false
      },
      {
        "name": "css.properties.border-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-image",
        "result": true
      },
      {
        "name": "css.properties.border-image-outset",
        "result": true
      },
      {
        "name": "css.properties.border-image-repeat",
        "result": true
      },
      {
        "name": "css.properties.border-image-slice",
        "result": true
      },
      {
        "name": "css.properties.border-image-source",
        "result": true
      },
      {
        "name": "css.properties.border-image-width",
        "result": true
      },
      {
        "name": "css.properties.border-inline",
        "result": false
      },
      {
        "name": "css.properties.border-inline-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-end-width",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-start-width",
        "result": false
      },
      {
        "name": "css.properties.border-inline-style",
        "result": false
      },
      {
        "name": "css.properties.border-inline-width",
        "result": false
      },
      {
        "name": "css.properties.border-left",
        "result": true
      },
      {
        "name": "css.properties.border-left-color",
        "result": true
      },
      {
        "name": "css.properties.border-left-colors",
        "result": false
      },
      {
        "name": "css.properties.border-left-style",
        "result": true
      },
      {
        "name": "css.properties.border-left-width",
        "result": true
      },
      {
        "name": "css.properties.border-limit",
        "result": false
      },
      {
        "name": "css.properties.border-radius",
        "result": true
      },
      {
        "name": "css.properties.border-radius-bottomleft",
        "result": false
      },
      {
        "name": "css.properties.border-radius-bottomright",
        "result": false
      },
      {
        "name": "css.properties.border-radius-topleft",
        "result": false
      },
      {
        "name": "css.properties.border-radius-topright",
        "result": false
      },
      {
        "name": "css.properties.border-right",
        "result": true
      },
      {
        "name": "css.properties.border-right-color",
        "result": true
      },
      {
        "name": "css.properties.border-right-colors",
        "result": false
      },
      {
        "name": "css.properties.border-right-style",
        "result": true
      },
      {
        "name": "css.properties.border-right-width",
        "result": true
      },
      {
        "name": "css.properties.border-spacing",
        "result": true
      },
      {
        "name": "css.properties.border-start-color",
        "result": false
      },
      {
        "name": "css.properties.border-start-end-radius",
        "result": false
      },
      {
        "name": "css.properties.border-start-start-radius",
        "result": false
      },
      {
        "name": "css.properties.border-start-style",
        "result": false
      },
      {
        "name": "css.properties.border-style",
        "result": true
      },
      {
        "name": "css.properties.border-top",
        "result": true
      },
      {
        "name": "css.properties.border-top-color",
        "result": true
      },
      {
        "name": "css.properties.border-top-colors",
        "result": false
      },
      {
        "name": "css.properties.border-top-left-radius",
        "result": true
      },
      {
        "name": "css.properties.border-top-right-radius",
        "result": true
      },
      {
        "name": "css.properties.border-top-style",
        "result": true
      },
      {
        "name": "css.properties.border-top-width",
        "result": true
      },
      {
        "name": "css.properties.border-width",
        "result": true
      },
      {
        "name": "css.properties.bottom",
        "result": true
      },
      {
        "name": "css.properties.box-align",
        "result": false
      },
      {
        "name": "css.properties.box-decoration-break",
        "result": false
      },
      {
        "name": "css.properties.box-direction",
        "result": false
      },
      {
        "name": "css.properties.box-flex",
        "result": false
      },
      {
        "name": "css.properties.box-flex-group",
        "result": false
      },
      {
        "name": "css.properties.box-lines",
        "result": false
      },
      {
        "name": "css.properties.box-ordinal-group",
        "result": false
      },
      {
        "name": "css.properties.box-orient",
        "result": false
      },
      {
        "name": "css.properties.box-pack",
        "result": false
      },
      {
        "name": "css.properties.box-reflect",
        "result": false
      },
      {
        "name": "css.properties.box-shadow",
        "result": true
      },
      {
        "name": "css.properties.box-sizing",
        "result": true
      },
      {
        "name": "css.properties.box-snap",
        "result": false
      },
      {
        "name": "css.properties.break-after",
        "result": true
      },
      {
        "name": "css.properties.break-before",
        "result": true
      },
      {
        "name": "css.properties.break-inside",
        "result": true
      },
      {
        "name": "css.properties.caption-side",
        "result": true
      },
      {
        "name": "css.properties.caret",
        "result": false
      },
      {
        "name": "css.properties.caret-color",
        "result": false
      },
      {
        "name": "css.properties.caret-shape",
        "result": false
      },
      {
        "name": "css.properties.clear",
        "result": true
      },
      {
        "name": "css.properties.clip",
        "result": true
      },
      {
        "name": "css.properties.clip-path",
        "result": true
      },
      {
        "name": "css.properties.clip-rule",
        "result": true
      },
      {
        "name": "css.properties.color",
        "result": true
      },
      {
        "name": "css.properties.color-adjust",
        "result": false
      },
      {
        "name": "css.properties.color-interpolation",
        "result": false
      },
      {
        "name": "css.properties.color-rendering",
        "result": false
      },
      {
        "name": "css.properties.column-count",
        "result": true
      },
      {
        "name": "css.properties.column-fill",
        "result": true
      },
      {
        "name": "css.properties.column-gap",
        "result": true
      },
      {
        "name": "css.properties.column-rule",
        "result": true
      },
      {
        "name": "css.properties.column-rule-color",
        "result": true
      },
      {
        "name": "css.properties.column-rule-style",
        "result": true
      },
      {
        "name": "css.properties.column-rule-width",
        "result": true
      },
      {
        "name": "css.properties.column-span",
        "result": true
      },
      {
        "name": "css.properties.column-width",
        "result": true
      },
      {
        "name": "css.properties.columns",
        "result": true
      },
      {
        "name": "css.properties.contain",
        "result": false
      },
      {
        "name": "css.properties.content",
        "result": true
      },
      {
        "name": "css.properties.context-properties",
        "result": false
      },
      {
        "name": "css.properties.continue",
        "result": false
      },
      {
        "name": "css.properties.copy-into",
        "result": false
      },
      {
        "name": "css.properties.corner-shape",
        "result": false
      },
      {
        "name": "css.properties.corners",
        "result": false
      },
      {
        "name": "css.properties.counter-increment",
        "result": true
      },
      {
        "name": "css.properties.counter-reset",
        "result": true
      },
      {
        "name": "css.properties.counter-set",
        "result": false
      },
      {
        "name": "css.properties.cue",
        "result": false
      },
      {
        "name": "css.properties.cue-after",
        "result": false
      },
      {
        "name": "css.properties.cue-before",
        "result": false
      },
      {
        "name": "css.properties.cursor",
        "result": true
      },
      {
        "name": "css.properties.custom-property",
        "result": false
      },
      {
        "name": "css.properties.cx",
        "result": false
      },
      {
        "name": "css.properties.cy",
        "result": false
      },
      {
        "name": "css.properties.d",
        "result": false
      },
      {
        "name": "css.properties.direction",
        "result": true
      },
      {
        "name": "css.properties.display",
        "result": true
      },
      {
        "name": "css.properties.dominant-baseline",
        "result": true
      },
      {
        "name": "css.properties.elevation",
        "result": false
      },
      {
        "name": "css.properties.empty-cells",
        "result": true
      },
      {
        "name": "css.properties.fill",
        "result": true
      },
      {
        "name": "css.properties.fill-break",
        "result": false
      },
      {
        "name": "css.properties.fill-color",
        "result": false
      },
      {
        "name": "css.properties.fill-image",
        "result": false
      },
      {
        "name": "css.properties.fill-opacity",
        "result": true
      },
      {
        "name": "css.properties.fill-origin",
        "result": false
      },
      {
        "name": "css.properties.fill-position",
        "result": false
      },
      {
        "name": "css.properties.fill-repeat",
        "result": false
      },
      {
        "name": "css.properties.fill-rule",
        "result": true
      },
      {
        "name": "css.properties.fill-size",
        "result": false
      },
      {
        "name": "css.properties.filter",
        "result": true
      },
      {
        "name": "css.properties.flex",
        "result": true
      },
      {
        "name": "css.properties.flex-basis",
        "result": true
      },
      {
        "name": "css.properties.flex-direction",
        "result": true
      },
      {
        "name": "css.properties.flex-flow",
        "result": true
      },
      {
        "name": "css.properties.flex-grow",
        "result": true
      },
      {
        "name": "css.properties.flex-positive",
        "result": false
      },
      {
        "name": "css.properties.flex-shrink",
        "result": true
      },
      {
        "name": "css.properties.flex-wrap",
        "result": true
      },
      {
        "name": "css.properties.float",
        "result": true
      },
      {
        "name": "css.properties.float-defer",
        "result": false
      },
      {
        "name": "css.properties.float-offset",
        "result": false
      },
      {
        "name": "css.properties.float-reference",
        "result": false
      },
      {
        "name": "css.properties.flow-from",
        "result": false
      },
      {
        "name": "css.properties.flow-into",
        "result": false
      },
      {
        "name": "css.properties.font",
        "result": true
      },
      {
        "name": "css.properties.font-family",
        "result": true
      },
      {
        "name": "css.properties.font-feature-settings",
        "result": true
      },
      {
        "name": "css.properties.font-kerning",
        "result": false
      },
      {
        "name": "css.properties.font-language-override",
        "result": false
      },
      {
        "name": "css.properties.font-max-size",
        "result": false
      },
      {
        "name": "css.properties.font-min-size",
        "result": false
      },
      {
        "name": "css.properties.font-optical-sizing",
        "result": false
      },
      {
        "name": "css.properties.font-palette",
        "result": false
      },
      {
        "name": "css.properties.font-size",
        "result": true
      },
      {
        "name": "css.properties.font-size-adjust",
        "result": true
      },
      {
        "name": "css.properties.font-smooth",
        "result": false
      },
      {
        "name": "css.properties.font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.font-stretch",
        "result": true
      },
      {
        "name": "css.properties.font-style",
        "result": true
      },
      {
        "name": "css.properties.font-synthesis",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-small-caps",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-style",
        "result": false
      },
      {
        "name": "css.properties.font-synthesis-weight",
        "result": false
      },
      {
        "name": "css.properties.font-variant",
        "result": true
      },
      {
        "name": "css.properties.font-variant-alternates",
        "result": false
      },
      {
        "name": "css.properties.font-variant-caps",
        "result": false
      },
      {
        "name": "css.properties.font-variant-east-asian",
        "result": false
      },
      {
        "name": "css.properties.font-variant-emoji",
        "result": false
      },
      {
        "name": "css.properties.font-variant-ligatures",
        "result": false
      },
      {
        "name": "css.properties.font-variant-numeric",
        "result": false
      },
      {
        "name": "css.properties.font-variant-position",
        "result": false
      },
      {
        "name": "css.properties.font-variation-settings",
        "result": false
      },
      {
        "name": "css.properties.font-weight",
        "result": true
      },
      {
        "name": "css.properties.gap",
        "result": false
      },
      {
        "name": "css.properties.glyph-orientation-vertical",
        "result": true
      },
      {
        "name": "css.properties.grid",
        "result": false
      },
      {
        "name": "css.properties.grid-area",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-flow",
        "result": false
      },
      {
        "name": "css.properties.grid-auto-rows",
        "result": false
      },
      {
        "name": "css.properties.grid-column",
        "result": false
      },
      {
        "name": "css.properties.grid-column-end",
        "result": false
      },
      {
        "name": "css.properties.grid-column-start",
        "result": false
      },
      {
        "name": "css.properties.grid-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-row",
        "result": false
      },
      {
        "name": "css.properties.grid-row-end",
        "result": false
      },
      {
        "name": "css.properties.grid-row-start",
        "result": false
      },
      {
        "name": "css.properties.grid-rows",
        "result": false
      },
      {
        "name": "css.properties.grid-template",
        "result": false
      },
      {
        "name": "css.properties.grid-template-areas",
        "result": false
      },
      {
        "name": "css.properties.grid-template-columns",
        "result": false
      },
      {
        "name": "css.properties.grid-template-rows",
        "result": false
      },
      {
        "name": "css.properties.hanging-punctuation",
        "result": false
      },
      {
        "name": "css.properties.height",
        "result": true
      },
      {
        "name": "css.properties.hyphenate-character",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-chars",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-last",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-lines",
        "result": false
      },
      {
        "name": "css.properties.hyphenate-limit-zone",
        "result": false
      },
      {
        "name": "css.properties.hyphens",
        "result": false
      },
      {
        "name": "css.properties.image-orientation",
        "result": false
      },
      {
        "name": "css.properties.image-region",
        "result": false
      },
      {
        "name": "css.properties.image-rendering",
        "result": false
      },
      {
        "name": "css.properties.ime-mode",
        "result": true
      },
      {
        "name": "css.properties.initial-letter",
        "result": false
      },
      {
        "name": "css.properties.initial-letter-align",
        "result": false
      },
      {
        "name": "css.properties.initial-letters",
        "result": false
      },
      {
        "name": "css.properties.initial-letters-align",
        "result": false
      },
      {
        "name": "css.properties.initial-letters-wrap",
        "result": false
      },
      {
        "name": "css.properties.inline-size",
        "result": false
      },
      {
        "name": "css.properties.inline-sizing",
        "result": false
      },
      {
        "name": "css.properties.inset",
        "result": false
      },
      {
        "name": "css.properties.inset-after",
        "result": false
      },
      {
        "name": "css.properties.inset-before",
        "result": false
      },
      {
        "name": "css.properties.inset-block",
        "result": false
      },
      {
        "name": "css.properties.inset-block-end",
        "result": false
      },
      {
        "name": "css.properties.inset-block-start",
        "result": false
      },
      {
        "name": "css.properties.inset-end",
        "result": false
      },
      {
        "name": "css.properties.inset-inline",
        "result": false
      },
      {
        "name": "css.properties.inset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.inset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.inset-start",
        "result": false
      },
      {
        "name": "css.properties.isolation",
        "result": false
      },
      {
        "name": "css.properties.justify-content",
        "result": true
      },
      {
        "name": "css.properties.justify-items",
        "result": false
      },
      {
        "name": "css.properties.justify-self",
        "result": false
      },
      {
        "name": "css.properties.leading-trim",
        "result": false
      },
      {
        "name": "css.properties.leading-trim-over",
        "result": false
      },
      {
        "name": "css.properties.leading-trim-under",
        "result": false
      },
      {
        "name": "css.properties.left",
        "result": true
      },
      {
        "name": "css.properties.letter-spacing",
        "result": true
      },
      {
        "name": "css.properties.line-break",
        "result": false
      },
      {
        "name": "css.properties.line-grid",
        "result": false
      },
      {
        "name": "css.properties.line-height",
        "result": true
      },
      {
        "name": "css.properties.line-height-step",
        "result": false
      },
      {
        "name": "css.properties.line-padding",
        "result": false
      },
      {
        "name": "css.properties.line-sizing",
        "result": false
      },
      {
        "name": "css.properties.line-snap",
        "result": false
      },
      {
        "name": "css.properties.list-style",
        "result": true
      },
      {
        "name": "css.properties.list-style-image",
        "result": true
      },
      {
        "name": "css.properties.list-style-position",
        "result": true
      },
      {
        "name": "css.properties.list-style-type",
        "result": true
      },
      {
        "name": "css.properties.margin",
        "result": true
      },
      {
        "name": "css.properties.margin-block",
        "result": false
      },
      {
        "name": "css.properties.margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.margin-bottom",
        "result": true
      },
      {
        "name": "css.properties.margin-end",
        "result": false
      },
      {
        "name": "css.properties.margin-inline",
        "result": false
      },
      {
        "name": "css.properties.margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.margin-left",
        "result": true
      },
      {
        "name": "css.properties.margin-right",
        "result": true
      },
      {
        "name": "css.properties.margin-start",
        "result": false
      },
      {
        "name": "css.properties.margin-top",
        "result": true
      },
      {
        "name": "css.properties.margin-trim",
        "result": false
      },
      {
        "name": "css.properties.marker",
        "result": true
      },
      {
        "name": "css.properties.marker-end",
        "result": true
      },
      {
        "name": "css.properties.marker-knockout-left",
        "result": false
      },
      {
        "name": "css.properties.marker-knockout-right",
        "result": false
      },
      {
        "name": "css.properties.marker-mid",
        "result": true
      },
      {
        "name": "css.properties.marker-pattern",
        "result": false
      },
      {
        "name": "css.properties.marker-segment",
        "result": false
      },
      {
        "name": "css.properties.marker-side",
        "result": false
      },
      {
        "name": "css.properties.marker-start",
        "result": true
      },
      {
        "name": "css.properties.mask",
        "result": true
      },
      {
        "name": "css.properties.mask-attachment",
        "result": false
      },
      {
        "name": "css.properties.mask-border",
        "result": false
      },
      {
        "name": "css.properties.mask-border-mode",
        "result": false
      },
      {
        "name": "css.properties.mask-border-outset",
        "result": false
      },
      {
        "name": "css.properties.mask-border-repeat",
        "result": false
      },
      {
        "name": "css.properties.mask-border-slice",
        "result": false
      },
      {
        "name": "css.properties.mask-border-source",
        "result": false
      },
      {
        "name": "css.properties.mask-border-width",
        "result": false
      },
      {
        "name": "css.properties.mask-box-image",
        "result": false
      },
      {
        "name": "css.properties.mask-clip",
        "result": false
      },
      {
        "name": "css.properties.mask-composite",
        "result": false
      },
      {
        "name": "css.properties.mask-image",
        "result": false
      },
      {
        "name": "css.properties.mask-mode",
        "result": false
      },
      {
        "name": "css.properties.mask-origin",
        "result": false
      },
      {
        "name": "css.properties.mask-position",
        "result": false
      },
      {
        "name": "css.properties.mask-position-x",
        "result": false
      },
      {
        "name": "css.properties.mask-position-y",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat-x",
        "result": false
      },
      {
        "name": "css.properties.mask-repeat-y",
        "result": false
      },
      {
        "name": "css.properties.mask-size",
        "result": false
      },
      {
        "name": "css.properties.mask-type",
        "result": false
      },
      {
        "name": "css.properties.max-block-size",
        "result": false
      },
      {
        "name": "css.properties.max-height",
        "result": true
      },
      {
        "name": "css.properties.max-inline-size",
        "result": false
      },
      {
        "name": "css.properties.max-lines",
        "result": false
      },
      {
        "name": "css.properties.max-width",
        "result": true
      },
      {
        "name": "css.properties.min-block-size",
        "result": false
      },
      {
        "name": "css.properties.min-height",
        "result": true
      },
      {
        "name": "css.properties.min-inline-size",
        "result": false
      },
      {
        "name": "css.properties.min-width",
        "result": true
      },
      {
        "name": "css.properties.mix-blend-mode",
        "result": false
      },
      {
        "name": "css.properties.motion",
        "result": false
      },
      {
        "name": "css.properties.motion-distance",
        "result": false
      },
      {
        "name": "css.properties.motion-path",
        "result": false
      },
      {
        "name": "css.properties.motion-rotation",
        "result": false
      },
      {
        "name": "css.properties.nav-down",
        "result": false
      },
      {
        "name": "css.properties.nav-left",
        "result": false
      },
      {
        "name": "css.properties.nav-right",
        "result": false
      },
      {
        "name": "css.properties.nav-up",
        "result": false
      },
      {
        "name": "css.properties.object-fit",
        "result": false
      },
      {
        "name": "css.properties.object-position",
        "result": false
      },
      {
        "name": "css.properties.offset",
        "result": false
      },
      {
        "name": "css.properties.offset-anchor",
        "result": false
      },
      {
        "name": "css.properties.offset-block",
        "result": false
      },
      {
        "name": "css.properties.offset-block-end",
        "result": false
      },
      {
        "name": "css.properties.offset-block-start",
        "result": false
      },
      {
        "name": "css.properties.offset-distance",
        "result": false
      },
      {
        "name": "css.properties.offset-inline",
        "result": false
      },
      {
        "name": "css.properties.offset-inline-end",
        "result": false
      },
      {
        "name": "css.properties.offset-inline-start",
        "result": false
      },
      {
        "name": "css.properties.offset-path",
        "result": false
      },
      {
        "name": "css.properties.offset-position",
        "result": false
      },
      {
        "name": "css.properties.offset-rotate",
        "result": false
      },
      {
        "name": "css.properties.offset-rotation",
        "result": false
      },
      {
        "name": "css.properties.opacity",
        "result": true
      },
      {
        "name": "css.properties.order",
        "result": true
      },
      {
        "name": "css.properties.orient",
        "result": false
      },
      {
        "name": "css.properties.orphans",
        "result": true
      },
      {
        "name": "css.properties.osx-font-smoothing",
        "result": false
      },
      {
        "name": "css.properties.outline",
        "result": true
      },
      {
        "name": "css.properties.outline-color",
        "result": true
      },
      {
        "name": "css.properties.outline-offset",
        "result": false
      },
      {
        "name": "css.properties.outline-radius",
        "result": false
      },
      {
        "name": "css.properties.outline-style",
        "result": true
      },
      {
        "name": "css.properties.outline-width",
        "result": true
      },
      {
        "name": "css.properties.overflow",
        "result": true
      },
      {
        "name": "css.properties.overflow-anchor",
        "result": false
      },
      {
        "name": "css.properties.overflow-block",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box-block",
        "result": false
      },
      {
        "name": "css.properties.overflow-clip-box-inline",
        "result": false
      },
      {
        "name": "css.properties.overflow-inline",
        "result": false
      },
      {
        "name": "css.properties.overflow-scrolling",
        "result": false
      },
      {
        "name": "css.properties.overflow-wrap",
        "result": false
      },
      {
        "name": "css.properties.overflow-x",
        "result": true
      },
      {
        "name": "css.properties.overflow-y",
        "result": true
      },
      {
        "name": "css.properties.overscroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-block",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-inline",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-x",
        "result": false
      },
      {
        "name": "css.properties.overscroll-behavior-y",
        "result": false
      },
      {
        "name": "css.properties.padding",
        "result": true
      },
      {
        "name": "css.properties.padding-block",
        "result": false
      },
      {
        "name": "css.properties.padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.padding-bottom",
        "result": true
      },
      {
        "name": "css.properties.padding-end",
        "result": false
      },
      {
        "name": "css.properties.padding-inline",
        "result": false
      },
      {
        "name": "css.properties.padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.padding-left",
        "result": true
      },
      {
        "name": "css.properties.padding-right",
        "result": true
      },
      {
        "name": "css.properties.padding-start",
        "result": false
      },
      {
        "name": "css.properties.padding-top",
        "result": true
      },
      {
        "name": "css.properties.page",
        "result": false
      },
      {
        "name": "css.properties.page-break-after",
        "result": true
      },
      {
        "name": "css.properties.page-break-before",
        "result": true
      },
      {
        "name": "css.properties.page-break-inside",
        "result": true
      },
      {
        "name": "css.properties.paint-order",
        "result": false
      },
      {
        "name": "css.properties.pause",
        "result": false
      },
      {
        "name": "css.properties.pause-after",
        "result": false
      },
      {
        "name": "css.properties.pause-before",
        "result": false
      },
      {
        "name": "css.properties.perspective",
        "result": true
      },
      {
        "name": "css.properties.perspective-origin",
        "result": true
      },
      {
        "name": "css.properties.pitch",
        "result": false
      },
      {
        "name": "css.properties.pitch-range",
        "result": false
      },
      {
        "name": "css.properties.place-content",
        "result": false
      },
      {
        "name": "css.properties.place-items",
        "result": false
      },
      {
        "name": "css.properties.place-self",
        "result": false
      },
      {
        "name": "css.properties.play-during",
        "result": false
      },
      {
        "name": "css.properties.pointer-events",
        "result": true
      },
      {
        "name": "css.properties.position",
        "result": true
      },
      {
        "name": "css.properties.print-color-adjust",
        "result": false
      },
      {
        "name": "css.properties.quotes",
        "result": true
      },
      {
        "name": "css.properties.r",
        "result": false
      },
      {
        "name": "css.properties.region-fragment",
        "result": false
      },
      {
        "name": "css.properties.resize",
        "result": false
      },
      {
        "name": "css.properties.richness",
        "result": false
      },
      {
        "name": "css.properties.right",
        "result": true
      },
      {
        "name": "css.properties.rotate",
        "result": false
      },
      {
        "name": "css.properties.row-gap",
        "result": false
      },
      {
        "name": "css.properties.ruby-align",
        "result": true
      },
      {
        "name": "css.properties.ruby-merge",
        "result": false
      },
      {
        "name": "css.properties.ruby-position",
        "result": true
      },
      {
        "name": "css.properties.rx",
        "result": false
      },
      {
        "name": "css.properties.ry",
        "result": false
      },
      {
        "name": "css.properties.scale",
        "result": false
      },
      {
        "name": "css.properties.scroll-behavior",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-block-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-bottom",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-inline-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-left",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-right",
        "result": false
      },
      {
        "name": "css.properties.scroll-margin-top",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-block-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-bottom",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline-end",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-inline-start",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-left",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-right",
        "result": false
      },
      {
        "name": "css.properties.scroll-padding-top",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-align",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-coordinate",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-destination",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-points-x",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-points-y",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-stop",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type-x",
        "result": false
      },
      {
        "name": "css.properties.scroll-snap-type-y",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-3dlight-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-arrow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-base-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-darkshadow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-face-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-gutter",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-highlight-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-shadow-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-track-color",
        "result": false
      },
      {
        "name": "css.properties.scrollbar-width",
        "result": false
      },
      {
        "name": "css.properties.shape-image-threshold",
        "result": false
      },
      {
        "name": "css.properties.shape-inside",
        "result": false
      },
      {
        "name": "css.properties.shape-margin",
        "result": false
      },
      {
        "name": "css.properties.shape-outside",
        "result": false
      },
      {
        "name": "css.properties.shape-padding",
        "result": false
      },
      {
        "name": "css.properties.shape-rendering",
        "result": false
      },
      {
        "name": "css.properties.shape-subtract",
        "result": false
      },
      {
        "name": "css.properties.size",
        "result": false
      },
      {
        "name": "css.properties.speak",
        "result": false
      },
      {
        "name": "css.properties.speak-header",
        "result": false
      },
      {
        "name": "css.properties.speak-numeral",
        "result": false
      },
      {
        "name": "css.properties.speak-punctuation",
        "result": false
      },
      {
        "name": "css.properties.speech-rate",
        "result": false
      },
      {
        "name": "css.properties.stress",
        "result": false
      },
      {
        "name": "css.properties.string-set",
        "result": false
      },
      {
        "name": "css.properties.stroke",
        "result": true
      },
      {
        "name": "css.properties.stroke-align",
        "result": false
      },
      {
        "name": "css.properties.stroke-alignment",
        "result": false
      },
      {
        "name": "css.properties.stroke-break",
        "result": false
      },
      {
        "name": "css.properties.stroke-color",
        "result": false
      },
      {
        "name": "css.properties.stroke-dash-corner",
        "result": false
      },
      {
        "name": "css.properties.stroke-dash-justify",
        "result": false
      },
      {
        "name": "css.properties.stroke-dashadjust",
        "result": false
      },
      {
        "name": "css.properties.stroke-dasharray",
        "result": true
      },
      {
        "name": "css.properties.stroke-dashcorner",
        "result": false
      },
      {
        "name": "css.properties.stroke-dashoffset",
        "result": true
      },
      {
        "name": "css.properties.stroke-image",
        "result": false
      },
      {
        "name": "css.properties.stroke-linecap",
        "result": true
      },
      {
        "name": "css.properties.stroke-linejoin",
        "result": true
      },
      {
        "name": "css.properties.stroke-miterlimit",
        "result": true
      },
      {
        "name": "css.properties.stroke-opacity",
        "result": true
      },
      {
        "name": "css.properties.stroke-origin",
        "result": false
      },
      {
        "name": "css.properties.stroke-position",
        "result": false
      },
      {
        "name": "css.properties.stroke-repeat",
        "result": false
      },
      {
        "name": "css.properties.stroke-size",
        "result": false
      },
      {
        "name": "css.properties.stroke-width",
        "result": true
      },
      {
        "name": "css.properties.tab-size",
        "result": false
      },
      {
        "name": "css.properties.table-layout",
        "result": true
      },
      {
        "name": "css.properties.text-align",
        "result": true
      },
      {
        "name": "css.properties.text-align-last",
        "result": true
      },
      {
        "name": "css.properties.text-anchor",
        "result": true
      },
      {
        "name": "css.properties.text-blink",
        "result": false
      },
      {
        "name": "css.properties.text-combine",
        "result": false
      },
      {
        "name": "css.properties.text-combine-horizontal",
        "result": false
      },
      {
        "name": "css.properties.text-combine-upright",
        "result": false
      },
      {
        "name": "css.properties.text-decoration",
        "result": true
      },
      {
        "name": "css.properties.text-decoration-color",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-line",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-skip",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-skip-ink",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-style",
        "result": false
      },
      {
        "name": "css.properties.text-decoration-width",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-color",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-position",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-skip",
        "result": false
      },
      {
        "name": "css.properties.text-emphasis-style",
        "result": false
      },
      {
        "name": "css.properties.text-fill-color",
        "result": false
      },
      {
        "name": "css.properties.text-group-align",
        "result": false
      },
      {
        "name": "css.properties.text-indent",
        "result": true
      },
      {
        "name": "css.properties.text-justify",
        "result": true
      },
      {
        "name": "css.properties.text-orientation",
        "result": false
      },
      {
        "name": "css.properties.text-overflow",
        "result": true
      },
      {
        "name": "css.properties.text-rendering",
        "result": false
      },
      {
        "name": "css.properties.text-shadow",
        "result": true
      },
      {
        "name": "css.properties.text-size-adjust",
        "result": false
      },
      {
        "name": "css.properties.text-space-collapse",
        "result": false
      },
      {
        "name": "css.properties.text-space-trim",
        "result": false
      },
      {
        "name": "css.properties.text-spacing",
        "result": false
      },
      {
        "name": "css.properties.text-stroke",
        "result": false
      },
      {
        "name": "css.properties.text-stroke-color",
        "result": false
      },
      {
        "name": "css.properties.text-stroke-width",
        "result": false
      },
      {
        "name": "css.properties.text-transform",
        "result": true
      },
      {
        "name": "css.properties.text-underline-offset",
        "result": false
      },
      {
        "name": "css.properties.text-underline-position",
        "result": true
      },
      {
        "name": "css.properties.text-wrap",
        "result": false
      },
      {
        "name": "css.properties.top",
        "result": true
      },
      {
        "name": "css.properties.touch-action",
        "result": true
      },
      {
        "name": "css.properties.touch-callout",
        "result": false
      },
      {
        "name": "css.properties.transform",
        "result": true
      },
      {
        "name": "css.properties.transform-box",
        "result": false
      },
      {
        "name": "css.properties.transform-origin",
        "result": true
      },
      {
        "name": "css.properties.transform-style",
        "result": true
      },
      {
        "name": "css.properties.transition",
        "result": true
      },
      {
        "name": "css.properties.transition-delay",
        "result": true
      },
      {
        "name": "css.properties.transition-duration",
        "result": true
      },
      {
        "name": "css.properties.transition-property",
        "result": true
      },
      {
        "name": "css.properties.transition-timing-function",
        "result": true
      },
      {
        "name": "css.properties.translate",
        "result": false
      },
      {
        "name": "css.properties.unicode-bidi",
        "result": true
      },
      {
        "name": "css.properties.user-focus",
        "result": false
      },
      {
        "name": "css.properties.user-input",
        "result": false
      },
      {
        "name": "css.properties.user-modify",
        "result": false
      },
      {
        "name": "css.properties.user-select",
        "result": false
      },
      {
        "name": "css.properties.vector-effect",
        "result": false
      },
      {
        "name": "css.properties.vertical-align",
        "result": true
      },
      {
        "name": "css.properties.visibility",
        "result": true
      },
      {
        "name": "css.properties.voice-family",
        "result": false
      },
      {
        "name": "css.properties.volume",
        "result": false
      },
      {
        "name": "css.properties.white-space",
        "result": true
      },
      {
        "name": "css.properties.widows",
        "result": true
      },
      {
        "name": "css.properties.width",
        "result": true
      },
      {
        "name": "css.properties.will-change",
        "result": false
      },
      {
        "name": "css.properties.word-break",
        "result": true
      },
      {
        "name": "css.properties.word-spacing",
        "result": true
      },
      {
        "name": "css.properties.word-wrap",
        "result": true
      },
      {
        "name": "css.properties.wrap-after",
        "result": false
      },
      {
        "name": "css.properties.wrap-before",
        "result": false
      },
      {
        "name": "css.properties.wrap-flow",
        "result": false
      },
      {
        "name": "css.properties.wrap-inside",
        "result": false
      },
      {
        "name": "css.properties.wrap-through",
        "result": false
      },
      {
        "name": "css.properties.writing-mode",
        "result": true
      },
      {
        "name": "css.properties.x",
        "result": false
      },
      {
        "name": "css.properties.y",
        "result": false
      },
      {
        "name": "css.properties.z-index",
        "result": true
      },
      {
        "name": "css.properties.zoom",
        "result": true
      }
    ],
    "https://mdn-bcd-collector.appspot.com/api/interfaces.html": [
      {
        "name": "api.AbortController",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbortController' is undefined",
        "name": "api.AbortController.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbortController' is undefined",
        "name": "api.AbortController.signal",
        "result": null
      },
      {
        "name": "api.AbortSignal",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbortSignal' is undefined",
        "name": "api.AbortSignal.aborted",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbortSignal' is undefined",
        "name": "api.AbortSignal.onabort",
        "result": null
      },
      {
        "name": "api.AbsoluteOrientationSensor",
        "result": false
      },
      {
        "name": "api.AbstractRange",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.collapsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.endContainer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.endOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.startContainer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AbstractRange' is undefined",
        "name": "api.AbstractRange.startOffset",
        "result": null
      },
      {
        "name": "api.Accelerometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Accelerometer' is undefined",
        "name": "api.Accelerometer.z",
        "result": null
      },
      {
        "name": "api.AmbientLightSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AmbientLightSensor' is undefined",
        "name": "api.AmbientLightSensor.illuminance",
        "result": null
      },
      {
        "name": "api.AnalyserNode",
        "result": true
      },
      {
        "name": "api.AnalyserNode.fftSize",
        "result": true
      },
      {
        "name": "api.AnalyserNode.frequencyBinCount",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getByteFrequencyData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getByteTimeDomainData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getFloatFrequencyData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.getFloatTimeDomainData",
        "result": true
      },
      {
        "name": "api.AnalyserNode.maxDecibels",
        "result": true
      },
      {
        "name": "api.AnalyserNode.minDecibels",
        "result": true
      },
      {
        "name": "api.AnalyserNode.smoothingTimeConstant",
        "result": true
      },
      {
        "name": "api.Animation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.cancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.commitStyles",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.effect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.finish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.finished",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.oncancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.onfinish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.onremove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.pending",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.persist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.play",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.playbackRate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.playState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.replaceState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.reverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.startTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.timeline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Animation' is undefined",
        "name": "api.Animation.updatePlaybackRate",
        "result": null
      },
      {
        "name": "api.AnimationEffect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.getComputedTiming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.getTiming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.localTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationEffect' is undefined",
        "name": "api.AnimationEffect.updateTiming",
        "result": null
      },
      {
        "name": "api.AnimationEvent",
        "result": true
      },
      {
        "name": "api.AnimationEvent.animationName",
        "result": true
      },
      {
        "name": "api.AnimationEvent.elapsedTime",
        "result": true
      },
      {
        "name": "api.AnimationEvent.pseudoElement",
        "result": false
      },
      {
        "name": "api.AnimationPlaybackEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationPlaybackEvent' is undefined",
        "name": "api.AnimationPlaybackEvent.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AnimationPlaybackEvent' is undefined",
        "name": "api.AnimationPlaybackEvent.timelineTime",
        "result": null
      },
      {
        "name": "api.AnimationTimeline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AnimationTimeline' is undefined",
        "name": "api.AnimationTimeline.currentTime",
        "result": null
      },
      {
        "name": "api.ApplicationCache",
        "result": true
      },
      {
        "name": "api.ApplicationCache.abort",
        "result": true
      },
      {
        "name": "api.ApplicationCache.CHECKING",
        "result": true
      },
      {
        "name": "api.ApplicationCache.DOWNLOADING",
        "result": true
      },
      {
        "name": "api.ApplicationCache.IDLE",
        "result": true
      },
      {
        "name": "api.ApplicationCache.OBSOLETE",
        "result": true
      },
      {
        "name": "api.ApplicationCache.oncached",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onchecking",
        "result": true
      },
      {
        "name": "api.ApplicationCache.ondownloading",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onerror",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onnoupdate",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onobsolete",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onprogress",
        "result": true
      },
      {
        "name": "api.ApplicationCache.onupdateready",
        "result": true
      },
      {
        "name": "api.ApplicationCache.status",
        "result": true
      },
      {
        "name": "api.ApplicationCache.swapCache",
        "result": true
      },
      {
        "name": "api.ApplicationCache.UNCACHED",
        "result": true
      },
      {
        "name": "api.ApplicationCache.update",
        "result": true
      },
      {
        "name": "api.ApplicationCache.UPDATEREADY",
        "result": true
      },
      {
        "name": "api.Attr",
        "result": true
      },
      {
        "name": "api.Attr.localName",
        "result": true
      },
      {
        "name": "api.Attr.name",
        "result": true
      },
      {
        "name": "api.Attr.namespaceURI",
        "result": true
      },
      {
        "name": "api.Attr.ownerElement",
        "result": true
      },
      {
        "name": "api.Attr.prefix",
        "result": true
      },
      {
        "name": "api.Attr.specified",
        "result": true
      },
      {
        "name": "api.Attr.value",
        "result": true
      },
      {
        "name": "api.AudioBuffer",
        "result": true
      },
      {
        "name": "api.AudioBuffer.copyFromChannel",
        "result": false
      },
      {
        "name": "api.AudioBuffer.copyToChannel",
        "result": false
      },
      {
        "name": "api.AudioBuffer.duration",
        "result": true
      },
      {
        "name": "api.AudioBuffer.getChannelData",
        "result": true
      },
      {
        "name": "api.AudioBuffer.length",
        "result": true
      },
      {
        "name": "api.AudioBuffer.numberOfChannels",
        "result": true
      },
      {
        "name": "api.AudioBuffer.sampleRate",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.buffer",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.detune",
        "result": false
      },
      {
        "name": "api.AudioBufferSourceNode.loop",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.loopEnd",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.loopStart",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.playbackRate",
        "result": true
      },
      {
        "name": "api.AudioBufferSourceNode.start",
        "result": true
      },
      {
        "name": "api.AudioContext",
        "result": true
      },
      {
        "name": "api.AudioContext.baseLatency",
        "result": false
      },
      {
        "name": "api.AudioContext.close",
        "result": false
      },
      {
        "name": "api.AudioContext.createMediaElementSource",
        "result": true
      },
      {
        "name": "api.AudioContext.createMediaStreamDestination",
        "result": false
      },
      {
        "name": "api.AudioContext.createMediaStreamSource",
        "result": true
      },
      {
        "name": "api.AudioContext.createMediaStreamTrackSource",
        "result": false
      },
      {
        "name": "api.AudioContext.getOutputTimestamp",
        "result": false
      },
      {
        "name": "api.AudioContext.outputLatency",
        "result": false
      },
      {
        "name": "api.AudioContext.resume",
        "result": false
      },
      {
        "name": "api.AudioContext.suspend",
        "result": false
      },
      {
        "name": "api.AudioDestinationNode",
        "result": true
      },
      {
        "name": "api.AudioDestinationNode.maxChannelCount",
        "result": true
      },
      {
        "name": "api.AudioListener",
        "result": true
      },
      {
        "name": "api.AudioListener.forwardX",
        "result": false
      },
      {
        "name": "api.AudioListener.forwardY",
        "result": false
      },
      {
        "name": "api.AudioListener.forwardZ",
        "result": false
      },
      {
        "name": "api.AudioListener.positionX",
        "result": false
      },
      {
        "name": "api.AudioListener.positionY",
        "result": false
      },
      {
        "name": "api.AudioListener.positionZ",
        "result": false
      },
      {
        "name": "api.AudioListener.setOrientation",
        "result": true
      },
      {
        "name": "api.AudioListener.setPosition",
        "result": true
      },
      {
        "name": "api.AudioListener.upX",
        "result": false
      },
      {
        "name": "api.AudioListener.upY",
        "result": false
      },
      {
        "name": "api.AudioListener.upZ",
        "result": false
      },
      {
        "name": "api.AudioNode",
        "result": true
      },
      {
        "name": "api.AudioNode.channelCount",
        "result": true
      },
      {
        "name": "api.AudioNode.channelCountMode",
        "result": true
      },
      {
        "name": "api.AudioNode.channelInterpretation",
        "result": true
      },
      {
        "name": "api.AudioNode.connect",
        "result": true
      },
      {
        "name": "api.AudioNode.connect",
        "result": true
      },
      {
        "name": "api.AudioNode.context",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.disconnect",
        "result": true
      },
      {
        "name": "api.AudioNode.numberOfInputs",
        "result": true
      },
      {
        "name": "api.AudioNode.numberOfOutputs",
        "result": true
      },
      {
        "name": "api.AudioParam",
        "result": true
      },
      {
        "name": "api.AudioParam.automationRate",
        "result": false
      },
      {
        "name": "api.AudioParam.cancelAndHoldAtTime",
        "result": false
      },
      {
        "name": "api.AudioParam.cancelScheduledValues",
        "result": true
      },
      {
        "name": "api.AudioParam.defaultValue",
        "result": true
      },
      {
        "name": "api.AudioParam.exponentialRampToValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.linearRampToValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.maxValue",
        "result": false
      },
      {
        "name": "api.AudioParam.minValue",
        "result": false
      },
      {
        "name": "api.AudioParam.setTargetAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.setValueAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.setValueCurveAtTime",
        "result": true
      },
      {
        "name": "api.AudioParam.value",
        "result": true
      },
      {
        "name": "api.AudioParamMap",
        "result": false
      },
      {
        "name": "api.AudioProcessingEvent",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.inputBuffer",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.outputBuffer",
        "result": true
      },
      {
        "name": "api.AudioProcessingEvent.playbackTime",
        "result": true
      },
      {
        "name": "api.AudioScheduledSourceNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.onended",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioScheduledSourceNode' is undefined",
        "name": "api.AudioScheduledSourceNode.stop",
        "result": null
      },
      {
        "name": "api.AudioTrack",
        "result": true
      },
      {
        "name": "api.AudioTrack.enabled",
        "result": true
      },
      {
        "name": "api.AudioTrack.id",
        "result": true
      },
      {
        "name": "api.AudioTrack.kind",
        "result": true
      },
      {
        "name": "api.AudioTrack.label",
        "result": true
      },
      {
        "name": "api.AudioTrack.language",
        "result": true
      },
      {
        "name": "api.AudioTrack.sourceBuffer",
        "result": true
      },
      {
        "name": "api.AudioTrackList",
        "result": true
      },
      {
        "name": "api.AudioTrackList.getTrackById",
        "result": true
      },
      {
        "name": "api.AudioTrackList.length",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onchange",
        "result": true
      },
      {
        "name": "api.AudioTrackList.onremovetrack",
        "result": true
      },
      {
        "name": "api.AudioWorklet",
        "result": false
      },
      {
        "name": "api.AudioWorkletNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.onprocessorerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.parameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AudioWorkletNode' is undefined",
        "name": "api.AudioWorkletNode.port",
        "result": null
      },
      {
        "name": "api.AuthenticatorAssertionResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.authenticatorData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.signature",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAssertionResponse' is undefined",
        "name": "api.AuthenticatorAssertionResponse.userHandle",
        "result": null
      },
      {
        "name": "api.AuthenticatorAttestationResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAttestationResponse' is undefined",
        "name": "api.AuthenticatorAttestationResponse.attestationObject",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorAttestationResponse' is undefined",
        "name": "api.AuthenticatorAttestationResponse.getTransports",
        "result": null
      },
      {
        "name": "api.AuthenticatorResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'AuthenticatorResponse' is undefined",
        "name": "api.AuthenticatorResponse.clientDataJSON",
        "result": null
      },
      {
        "name": "api.BackgroundFetchManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.fetch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchManager' is undefined",
        "name": "api.BackgroundFetchManager.getIds",
        "result": null
      },
      {
        "name": "api.BackgroundFetchRecord",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRecord' is undefined",
        "name": "api.BackgroundFetchRecord.request",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRecord' is undefined",
        "name": "api.BackgroundFetchRecord.responseReady",
        "result": null
      },
      {
        "name": "api.BackgroundFetchRegistration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.downloaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.downloadTotal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.failureReason",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.matchAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.onprogress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.recordsAvailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.result",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.uploaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BackgroundFetchRegistration' is undefined",
        "name": "api.BackgroundFetchRegistration.uploadTotal",
        "result": null
      },
      {
        "name": "api.BarcodeDetector",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BarcodeDetector' is undefined",
        "name": "api.BarcodeDetector.detect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BarcodeDetector' is undefined",
        "name": "api.BarcodeDetector.getSupportedFormats",
        "result": null
      },
      {
        "name": "api.BarProp",
        "result": true
      },
      {
        "name": "api.BarProp.visible",
        "result": true
      },
      {
        "name": "api.BaseAudioContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.audioWorklet",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createAnalyser",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBiquadFilter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createBufferSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createChannelMerger",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createChannelSplitter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createConstantSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createConvolver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createDelay",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createDynamicsCompressor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createGain",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createIIRFilter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createOscillator",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createPanner",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createPeriodicWave",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createScriptProcessor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createStereoPanner",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.createWaveShaper",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.currentTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.decodeAudioData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.destination",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.listener",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.sampleRate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BaseAudioContext' is undefined",
        "name": "api.BaseAudioContext.state",
        "result": null
      },
      {
        "name": "api.Baseline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Baseline' is undefined",
        "name": "api.Baseline.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Baseline' is undefined",
        "name": "api.Baseline.value",
        "result": null
      },
      {
        "name": "api.BatteryManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.charging",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.chargingTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.dischargingTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.level",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onchargingchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onchargingtimechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.ondischargingtimechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BatteryManager' is undefined",
        "name": "api.BatteryManager.onlevelchange",
        "result": null
      },
      {
        "name": "api.BeforeInstallPromptEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BeforeInstallPromptEvent' is undefined",
        "name": "api.BeforeInstallPromptEvent.prompt",
        "result": null
      },
      {
        "name": "api.BeforeUnloadEvent",
        "result": true
      },
      {
        "name": "api.BeforeUnloadEvent.returnValue",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.detune",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.frequency",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.gain",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.getFrequencyResponse",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.Q",
        "result": true
      },
      {
        "name": "api.BiquadFilterNode.type",
        "result": true
      },
      {
        "name": "api.Blob",
        "result": true
      },
      {
        "name": "api.Blob.arrayBuffer",
        "result": false
      },
      {
        "name": "api.Blob.size",
        "result": true
      },
      {
        "name": "api.Blob.slice",
        "result": true
      },
      {
        "name": "api.Blob.stream",
        "result": false
      },
      {
        "name": "api.Blob.text",
        "result": false
      },
      {
        "name": "api.Blob.type",
        "result": true
      },
      {
        "name": "api.BlobEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BlobEvent' is undefined",
        "name": "api.BlobEvent.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BlobEvent' is undefined",
        "name": "api.BlobEvent.timecode",
        "result": null
      },
      {
        "name": "api.Bluetooth",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.getAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onadvertisementreceived",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onavailabilitychanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.ongattserverdisconnected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.referringDevice",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Bluetooth' is undefined",
        "name": "api.Bluetooth.requestDevice",
        "result": null
      },
      {
        "name": "api.BluetoothAdvertisingEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.appearance",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.manufacturerData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.rssi",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.serviceData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.txPower",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothAdvertisingEvent' is undefined",
        "name": "api.BluetoothAdvertisingEvent.uuids",
        "result": null
      },
      {
        "name": "api.BluetoothCharacteristicProperties",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.authenticatedSignedWrites",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.broadcast",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.indicate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.notify",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.reliableWrite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.writableAuxiliaries",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.write",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothCharacteristicProperties' is undefined",
        "name": "api.BluetoothCharacteristicProperties.writeWithoutResponse",
        "result": null
      },
      {
        "name": "api.BluetoothDevice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.gatt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onadvertisementreceived",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.ongattserverdisconnected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.unwatchAdvertisements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.watchAdvertisements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothDevice' is undefined",
        "name": "api.BluetoothDevice.watchingAdvertisements",
        "result": null
      },
      {
        "name": "api.BluetoothManufacturerDataMap",
        "result": false
      },
      {
        "name": "api.BluetoothPermissionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothPermissionResult' is undefined",
        "name": "api.BluetoothPermissionResult.devices",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTCharacteristic",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.getDescriptor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.getDescriptors",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.properties",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.readValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.service",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.startNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.stopNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.uuid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValueWithoutResponse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTCharacteristic' is undefined",
        "name": "api.BluetoothRemoteGATTCharacteristic.writeValueWithResponse",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTDescriptor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.characteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.readValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.uuid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTDescriptor' is undefined",
        "name": "api.BluetoothRemoteGATTDescriptor.writeValue",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTServer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.connect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.connected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.getPrimaryService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTServer' is undefined",
        "name": "api.BluetoothRemoteGATTServer.getPrimaryServices",
        "result": null
      },
      {
        "name": "api.BluetoothRemoteGATTService",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.device",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getCharacteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getCharacteristics",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getIncludedService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.getIncludedServices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.isPrimary",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.oncharacteristicvaluechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onserviceadded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onservicechanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.onserviceremoved",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothRemoteGATTService' is undefined",
        "name": "api.BluetoothRemoteGATTService.uuid",
        "result": null
      },
      {
        "name": "api.BluetoothServiceDataMap",
        "result": false
      },
      {
        "name": "api.BluetoothUUID",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.canonicalUUID",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getCharacteristic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getDescriptor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BluetoothUUID' is undefined",
        "name": "api.BluetoothUUID.getService",
        "result": null
      },
      {
        "name": "api.BroadcastChannel",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.onmessageerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'BroadcastChannel' is undefined",
        "name": "api.BroadcastChannel.postMessage",
        "result": null
      },
      {
        "name": "api.Cache",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.addAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.matchAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Cache' is undefined",
        "name": "api.Cache.put",
        "result": null
      },
      {
        "name": "api.CacheStorage",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.match",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CacheStorage' is undefined",
        "name": "api.CacheStorage.open",
        "result": null
      },
      {
        "name": "api.CanvasCaptureMediaStreamTrack",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CanvasCaptureMediaStreamTrack' is undefined",
        "name": "api.CanvasCaptureMediaStreamTrack.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CanvasCaptureMediaStreamTrack' is undefined",
        "name": "api.CanvasCaptureMediaStreamTrack.requestFrame",
        "result": null
      },
      {
        "name": "api.CanvasGradient",
        "result": true
      },
      {
        "name": "api.CanvasGradient.addColorStop",
        "result": true
      },
      {
        "name": "api.CanvasPattern",
        "result": true
      },
      {
        "name": "api.CanvasPattern.setTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.arc",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.arcTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.beginPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.bezierCurveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.canvas",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clearRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clip",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.clip",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.closePath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createLinearGradient",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createPattern",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.createRadialGradient",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.direction",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawFocusIfNeeded",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawFocusIfNeeded",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.drawImage",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.ellipse",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.fill",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fill",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillStyle",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.fillText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.filter",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.font",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getContextAttributes",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.getImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getLineDash",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.getTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.globalAlpha",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.globalCompositeOperation",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.imageSmoothingEnabled",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.imageSmoothingQuality",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInPath",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInStroke",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.isPointInStroke",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.lineCap",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineDashOffset",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineJoin",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.lineWidth",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.measureText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.miterLimit",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.moveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.putImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.putImageData",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.quadraticCurveTo",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.rect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.resetTransform",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.restore",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.rotate",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.save",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.scale",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.scrollPathIntoView",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.scrollPathIntoView",
        "result": false
      },
      {
        "name": "api.CanvasRenderingContext2D.setLineDash",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.setTransform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.setTransform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowBlur",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowColor",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowOffsetX",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.shadowOffsetY",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.stroke",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.stroke",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeRect",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeStyle",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.strokeText",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.textAlign",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.textBaseline",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.transform",
        "result": true
      },
      {
        "name": "api.CanvasRenderingContext2D.translate",
        "result": true
      },
      {
        "name": "api.CaretPosition",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.getClientRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.offset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CaretPosition' is undefined",
        "name": "api.CaretPosition.offsetNode",
        "result": null
      },
      {
        "name": "api.CDATASection",
        "result": true
      },
      {
        "name": "api.ChannelMergerNode",
        "result": true
      },
      {
        "name": "api.ChannelSplitterNode",
        "result": true
      },
      {
        "name": "api.CharacterData",
        "result": true
      },
      {
        "name": "api.CharacterData.after",
        "result": false
      },
      {
        "name": "api.CharacterData.appendData",
        "result": true
      },
      {
        "name": "api.CharacterData.before",
        "result": false
      },
      {
        "name": "api.CharacterData.data",
        "result": true
      },
      {
        "name": "api.CharacterData.deleteData",
        "result": true
      },
      {
        "name": "api.CharacterData.insertData",
        "result": true
      },
      {
        "name": "api.CharacterData.length",
        "result": true
      },
      {
        "name": "api.CharacterData.nextElementSibling",
        "result": false
      },
      {
        "name": "api.CharacterData.previousElementSibling",
        "result": false
      },
      {
        "name": "api.CharacterData.remove",
        "result": true
      },
      {
        "name": "api.CharacterData.replaceData",
        "result": true
      },
      {
        "name": "api.CharacterData.replaceWith",
        "result": false
      },
      {
        "name": "api.CharacterData.substringData",
        "result": true
      },
      {
        "name": "api.Clipboard",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.readText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.write",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Clipboard' is undefined",
        "name": "api.Clipboard.writeText",
        "result": null
      },
      {
        "name": "api.ClipboardEvent",
        "result": true
      },
      {
        "name": "api.ClipboardEvent.clipboardData",
        "result": true
      },
      {
        "name": "api.ClipboardItem",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.createDelayed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.delayed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.getType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.lastModified",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.presentationStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ClipboardItem' is undefined",
        "name": "api.ClipboardItem.types",
        "result": null
      },
      {
        "name": "api.CloseEvent",
        "result": true
      },
      {
        "name": "api.CloseEvent.code",
        "result": true
      },
      {
        "name": "api.CloseEvent.reason",
        "result": true
      },
      {
        "name": "api.CloseEvent.wasClean",
        "result": true
      },
      {
        "name": "api.Comment",
        "result": true
      },
      {
        "name": "api.CompositionEvent",
        "result": true
      },
      {
        "name": "api.CompositionEvent.data",
        "result": true
      },
      {
        "name": "api.ConstantSourceNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ConstantSourceNode' is undefined",
        "name": "api.ConstantSourceNode.offset",
        "result": null
      },
      {
        "name": "api.ConvolverNode",
        "result": true
      },
      {
        "name": "api.ConvolverNode.buffer",
        "result": true
      },
      {
        "name": "api.ConvolverNode.normalize",
        "result": true
      },
      {
        "name": "api.CookieChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CookieChangeEvent' is undefined",
        "name": "api.CookieChangeEvent.changed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieChangeEvent' is undefined",
        "name": "api.CookieChangeEvent.deleted",
        "result": null
      },
      {
        "name": "api.CookieStore",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.getChangeSubscriptions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CookieStore' is undefined",
        "name": "api.CookieStore.subscribeToChanges",
        "result": null
      },
      {
        "name": "api.Coordinates",
        "result": true
      },
      {
        "name": "api.Coordinates.accuracy",
        "result": true
      },
      {
        "name": "api.Coordinates.altitude",
        "result": true
      },
      {
        "name": "api.Coordinates.altitudeAccuracy",
        "result": true
      },
      {
        "name": "api.Coordinates.heading",
        "result": true
      },
      {
        "name": "api.Coordinates.latitude",
        "result": true
      },
      {
        "name": "api.Coordinates.longitude",
        "result": true
      },
      {
        "name": "api.Coordinates.speed",
        "result": true
      },
      {
        "name": "api.CrashReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CrashReportBody' is undefined",
        "name": "api.CrashReportBody.reason",
        "result": null
      },
      {
        "name": "api.Credential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Credential' is undefined",
        "name": "api.Credential.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Credential' is undefined",
        "name": "api.Credential.type",
        "result": null
      },
      {
        "name": "api.CredentialsContainer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.create",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.preventSilentAccess",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CredentialsContainer' is undefined",
        "name": "api.CredentialsContainer.store",
        "result": null
      },
      {
        "name": "api.Crypto",
        "result": true
      },
      {
        "name": "api.Crypto.getRandomValues",
        "result": true
      },
      {
        "name": "api.Crypto.subtle",
        "result": true
      },
      {
        "name": "api.CryptoKey",
        "result": true
      },
      {
        "name": "api.CryptoKey.algorithm",
        "result": true
      },
      {
        "name": "api.CryptoKey.extractable",
        "result": true
      },
      {
        "name": "api.CryptoKey.type",
        "result": true
      },
      {
        "name": "api.CryptoKey.usages",
        "result": true
      },
      {
        "name": "api.CSPViolationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.blockedURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.documentURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.effectiveDirective",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.originalPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.sample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.sourceFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSPViolationReportBody' is undefined",
        "name": "api.CSPViolationReportBody.statusCode",
        "result": null
      },
      {
        "name": "api.CSSConditionRule",
        "result": true
      },
      {
        "name": "api.CSSConditionRule.conditionText",
        "result": true
      },
      {
        "name": "api.CSSCounterStyleRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.additiveSymbols",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.fallback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.negative",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.pad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.prefix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.range",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.speakAs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.suffix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.symbols",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSCounterStyleRule' is undefined",
        "name": "api.CSSCounterStyleRule.system",
        "result": null
      },
      {
        "name": "api.CSSFontFaceRule",
        "result": true
      },
      {
        "name": "api.CSSFontFaceRule.style",
        "result": true
      },
      {
        "name": "api.CSSFontFeatureValuesMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesMap' is undefined",
        "name": "api.CSSFontFeatureValuesMap.set",
        "result": null
      },
      {
        "name": "api.CSSFontFeatureValuesRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.annotation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.characterVariant",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.fontFamily",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.ornaments",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.styleset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.stylistic",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontFeatureValuesRule' is undefined",
        "name": "api.CSSFontFeatureValuesRule.swash",
        "result": null
      },
      {
        "name": "api.CSSFontPaletteValuesRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSFontPaletteValuesRule' is undefined",
        "name": "api.CSSFontPaletteValuesRule.basePalette",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSFontPaletteValuesRule' is undefined",
        "name": "api.CSSFontPaletteValuesRule.fontFamily",
        "result": null
      },
      {
        "name": "api.CSSGroupingRule",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.cssRules",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSGroupingRule.insertRule",
        "result": true
      },
      {
        "name": "api.CSSImageValue",
        "result": false
      },
      {
        "name": "api.CSSImportRule",
        "result": true
      },
      {
        "name": "api.CSSImportRule.href",
        "result": true
      },
      {
        "name": "api.CSSImportRule.media",
        "result": true
      },
      {
        "name": "api.CSSImportRule.styleSheet",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule.keyText",
        "result": true
      },
      {
        "name": "api.CSSKeyframeRule.style",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.appendRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.cssRules",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.findRule",
        "result": true
      },
      {
        "name": "api.CSSKeyframesRule.name",
        "result": true
      },
      {
        "name": "api.CSSKeywordValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSKeywordValue' is undefined",
        "name": "api.CSSKeywordValue.value",
        "result": null
      },
      {
        "name": "api.CSSMarginRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMarginRule' is undefined",
        "name": "api.CSSMarginRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMarginRule' is undefined",
        "name": "api.CSSMarginRule.style",
        "result": null
      },
      {
        "name": "api.CSSMathClamp",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSMathClamp' is undefined",
        "name": "api.CSSMathClamp.val",
        "result": null
      },
      {
        "name": "api.CSSMathInvert",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathInvert' is undefined",
        "name": "api.CSSMathInvert.value",
        "result": null
      },
      {
        "name": "api.CSSMathMax",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathMax' is undefined",
        "name": "api.CSSMathMax.values",
        "result": null
      },
      {
        "name": "api.CSSMathMin",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathMin' is undefined",
        "name": "api.CSSMathMin.values",
        "result": null
      },
      {
        "name": "api.CSSMathNegate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathNegate' is undefined",
        "name": "api.CSSMathNegate.value",
        "result": null
      },
      {
        "name": "api.CSSMathProduct",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathProduct' is undefined",
        "name": "api.CSSMathProduct.values",
        "result": null
      },
      {
        "name": "api.CSSMathSum",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathSum' is undefined",
        "name": "api.CSSMathSum.values",
        "result": null
      },
      {
        "name": "api.CSSMathValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMathValue' is undefined",
        "name": "api.CSSMathValue.operator",
        "result": null
      },
      {
        "name": "api.CSSMatrixComponent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSMatrixComponent' is undefined",
        "name": "api.CSSMatrixComponent.matrix",
        "result": null
      },
      {
        "name": "api.CSSMediaRule",
        "result": true
      },
      {
        "name": "api.CSSMediaRule.media",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule.namespaceURI",
        "result": true
      },
      {
        "name": "api.CSSNamespaceRule.prefix",
        "result": true
      },
      {
        "name": "api.CSSNumericArray",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSNumericArray' is undefined",
        "name": "api.CSSNumericArray.length",
        "result": null
      },
      {
        "name": "api.CSSNumericValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.div",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.equals",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.mul",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.parse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.sub",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.to",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.toSum",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSNumericValue' is undefined",
        "name": "api.CSSNumericValue.type",
        "result": null
      },
      {
        "name": "api.CSSPageRule",
        "result": true
      },
      {
        "name": "api.CSSPageRule.selectorText",
        "result": true
      },
      {
        "name": "api.CSSPageRule.style",
        "result": true
      },
      {
        "name": "api.CSSParserAtRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserAtRule' is undefined",
        "name": "api.CSSParserAtRule.prelude",
        "result": null
      },
      {
        "name": "api.CSSParserBlock",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserBlock' is undefined",
        "name": "api.CSSParserBlock.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserBlock' is undefined",
        "name": "api.CSSParserBlock.name",
        "result": null
      },
      {
        "name": "api.CSSParserDeclaration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserDeclaration' is undefined",
        "name": "api.CSSParserDeclaration.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserDeclaration' is undefined",
        "name": "api.CSSParserDeclaration.name",
        "result": null
      },
      {
        "name": "api.CSSParserFunction",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserFunction' is undefined",
        "name": "api.CSSParserFunction.args",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserFunction' is undefined",
        "name": "api.CSSParserFunction.name",
        "result": null
      },
      {
        "name": "api.CSSParserQualifiedRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSParserQualifiedRule' is undefined",
        "name": "api.CSSParserQualifiedRule.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSParserQualifiedRule' is undefined",
        "name": "api.CSSParserQualifiedRule.prelude",
        "result": null
      },
      {
        "name": "api.CSSParserRule",
        "result": false
      },
      {
        "name": "api.CSSParserValue",
        "result": false
      },
      {
        "name": "api.CSSPerspective",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSPerspective' is undefined",
        "name": "api.CSSPerspective.length",
        "result": null
      },
      {
        "name": "api.CSSPseudoElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.animate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertPointFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertQuadFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.convertRectFromNode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.element",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.getAnimations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.getBoxQuads",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSPseudoElement' is undefined",
        "name": "api.CSSPseudoElement.type",
        "result": null
      },
      {
        "name": "api.CSSRotate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.angle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSRotate' is undefined",
        "name": "api.CSSRotate.z",
        "result": null
      },
      {
        "name": "api.CSSRule",
        "result": true
      },
      {
        "name": "api.CSSRule.CHARSET_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.COUNTER_STYLE_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.cssText",
        "result": true
      },
      {
        "name": "api.CSSRule.FONT_FACE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.FONT_FEATURE_VALUES_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.FONT_PALETTE_VALUES_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.IMPORT_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.KEYFRAME_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.KEYFRAMES_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.MARGIN_RULE",
        "result": false
      },
      {
        "name": "api.CSSRule.MEDIA_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.NAMESPACE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.PAGE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.parentRule",
        "result": true
      },
      {
        "name": "api.CSSRule.parentStyleSheet",
        "result": true
      },
      {
        "name": "api.CSSRule.STYLE_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.SUPPORTS_RULE",
        "result": true
      },
      {
        "name": "api.CSSRule.type",
        "result": true
      },
      {
        "name": "api.CSSRule.VIEWPORT_RULE",
        "result": true
      },
      {
        "name": "api.CSSRuleList",
        "result": true
      },
      {
        "name": "api.CSSRuleList.item",
        "result": true
      },
      {
        "name": "api.CSSRuleList.length",
        "result": true
      },
      {
        "name": "api.CSSScale",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSScale' is undefined",
        "name": "api.CSSScale.z",
        "result": null
      },
      {
        "name": "api.CSSSkew",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkew' is undefined",
        "name": "api.CSSSkew.ax",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSSkew' is undefined",
        "name": "api.CSSSkew.ay",
        "result": null
      },
      {
        "name": "api.CSSSkewX",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkewX' is undefined",
        "name": "api.CSSSkewX.ax",
        "result": null
      },
      {
        "name": "api.CSSSkewY",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSSkewY' is undefined",
        "name": "api.CSSSkewY.ay",
        "result": null
      },
      {
        "name": "api.CSSStyleDeclaration",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.cssFloat",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.cssText",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.getPropertyPriority",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.getPropertyValue",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.item",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.length",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.parentRule",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.removeProperty",
        "result": true
      },
      {
        "name": "api.CSSStyleDeclaration.setProperty",
        "result": true
      },
      {
        "name": "api.CSSStyleRule",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.selectorText",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.style",
        "result": true
      },
      {
        "name": "api.CSSStyleRule.styleMap",
        "result": false
      },
      {
        "name": "api.CSSStyleSheet",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.addRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.cssRules",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.deleteRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.insertRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.ownerRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.removeRule",
        "result": true
      },
      {
        "name": "api.CSSStyleSheet.rules",
        "result": true
      },
      {
        "name": "api.CSSStyleValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSStyleValue' is undefined",
        "name": "api.CSSStyleValue.parse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSStyleValue' is undefined",
        "name": "api.CSSStyleValue.parseAll",
        "result": null
      },
      {
        "name": "api.CSSSupportsRule",
        "result": true
      },
      {
        "name": "api.CSSTransformComponent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTransformComponent' is undefined",
        "name": "api.CSSTransformComponent.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformComponent' is undefined",
        "name": "api.CSSTransformComponent.toMatrix",
        "result": null
      },
      {
        "name": "api.CSSTransformValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.length",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTransformValue' is undefined",
        "name": "api.CSSTransformValue.toMatrix",
        "result": null
      },
      {
        "name": "api.CSSTranslate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSTranslate' is undefined",
        "name": "api.CSSTranslate.z",
        "result": null
      },
      {
        "name": "api.CSSUnitValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSUnitValue' is undefined",
        "name": "api.CSSUnitValue.unit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSUnitValue' is undefined",
        "name": "api.CSSUnitValue.value",
        "result": null
      },
      {
        "name": "api.CSSUnparsedValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSUnparsedValue' is undefined",
        "name": "api.CSSUnparsedValue.length",
        "result": null
      },
      {
        "name": "api.CSSVariableReferenceValue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSVariableReferenceValue' is undefined",
        "name": "api.CSSVariableReferenceValue.fallback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CSSVariableReferenceValue' is undefined",
        "name": "api.CSSVariableReferenceValue.variable",
        "result": null
      },
      {
        "name": "api.CSSViewportRule",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CSSViewportRule' is undefined",
        "name": "api.CSSViewportRule.style",
        "result": null
      },
      {
        "name": "api.CustomElementRegistry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.define",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.upgrade",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'CustomElementRegistry' is undefined",
        "name": "api.CustomElementRegistry.whenDefined",
        "result": null
      },
      {
        "name": "api.CustomEvent",
        "result": true
      },
      {
        "name": "api.CustomEvent.detail",
        "result": true
      },
      {
        "name": "api.CustomEvent.initCustomEvent",
        "result": true
      },
      {
        "name": "api.DataTransfer",
        "result": true
      },
      {
        "name": "api.DataTransfer.clearData",
        "result": true
      },
      {
        "name": "api.DataTransfer.dropEffect",
        "result": true
      },
      {
        "name": "api.DataTransfer.effectAllowed",
        "result": true
      },
      {
        "name": "api.DataTransfer.files",
        "result": true
      },
      {
        "name": "api.DataTransfer.getData",
        "result": true
      },
      {
        "name": "api.DataTransfer.items",
        "result": true
      },
      {
        "name": "api.DataTransfer.setData",
        "result": true
      },
      {
        "name": "api.DataTransfer.setDragImage",
        "result": false
      },
      {
        "name": "api.DataTransfer.types",
        "result": true
      },
      {
        "name": "api.DataTransferItem",
        "result": true
      },
      {
        "name": "api.DataTransferItem.getAsFile",
        "result": true
      },
      {
        "name": "api.DataTransferItem.getAsString",
        "result": true
      },
      {
        "name": "api.DataTransferItem.kind",
        "result": true
      },
      {
        "name": "api.DataTransferItem.type",
        "result": true
      },
      {
        "name": "api.DataTransferItem.webkitGetAsEntry",
        "result": false
      },
      {
        "name": "api.DataTransferItemList",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.add",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.add",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.clear",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.length",
        "result": true
      },
      {
        "name": "api.DataTransferItemList.remove",
        "result": true
      },
      {
        "name": "api.DeadFragmentInformation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.children",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.isOverflowed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.left",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.nextInBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.nextSibling",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.node",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.previousInBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.previousSibling",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.top",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeadFragmentInformation' is undefined",
        "name": "api.DeadFragmentInformation.width",
        "result": null
      },
      {
        "name": "api.DelayNode",
        "result": true
      },
      {
        "name": "api.DelayNode.delayTime",
        "result": true
      },
      {
        "name": "api.DeprecationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.anticipatedRemoval",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DeprecationReportBody' is undefined",
        "name": "api.DeprecationReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.DetectedBarcode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.boundingBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.cornerPoints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.format",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedBarcode' is undefined",
        "name": "api.DetectedBarcode.rawValue",
        "result": null
      },
      {
        "name": "api.DetectedFace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DetectedFace' is undefined",
        "name": "api.DetectedFace.boundingBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DetectedFace' is undefined",
        "name": "api.DetectedFace.landmarks",
        "result": null
      },
      {
        "name": "api.DeviceAcceleration",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.x",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.y",
        "result": true
      },
      {
        "name": "api.DeviceAcceleration.z",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.acceleration",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.accelerationIncludingGravity",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.interval",
        "result": true
      },
      {
        "name": "api.DeviceMotionEvent.rotationRate",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.absolute",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.alpha",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.beta",
        "result": true
      },
      {
        "name": "api.DeviceOrientationEvent.gamma",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.alpha",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.beta",
        "result": true
      },
      {
        "name": "api.DeviceRotationRate.gamma",
        "result": true
      },
      {
        "name": "api.Document",
        "result": true
      },
      {
        "name": "api.Document.activeElement",
        "result": true
      },
      {
        "name": "api.Document.addressSpace",
        "result": false
      },
      {
        "name": "api.Document.adoptNode",
        "result": true
      },
      {
        "name": "api.Document.alinkColor",
        "result": true
      },
      {
        "name": "api.Document.all",
        "result": true
      },
      {
        "name": "api.Document.anchors",
        "result": true
      },
      {
        "name": "api.Document.append",
        "result": false
      },
      {
        "name": "api.Document.applets",
        "result": true
      },
      {
        "name": "api.Document.bgColor",
        "result": true
      },
      {
        "name": "api.Document.body",
        "result": true
      },
      {
        "name": "api.Document.captureEvents",
        "result": true
      },
      {
        "name": "api.Document.caretPositionFromPoint",
        "result": false
      },
      {
        "name": "api.Document.characterSet",
        "result": true
      },
      {
        "name": "api.Document.charset",
        "result": true
      },
      {
        "name": "api.Document.childElementCount",
        "result": false
      },
      {
        "name": "api.Document.children",
        "result": false
      },
      {
        "name": "api.Document.clear",
        "result": true
      },
      {
        "name": "api.Document.close",
        "result": true
      },
      {
        "name": "api.Document.compatMode",
        "result": true
      },
      {
        "name": "api.Document.contentType",
        "result": false
      },
      {
        "name": "api.Document.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Document.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Document.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Document.cookie",
        "result": true
      },
      {
        "name": "api.Document.createAttribute",
        "result": true
      },
      {
        "name": "api.Document.createAttributeNS",
        "result": true
      },
      {
        "name": "api.Document.createCDATASection",
        "result": true
      },
      {
        "name": "api.Document.createComment",
        "result": true
      },
      {
        "name": "api.Document.createDocumentFragment",
        "result": true
      },
      {
        "name": "api.Document.createElement",
        "result": true
      },
      {
        "name": "api.Document.createElementNS",
        "result": true
      },
      {
        "name": "api.Document.createEvent",
        "result": true
      },
      {
        "name": "api.Document.createNodeIterator",
        "result": true
      },
      {
        "name": "api.Document.createProcessingInstruction",
        "result": true
      },
      {
        "name": "api.Document.createRange",
        "result": true
      },
      {
        "name": "api.Document.createTextNode",
        "result": true
      },
      {
        "name": "api.Document.createTreeWalker",
        "result": true
      },
      {
        "name": "api.Document.currentScript",
        "result": true
      },
      {
        "name": "api.Document.defaultView",
        "result": true
      },
      {
        "name": "api.Document.designMode",
        "result": true
      },
      {
        "name": "api.Document.dir",
        "result": true
      },
      {
        "name": "api.Document.doctype",
        "result": true
      },
      {
        "name": "api.Document.documentElement",
        "result": true
      },
      {
        "name": "api.Document.documentURI",
        "result": false
      },
      {
        "name": "api.Document.domain",
        "result": true
      },
      {
        "name": "api.Document.elementFromPoint",
        "result": true
      },
      {
        "name": "api.Document.elementsFromPoint",
        "result": false
      },
      {
        "name": "api.Document.embeds",
        "result": true
      },
      {
        "name": "api.Document.execCommand",
        "result": true
      },
      {
        "name": "api.Document.exitFullscreen",
        "result": true
      },
      {
        "name": "api.Document.exitPictureInPicture",
        "result": false
      },
      {
        "name": "api.Document.exitPointerLock",
        "result": false
      },
      {
        "name": "api.Document.featurePolicy",
        "result": false
      },
      {
        "name": "api.Document.fgColor",
        "result": true
      },
      {
        "name": "api.Document.firstElementChild",
        "result": false
      },
      {
        "name": "api.Document.fonts",
        "result": false
      },
      {
        "name": "api.Document.forms",
        "result": true
      },
      {
        "name": "api.Document.fullscreen",
        "result": false
      },
      {
        "name": "api.Document.fullscreenElement",
        "result": true
      },
      {
        "name": "api.Document.fullscreenEnabled",
        "result": true
      },
      {
        "name": "api.Document.getAnimations",
        "result": false
      },
      {
        "name": "api.Document.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Document.getElementById",
        "result": true
      },
      {
        "name": "api.Document.getElementsByClassName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByTagName",
        "result": true
      },
      {
        "name": "api.Document.getElementsByTagNameNS",
        "result": true
      },
      {
        "name": "api.Document.getSelection",
        "result": true
      },
      {
        "name": "api.Document.hasFocus",
        "result": true
      },
      {
        "name": "api.Document.head",
        "result": true
      },
      {
        "name": "api.Document.hidden",
        "result": true
      },
      {
        "name": "api.Document.images",
        "result": true
      },
      {
        "name": "api.Document.implementation",
        "result": true
      },
      {
        "name": "api.Document.importNode",
        "result": true
      },
      {
        "name": "api.Document.inputEncoding",
        "result": true
      },
      {
        "name": "api.Document.lastElementChild",
        "result": false
      },
      {
        "name": "api.Document.lastModified",
        "result": true
      },
      {
        "name": "api.Document.layoutNow",
        "result": false
      },
      {
        "name": "api.Document.linkColor",
        "result": true
      },
      {
        "name": "api.Document.links",
        "result": true
      },
      {
        "name": "api.Document.location",
        "result": true
      },
      {
        "name": "api.Document.measureElement",
        "result": false
      },
      {
        "name": "api.Document.measureText",
        "result": false
      },
      {
        "name": "api.Document.namedFlows",
        "result": false
      },
      {
        "name": "api.Document.onabort",
        "result": true
      },
      {
        "name": "api.Document.onanimationcancel",
        "result": false
      },
      {
        "name": "api.Document.onanimationend",
        "result": false
      },
      {
        "name": "api.Document.onanimationiteration",
        "result": false
      },
      {
        "name": "api.Document.onanimationstart",
        "result": false
      },
      {
        "name": "api.Document.onauxclick",
        "result": false
      },
      {
        "name": "api.Document.onblur",
        "result": true
      },
      {
        "name": "api.Document.oncancel",
        "result": false
      },
      {
        "name": "api.Document.oncanplay",
        "result": true
      },
      {
        "name": "api.Document.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.Document.onchange",
        "result": true
      },
      {
        "name": "api.Document.onclick",
        "result": true
      },
      {
        "name": "api.Document.onclose",
        "result": false
      },
      {
        "name": "api.Document.oncontextmenu",
        "result": true
      },
      {
        "name": "api.Document.oncopy",
        "result": false
      },
      {
        "name": "api.Document.oncuechange",
        "result": false
      },
      {
        "name": "api.Document.oncut",
        "result": false
      },
      {
        "name": "api.Document.ondblclick",
        "result": true
      },
      {
        "name": "api.Document.ondrag",
        "result": true
      },
      {
        "name": "api.Document.ondragend",
        "result": true
      },
      {
        "name": "api.Document.ondragenter",
        "result": true
      },
      {
        "name": "api.Document.ondragexit",
        "result": false
      },
      {
        "name": "api.Document.ondragleave",
        "result": true
      },
      {
        "name": "api.Document.ondragover",
        "result": true
      },
      {
        "name": "api.Document.ondragstart",
        "result": true
      },
      {
        "name": "api.Document.ondrop",
        "result": true
      },
      {
        "name": "api.Document.ondurationchange",
        "result": true
      },
      {
        "name": "api.Document.onemptied",
        "result": true
      },
      {
        "name": "api.Document.onended",
        "result": true
      },
      {
        "name": "api.Document.onerror",
        "result": true
      },
      {
        "name": "api.Document.onfocus",
        "result": true
      },
      {
        "name": "api.Document.onformdata",
        "result": false
      },
      {
        "name": "api.Document.onfullscreenchange",
        "result": true
      },
      {
        "name": "api.Document.onfullscreenerror",
        "result": true
      },
      {
        "name": "api.Document.ongotpointercapture",
        "result": false
      },
      {
        "name": "api.Document.oninput",
        "result": true
      },
      {
        "name": "api.Document.oninvalid",
        "result": false
      },
      {
        "name": "api.Document.onkeydown",
        "result": true
      },
      {
        "name": "api.Document.onkeypress",
        "result": true
      },
      {
        "name": "api.Document.onkeyup",
        "result": true
      },
      {
        "name": "api.Document.onload",
        "result": true
      },
      {
        "name": "api.Document.onloadeddata",
        "result": true
      },
      {
        "name": "api.Document.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.Document.onloadend",
        "result": false
      },
      {
        "name": "api.Document.onloadstart",
        "result": true
      },
      {
        "name": "api.Document.onlostpointercapture",
        "result": false
      },
      {
        "name": "api.Document.onmousedown",
        "result": true
      },
      {
        "name": "api.Document.onmouseenter",
        "result": false
      },
      {
        "name": "api.Document.onmouseleave",
        "result": false
      },
      {
        "name": "api.Document.onmousemove",
        "result": true
      },
      {
        "name": "api.Document.onmouseout",
        "result": true
      },
      {
        "name": "api.Document.onmouseover",
        "result": true
      },
      {
        "name": "api.Document.onmouseup",
        "result": true
      },
      {
        "name": "api.Document.onpaste",
        "result": false
      },
      {
        "name": "api.Document.onpause",
        "result": true
      },
      {
        "name": "api.Document.onplay",
        "result": true
      },
      {
        "name": "api.Document.onplaying",
        "result": true
      },
      {
        "name": "api.Document.onpointercancel",
        "result": true
      },
      {
        "name": "api.Document.onpointerdown",
        "result": true
      },
      {
        "name": "api.Document.onpointerenter",
        "result": true
      },
      {
        "name": "api.Document.onpointerleave",
        "result": true
      },
      {
        "name": "api.Document.onpointerlockchange",
        "result": false
      },
      {
        "name": "api.Document.onpointerlockerror",
        "result": false
      },
      {
        "name": "api.Document.onpointermove",
        "result": true
      },
      {
        "name": "api.Document.onpointerout",
        "result": true
      },
      {
        "name": "api.Document.onpointerover",
        "result": true
      },
      {
        "name": "api.Document.onpointerup",
        "result": true
      },
      {
        "name": "api.Document.onprogress",
        "result": true
      },
      {
        "name": "api.Document.onratechange",
        "result": true
      },
      {
        "name": "api.Document.onreadystatechange",
        "result": true
      },
      {
        "name": "api.Document.onreset",
        "result": true
      },
      {
        "name": "api.Document.onresize",
        "result": false
      },
      {
        "name": "api.Document.onscroll",
        "result": true
      },
      {
        "name": "api.Document.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.Document.onseeked",
        "result": true
      },
      {
        "name": "api.Document.onseeking",
        "result": true
      },
      {
        "name": "api.Document.onselect",
        "result": true
      },
      {
        "name": "api.Document.onselectionchange",
        "result": true
      },
      {
        "name": "api.Document.onselectstart",
        "result": true
      },
      {
        "name": "api.Document.onstalled",
        "result": true
      },
      {
        "name": "api.Document.onsubmit",
        "result": true
      },
      {
        "name": "api.Document.onsuspend",
        "result": true
      },
      {
        "name": "api.Document.ontimeupdate",
        "result": true
      },
      {
        "name": "api.Document.ontoggle",
        "result": false
      },
      {
        "name": "api.Document.ontouchcancel",
        "result": false
      },
      {
        "name": "api.Document.ontouchend",
        "result": false
      },
      {
        "name": "api.Document.ontouchmove",
        "result": false
      },
      {
        "name": "api.Document.ontouchstart",
        "result": false
      },
      {
        "name": "api.Document.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.Document.ontransitionend",
        "result": false
      },
      {
        "name": "api.Document.ontransitionrun",
        "result": false
      },
      {
        "name": "api.Document.ontransitionstart",
        "result": false
      },
      {
        "name": "api.Document.onvisibilitychange",
        "result": false
      },
      {
        "name": "api.Document.onvolumechange",
        "result": true
      },
      {
        "name": "api.Document.onwaiting",
        "result": true
      },
      {
        "name": "api.Document.onwheel",
        "result": true
      },
      {
        "name": "api.Document.open",
        "result": true
      },
      {
        "name": "api.Document.open",
        "result": true
      },
      {
        "name": "api.Document.origin",
        "result": false
      },
      {
        "name": "api.Document.pictureInPictureElement",
        "result": false
      },
      {
        "name": "api.Document.pictureInPictureEnabled",
        "result": false
      },
      {
        "name": "api.Document.plugins",
        "result": true
      },
      {
        "name": "api.Document.pointerLockElement",
        "result": false
      },
      {
        "name": "api.Document.prepend",
        "result": false
      },
      {
        "name": "api.Document.queryCommandEnabled",
        "result": true
      },
      {
        "name": "api.Document.queryCommandIndeterm",
        "result": true
      },
      {
        "name": "api.Document.queryCommandState",
        "result": true
      },
      {
        "name": "api.Document.queryCommandSupported",
        "result": true
      },
      {
        "name": "api.Document.queryCommandValue",
        "result": true
      },
      {
        "name": "api.Document.querySelector",
        "result": true
      },
      {
        "name": "api.Document.querySelectorAll",
        "result": true
      },
      {
        "name": "api.Document.readyState",
        "result": true
      },
      {
        "name": "api.Document.referrer",
        "result": true
      },
      {
        "name": "api.Document.releaseEvents",
        "result": true
      },
      {
        "name": "api.Document.rootElement",
        "result": true
      },
      {
        "name": "api.Document.scripts",
        "result": true
      },
      {
        "name": "api.Document.scrollingElement",
        "result": true
      },
      {
        "name": "api.Document.styleSheets",
        "result": true
      },
      {
        "name": "api.Document.timeline",
        "result": false
      },
      {
        "name": "api.Document.title",
        "result": true
      },
      {
        "name": "api.Document.URL",
        "result": true
      },
      {
        "name": "api.Document.visibilityState",
        "result": true
      },
      {
        "name": "api.Document.vlinkColor",
        "result": true
      },
      {
        "name": "api.Document.write",
        "result": true
      },
      {
        "name": "api.Document.writeln",
        "result": true
      },
      {
        "name": "api.DocumentFragment",
        "result": true
      },
      {
        "name": "api.DocumentFragment.append",
        "result": false
      },
      {
        "name": "api.DocumentFragment.childElementCount",
        "result": false
      },
      {
        "name": "api.DocumentFragment.children",
        "result": false
      },
      {
        "name": "api.DocumentFragment.firstElementChild",
        "result": false
      },
      {
        "name": "api.DocumentFragment.getElementById",
        "result": false
      },
      {
        "name": "api.DocumentFragment.lastElementChild",
        "result": false
      },
      {
        "name": "api.DocumentFragment.prepend",
        "result": false
      },
      {
        "name": "api.DocumentFragment.querySelector",
        "result": true
      },
      {
        "name": "api.DocumentFragment.querySelectorAll",
        "result": true
      },
      {
        "name": "api.DocumentTimeline",
        "result": false
      },
      {
        "name": "api.DocumentType",
        "result": true
      },
      {
        "name": "api.DocumentType.after",
        "result": false
      },
      {
        "name": "api.DocumentType.before",
        "result": false
      },
      {
        "name": "api.DocumentType.name",
        "result": true
      },
      {
        "name": "api.DocumentType.publicId",
        "result": true
      },
      {
        "name": "api.DocumentType.remove",
        "result": true
      },
      {
        "name": "api.DocumentType.replaceWith",
        "result": false
      },
      {
        "name": "api.DocumentType.systemId",
        "result": true
      },
      {
        "name": "api.DOMException",
        "result": true
      },
      {
        "name": "api.DOMException.ABORT_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.code",
        "result": true
      },
      {
        "name": "api.DOMException.DATA_CLONE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.DOMSTRING_SIZE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.HIERARCHY_REQUEST_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INDEX_SIZE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INUSE_ATTRIBUTE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_ACCESS_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_CHARACTER_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_MODIFICATION_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_NODE_TYPE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.INVALID_STATE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.message",
        "result": true
      },
      {
        "name": "api.DOMException.name",
        "result": true
      },
      {
        "name": "api.DOMException.NAMESPACE_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NETWORK_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NO_DATA_ALLOWED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NO_MODIFICATION_ALLOWED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NOT_FOUND_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.NOT_SUPPORTED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.QUOTA_EXCEEDED_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.SECURITY_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.SYNTAX_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.TIMEOUT_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.TYPE_MISMATCH_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.URL_MISMATCH_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.VALIDATION_ERR",
        "result": true
      },
      {
        "name": "api.DOMException.WRONG_DOCUMENT_ERR",
        "result": true
      },
      {
        "name": "api.DOMImplementation",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createDocument",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createDocumentType",
        "result": true
      },
      {
        "name": "api.DOMImplementation.createHTMLDocument",
        "result": true
      },
      {
        "name": "api.DOMImplementation.hasFeature",
        "result": true
      },
      {
        "name": "api.DOMMatrix",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.a",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.b",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.c",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.e",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.fromMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.invertSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m32",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m33",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m34",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m41",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m42",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m43",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.m44",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.multiplySelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.preMultiplySelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateAxisAngleSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateFromVectorSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.rotateSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.scale3dSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.scaleSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.setMatrixValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.skewXSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.skewYSelf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrix' is undefined",
        "name": "api.DOMMatrix.translateSelf",
        "result": null
      },
      {
        "name": "api.DOMMatrixReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.a",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.b",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.c",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.e",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.flipX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.flipY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.fromMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.inverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.is2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.isIdentity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m32",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m33",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m34",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m41",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m42",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m43",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.m44",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.multiply",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotateAxisAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.rotateFromVector",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scale",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scale3d",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.scaleNonUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.skewX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.skewY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toFloat32Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toFloat64Array",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.transformPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMMatrixReadOnly' is undefined",
        "name": "api.DOMMatrixReadOnly.translate",
        "result": null
      },
      {
        "name": "api.DOMParser",
        "result": true
      },
      {
        "name": "api.DOMParser.parseFromString",
        "result": true
      },
      {
        "name": "api.DOMPoint",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.fromPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.w",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPoint' is undefined",
        "name": "api.DOMPoint.z",
        "result": null
      },
      {
        "name": "api.DOMPointReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.fromPoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.matrixTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.w",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMPointReadOnly' is undefined",
        "name": "api.DOMPointReadOnly.z",
        "result": null
      },
      {
        "name": "api.DOMQuad",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.fromQuad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.getBounds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.p4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMQuad' is undefined",
        "name": "api.DOMQuad.toJSON",
        "result": null
      },
      {
        "name": "api.DOMRect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRect' is undefined",
        "name": "api.DOMRect.y",
        "result": null
      },
      {
        "name": "api.DOMRectList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRectList' is undefined",
        "name": "api.DOMRectList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectList' is undefined",
        "name": "api.DOMRectList.length",
        "result": null
      },
      {
        "name": "api.DOMRectReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.bottom",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.fromRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.left",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.right",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.top",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'DOMRectReadOnly' is undefined",
        "name": "api.DOMRectReadOnly.y",
        "result": null
      },
      {
        "name": "api.DOMStringList",
        "result": true
      },
      {
        "name": "api.DOMStringList.contains",
        "result": true
      },
      {
        "name": "api.DOMStringList.item",
        "result": true
      },
      {
        "name": "api.DOMStringList.length",
        "result": true
      },
      {
        "name": "api.DOMStringMap",
        "result": true
      },
      {
        "name": "api.DOMTokenList",
        "result": true
      },
      {
        "name": "api.DOMTokenList.add",
        "result": true
      },
      {
        "name": "api.DOMTokenList.contains",
        "result": true
      },
      {
        "name": "api.DOMTokenList.item",
        "result": true
      },
      {
        "name": "api.DOMTokenList.length",
        "result": true
      },
      {
        "name": "api.DOMTokenList.remove",
        "result": true
      },
      {
        "name": "api.DOMTokenList.replace",
        "result": false
      },
      {
        "name": "api.DOMTokenList.supports",
        "result": false
      },
      {
        "name": "api.DOMTokenList.toggle",
        "result": true
      },
      {
        "name": "api.DOMTokenList.value",
        "result": false
      },
      {
        "name": "api.DragEvent",
        "result": true
      },
      {
        "name": "api.DragEvent.dataTransfer",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.attack",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.knee",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.ratio",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.reduction",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.release",
        "result": true
      },
      {
        "name": "api.DynamicsCompressorNode.threshold",
        "result": true
      },
      {
        "name": "api.Element",
        "result": true
      },
      {
        "name": "api.Element.after",
        "result": false
      },
      {
        "name": "api.Element.animate",
        "result": false
      },
      {
        "name": "api.Element.append",
        "result": false
      },
      {
        "name": "api.Element.ariaActiveDescendantElement",
        "result": false
      },
      {
        "name": "api.Element.ariaAtomic",
        "result": false
      },
      {
        "name": "api.Element.ariaAutoComplete",
        "result": false
      },
      {
        "name": "api.Element.ariaBusy",
        "result": false
      },
      {
        "name": "api.Element.ariaChecked",
        "result": false
      },
      {
        "name": "api.Element.ariaColCount",
        "result": false
      },
      {
        "name": "api.Element.ariaColIndex",
        "result": false
      },
      {
        "name": "api.Element.ariaColSpan",
        "result": false
      },
      {
        "name": "api.Element.ariaControlsElements",
        "result": false
      },
      {
        "name": "api.Element.ariaCurrent",
        "result": false
      },
      {
        "name": "api.Element.ariaDescribedByElements",
        "result": false
      },
      {
        "name": "api.Element.ariaDetailsElement",
        "result": false
      },
      {
        "name": "api.Element.ariaDisabled",
        "result": false
      },
      {
        "name": "api.Element.ariaErrorMessageElement",
        "result": false
      },
      {
        "name": "api.Element.ariaExpanded",
        "result": false
      },
      {
        "name": "api.Element.ariaFlowToElements",
        "result": false
      },
      {
        "name": "api.Element.ariaHasPopup",
        "result": false
      },
      {
        "name": "api.Element.ariaHidden",
        "result": false
      },
      {
        "name": "api.Element.ariaInvalid",
        "result": false
      },
      {
        "name": "api.Element.ariaKeyShortcuts",
        "result": false
      },
      {
        "name": "api.Element.ariaLabel",
        "result": false
      },
      {
        "name": "api.Element.ariaLabelledByElements",
        "result": false
      },
      {
        "name": "api.Element.ariaLevel",
        "result": false
      },
      {
        "name": "api.Element.ariaLive",
        "result": false
      },
      {
        "name": "api.Element.ariaModal",
        "result": false
      },
      {
        "name": "api.Element.ariaMultiLine",
        "result": false
      },
      {
        "name": "api.Element.ariaMultiSelectable",
        "result": false
      },
      {
        "name": "api.Element.ariaOrientation",
        "result": false
      },
      {
        "name": "api.Element.ariaOwnsElements",
        "result": false
      },
      {
        "name": "api.Element.ariaPlaceholder",
        "result": false
      },
      {
        "name": "api.Element.ariaPosInSet",
        "result": false
      },
      {
        "name": "api.Element.ariaPressed",
        "result": false
      },
      {
        "name": "api.Element.ariaReadOnly",
        "result": false
      },
      {
        "name": "api.Element.ariaRelevant",
        "result": false
      },
      {
        "name": "api.Element.ariaRequired",
        "result": false
      },
      {
        "name": "api.Element.ariaRoleDescription",
        "result": false
      },
      {
        "name": "api.Element.ariaRowCount",
        "result": false
      },
      {
        "name": "api.Element.ariaRowIndex",
        "result": false
      },
      {
        "name": "api.Element.ariaRowSpan",
        "result": false
      },
      {
        "name": "api.Element.ariaSelected",
        "result": false
      },
      {
        "name": "api.Element.ariaSetSize",
        "result": false
      },
      {
        "name": "api.Element.ariaSort",
        "result": false
      },
      {
        "name": "api.Element.ariaValueMax",
        "result": false
      },
      {
        "name": "api.Element.ariaValueMin",
        "result": false
      },
      {
        "name": "api.Element.ariaValueNow",
        "result": false
      },
      {
        "name": "api.Element.ariaValueText",
        "result": false
      },
      {
        "name": "api.Element.assignedSlot",
        "result": false
      },
      {
        "name": "api.Element.attachShadow",
        "result": false
      },
      {
        "name": "api.Element.attributes",
        "result": true
      },
      {
        "name": "api.Element.before",
        "result": false
      },
      {
        "name": "api.Element.childElementCount",
        "result": true
      },
      {
        "name": "api.Element.children",
        "result": false
      },
      {
        "name": "api.Element.classList",
        "result": true
      },
      {
        "name": "api.Element.className",
        "result": false
      },
      {
        "name": "api.Element.clientHeight",
        "result": true
      },
      {
        "name": "api.Element.clientLeft",
        "result": true
      },
      {
        "name": "api.Element.clientTop",
        "result": true
      },
      {
        "name": "api.Element.clientWidth",
        "result": true
      },
      {
        "name": "api.Element.closest",
        "result": false
      },
      {
        "name": "api.Element.computedStyleMap",
        "result": false
      },
      {
        "name": "api.Element.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Element.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Element.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Element.firstElementChild",
        "result": true
      },
      {
        "name": "api.Element.getAnimations",
        "result": false
      },
      {
        "name": "api.Element.getAttribute",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNames",
        "result": false
      },
      {
        "name": "api.Element.getAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNodeNS",
        "result": true
      },
      {
        "name": "api.Element.getAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.getBoundingClientRect",
        "result": true
      },
      {
        "name": "api.Element.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Element.getClientRects",
        "result": true
      },
      {
        "name": "api.Element.getElementsByClassName",
        "result": false
      },
      {
        "name": "api.Element.getElementsByTagName",
        "result": true
      },
      {
        "name": "api.Element.getElementsByTagNameNS",
        "result": true
      },
      {
        "name": "api.Element.getFragmentInformation",
        "result": false
      },
      {
        "name": "api.Element.getRegionFlowRanges",
        "result": false
      },
      {
        "name": "api.Element.hasAttribute",
        "result": true
      },
      {
        "name": "api.Element.hasAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.hasAttributes",
        "result": true
      },
      {
        "name": "api.Element.hasPointerCapture",
        "result": false
      },
      {
        "name": "api.Element.id",
        "result": true
      },
      {
        "name": "api.Element.innerHTML",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentElement",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentHTML",
        "result": false
      },
      {
        "name": "api.Element.insertAdjacentText",
        "result": false
      },
      {
        "name": "api.Element.lastElementChild",
        "result": true
      },
      {
        "name": "api.Element.localName",
        "result": true
      },
      {
        "name": "api.Element.matches",
        "result": false
      },
      {
        "name": "api.Element.namespaceURI",
        "result": true
      },
      {
        "name": "api.Element.nextElementSibling",
        "result": true
      },
      {
        "name": "api.Element.onfullscreenchange",
        "result": false
      },
      {
        "name": "api.Element.onfullscreenerror",
        "result": false
      },
      {
        "name": "api.Element.outerHTML",
        "result": false
      },
      {
        "name": "api.Element.prefix",
        "result": true
      },
      {
        "name": "api.Element.prepend",
        "result": false
      },
      {
        "name": "api.Element.previousElementSibling",
        "result": true
      },
      {
        "name": "api.Element.pseudo",
        "result": false
      },
      {
        "name": "api.Element.querySelector",
        "result": true
      },
      {
        "name": "api.Element.querySelectorAll",
        "result": true
      },
      {
        "name": "api.Element.regionOverset",
        "result": false
      },
      {
        "name": "api.Element.releasePointerCapture",
        "result": true
      },
      {
        "name": "api.Element.remove",
        "result": true
      },
      {
        "name": "api.Element.removeAttribute",
        "result": true
      },
      {
        "name": "api.Element.removeAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.removeAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.replaceWith",
        "result": false
      },
      {
        "name": "api.Element.requestFullscreen",
        "result": true
      },
      {
        "name": "api.Element.requestPointerLock",
        "result": false
      },
      {
        "name": "api.Element.role",
        "result": false
      },
      {
        "name": "api.Element.scroll",
        "result": false
      },
      {
        "name": "api.Element.scroll",
        "result": false
      },
      {
        "name": "api.Element.scrollBy",
        "result": false
      },
      {
        "name": "api.Element.scrollBy",
        "result": false
      },
      {
        "name": "api.Element.scrollHeight",
        "result": true
      },
      {
        "name": "api.Element.scrollIntoView",
        "result": false
      },
      {
        "name": "api.Element.scrollLeft",
        "result": true
      },
      {
        "name": "api.Element.scrollTo",
        "result": false
      },
      {
        "name": "api.Element.scrollTo",
        "result": false
      },
      {
        "name": "api.Element.scrollTop",
        "result": true
      },
      {
        "name": "api.Element.scrollWidth",
        "result": true
      },
      {
        "name": "api.Element.setAttribute",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNode",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNodeNS",
        "result": true
      },
      {
        "name": "api.Element.setAttributeNS",
        "result": true
      },
      {
        "name": "api.Element.setPointerCapture",
        "result": true
      },
      {
        "name": "api.Element.shadowRoot",
        "result": false
      },
      {
        "name": "api.Element.slot",
        "result": false
      },
      {
        "name": "api.Element.tagName",
        "result": true
      },
      {
        "name": "api.Element.toggleAttribute",
        "result": false
      },
      {
        "name": "api.Element.webkitMatchesSelector",
        "result": true
      },
      {
        "name": "api.EnterPictureInPictureEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'EnterPictureInPictureEvent' is undefined",
        "name": "api.EnterPictureInPictureEvent.pictureInPictureWindow",
        "result": null
      },
      {
        "name": "api.ErrorEvent",
        "result": true
      },
      {
        "name": "api.ErrorEvent.colno",
        "result": true
      },
      {
        "name": "api.ErrorEvent.error",
        "result": true
      },
      {
        "name": "api.ErrorEvent.filename",
        "result": true
      },
      {
        "name": "api.ErrorEvent.lineno",
        "result": true
      },
      {
        "name": "api.ErrorEvent.message",
        "result": true
      },
      {
        "name": "api.Event",
        "result": true
      },
      {
        "name": "api.Event.AT_TARGET",
        "result": true
      },
      {
        "name": "api.Event.bubbles",
        "result": true
      },
      {
        "name": "api.Event.BUBBLING_PHASE",
        "result": true
      },
      {
        "name": "api.Event.cancelable",
        "result": true
      },
      {
        "name": "api.Event.cancelBubble",
        "result": true
      },
      {
        "name": "api.Event.CAPTURING_PHASE",
        "result": true
      },
      {
        "name": "api.Event.composed",
        "result": false
      },
      {
        "name": "api.Event.composedPath",
        "result": false
      },
      {
        "name": "api.Event.currentTarget",
        "result": true
      },
      {
        "name": "api.Event.defaultPrevented",
        "result": true
      },
      {
        "name": "api.Event.eventPhase",
        "result": true
      },
      {
        "name": "api.Event.initEvent",
        "result": true
      },
      {
        "name": "api.Event.isTrusted",
        "result": true
      },
      {
        "name": "api.Event.NONE",
        "result": false
      },
      {
        "name": "api.Event.preventDefault",
        "result": true
      },
      {
        "name": "api.Event.returnValue",
        "result": true
      },
      {
        "name": "api.Event.srcElement",
        "result": true
      },
      {
        "name": "api.Event.stopImmediatePropagation",
        "result": true
      },
      {
        "name": "api.Event.stopPropagation",
        "result": true
      },
      {
        "name": "api.Event.target",
        "result": true
      },
      {
        "name": "api.Event.timeStamp",
        "result": true
      },
      {
        "name": "api.Event.type",
        "result": true
      },
      {
        "name": "api.EventCounts",
        "result": false
      },
      {
        "name": "api.EventSource",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.CLOSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.CONNECTING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.onopen",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.OPEN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.readyState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.url",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'EventSource' is undefined",
        "name": "api.EventSource.withCredentials",
        "result": null
      },
      {
        "name": "api.EventTarget",
        "result": true
      },
      {
        "name": "api.EventTarget.addEventListener",
        "result": true
      },
      {
        "name": "api.EventTarget.dispatchEvent",
        "result": true
      },
      {
        "name": "api.EventTarget.removeEventListener",
        "result": true
      },
      {
        "name": "api.External",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'External' is undefined",
        "name": "api.External.AddSearchProvider",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'External' is undefined",
        "name": "api.External.IsSearchProviderInstalled",
        "result": null
      },
      {
        "name": "api.FaceDetector",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FaceDetector' is undefined",
        "name": "api.FaceDetector.detect",
        "result": null
      },
      {
        "name": "api.FeaturePolicy",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.allowedFeatures",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.allowsFeature",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.features",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicy' is undefined",
        "name": "api.FeaturePolicy.getAllowlistForFeature",
        "result": null
      },
      {
        "name": "api.FeaturePolicyViolationReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.featureId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FeaturePolicyViolationReportBody' is undefined",
        "name": "api.FeaturePolicyViolationReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.FederatedCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.iconURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FederatedCredential' is undefined",
        "name": "api.FederatedCredential.provider",
        "result": null
      },
      {
        "name": "api.File",
        "result": true
      },
      {
        "name": "api.File.lastModified",
        "result": false
      },
      {
        "name": "api.File.name",
        "result": true
      },
      {
        "name": "api.File.webkitRelativePath",
        "result": false
      },
      {
        "name": "api.FileList",
        "result": true
      },
      {
        "name": "api.FileList.item",
        "result": true
      },
      {
        "name": "api.FileList.length",
        "result": true
      },
      {
        "name": "api.FileReader",
        "result": true
      },
      {
        "name": "api.FileReader.abort",
        "result": true
      },
      {
        "name": "api.FileReader.DONE",
        "result": true
      },
      {
        "name": "api.FileReader.EMPTY",
        "result": true
      },
      {
        "name": "api.FileReader.error",
        "result": true
      },
      {
        "name": "api.FileReader.LOADING",
        "result": true
      },
      {
        "name": "api.FileReader.onabort",
        "result": true
      },
      {
        "name": "api.FileReader.onerror",
        "result": true
      },
      {
        "name": "api.FileReader.onload",
        "result": true
      },
      {
        "name": "api.FileReader.onloadend",
        "result": true
      },
      {
        "name": "api.FileReader.onloadstart",
        "result": true
      },
      {
        "name": "api.FileReader.onprogress",
        "result": true
      },
      {
        "name": "api.FileReader.readAsArrayBuffer",
        "result": true
      },
      {
        "name": "api.FileReader.readAsBinaryString",
        "result": true
      },
      {
        "name": "api.FileReader.readAsDataURL",
        "result": true
      },
      {
        "name": "api.FileReader.readAsText",
        "result": true
      },
      {
        "name": "api.FileReader.readyState",
        "result": true
      },
      {
        "name": "api.FileReader.result",
        "result": true
      },
      {
        "name": "api.FileSystem",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystem' is undefined",
        "name": "api.FileSystem.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystem' is undefined",
        "name": "api.FileSystem.root",
        "result": null
      },
      {
        "name": "api.FileSystemDirectoryEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.createReader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.getDirectory",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryEntry' is undefined",
        "name": "api.FileSystemDirectoryEntry.getFile",
        "result": null
      },
      {
        "name": "api.FileSystemDirectoryReader",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemDirectoryReader' is undefined",
        "name": "api.FileSystemDirectoryReader.readEntries",
        "result": null
      },
      {
        "name": "api.FileSystemEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.filesystem",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.fullPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.getParent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.isDirectory",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.isFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FileSystemEntry' is undefined",
        "name": "api.FileSystemEntry.name",
        "result": null
      },
      {
        "name": "api.FileSystemFileEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FileSystemFileEntry' is undefined",
        "name": "api.FileSystemFileEntry.file",
        "result": null
      },
      {
        "name": "api.FocusEvent",
        "result": true
      },
      {
        "name": "api.FocusEvent.relatedTarget",
        "result": true
      },
      {
        "name": "api.Font",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Font' is undefined",
        "name": "api.Font.glyphsRendered",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Font' is undefined",
        "name": "api.Font.name",
        "result": null
      },
      {
        "name": "api.FontFace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.display",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.family",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.featureSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.loaded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.status",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.stretch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.style",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.unicodeRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.variant",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.variationSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFace' is undefined",
        "name": "api.FontFace.weight",
        "result": null
      },
      {
        "name": "api.FontFaceSet",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.check",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloadingdone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.onloadingerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontFaceSet' is undefined",
        "name": "api.FontFaceSet.status",
        "result": null
      },
      {
        "name": "api.FontFaceSetLoadEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontFaceSetLoadEvent' is undefined",
        "name": "api.FontFaceSetLoadEvent.fontfaces",
        "result": null
      },
      {
        "name": "api.FontMetrics",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.advances",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.baselines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxLeft",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.boundingBoxRight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.dominantBaseline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.emHeightAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.emHeightDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fontBoundingBoxAscent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fontBoundingBoxDescent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.fonts",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FontMetrics' is undefined",
        "name": "api.FontMetrics.width",
        "result": null
      },
      {
        "name": "api.FormData",
        "result": true
      },
      {
        "name": "api.FormData.append",
        "result": true
      },
      {
        "name": "api.FormData.append",
        "result": true
      },
      {
        "name": "api.FormData.delete",
        "result": false
      },
      {
        "name": "api.FormData.get",
        "result": false
      },
      {
        "name": "api.FormData.getAll",
        "result": false
      },
      {
        "name": "api.FormData.has",
        "result": false
      },
      {
        "name": "api.FormData.set",
        "result": false
      },
      {
        "name": "api.FormData.set",
        "result": false
      },
      {
        "name": "api.FormDataEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FormDataEvent' is undefined",
        "name": "api.FormDataEvent.formData",
        "result": null
      },
      {
        "name": "api.FragmentResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'FragmentResult' is undefined",
        "name": "api.FragmentResult.blockSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'FragmentResult' is undefined",
        "name": "api.FragmentResult.inlineSize",
        "result": null
      },
      {
        "name": "api.GainNode",
        "result": true
      },
      {
        "name": "api.GainNode.gain",
        "result": true
      },
      {
        "name": "api.Gamepad",
        "result": true
      },
      {
        "name": "api.Gamepad.axes",
        "result": true
      },
      {
        "name": "api.Gamepad.buttons",
        "result": true
      },
      {
        "name": "api.Gamepad.connected",
        "result": true
      },
      {
        "name": "api.Gamepad.id",
        "result": true
      },
      {
        "name": "api.Gamepad.index",
        "result": true
      },
      {
        "name": "api.Gamepad.mapping",
        "result": true
      },
      {
        "name": "api.Gamepad.timestamp",
        "result": true
      },
      {
        "name": "api.GamepadButton",
        "result": true
      },
      {
        "name": "api.GamepadButton.pressed",
        "result": true
      },
      {
        "name": "api.GamepadButton.touched",
        "result": false
      },
      {
        "name": "api.GamepadButton.value",
        "result": true
      },
      {
        "name": "api.GamepadEvent",
        "result": true
      },
      {
        "name": "api.GamepadEvent.gamepad",
        "result": true
      },
      {
        "name": "api.Geolocation",
        "result": true
      },
      {
        "name": "api.Geolocation.clearWatch",
        "result": true
      },
      {
        "name": "api.Geolocation.getCurrentPosition",
        "result": true
      },
      {
        "name": "api.Geolocation.watchPosition",
        "result": true
      },
      {
        "name": "api.GeolocationSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.accuracy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.altitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.altitudeAccuracy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.heading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.latitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.longitude",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.read",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'GeolocationSensor' is undefined",
        "name": "api.GeolocationSensor.speed",
        "result": null
      },
      {
        "name": "api.GravitySensor",
        "result": false
      },
      {
        "name": "api.Gyroscope",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Gyroscope' is undefined",
        "name": "api.Gyroscope.z",
        "result": null
      },
      {
        "name": "api.HashChangeEvent",
        "result": true
      },
      {
        "name": "api.HashChangeEvent.newURL",
        "result": true
      },
      {
        "name": "api.HashChangeEvent.oldURL",
        "result": true
      },
      {
        "name": "api.Headers",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Headers' is undefined",
        "name": "api.Headers.set",
        "result": null
      },
      {
        "name": "api.History",
        "result": true
      },
      {
        "name": "api.History.back",
        "result": true
      },
      {
        "name": "api.History.forward",
        "result": true
      },
      {
        "name": "api.History.go",
        "result": true
      },
      {
        "name": "api.History.length",
        "result": true
      },
      {
        "name": "api.History.pushState",
        "result": true
      },
      {
        "name": "api.History.replaceState",
        "result": true
      },
      {
        "name": "api.History.scrollRestoration",
        "result": false
      },
      {
        "name": "api.History.state",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.item",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.length",
        "result": true
      },
      {
        "name": "api.HTMLAllCollection.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.coords",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.download",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.hash",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.host",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.hostname",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.href",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.hreflang",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.name",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.origin",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.password",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.pathname",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.ping",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.port",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.protocol",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLAnchorElement.rev",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.search",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.shape",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.target",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.text",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.type",
        "result": true
      },
      {
        "name": "api.HTMLAnchorElement.username",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.coords",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.download",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.hash",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.host",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.hostname",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.href",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.noHref",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.origin",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.password",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.pathname",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.ping",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.port",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.protocol",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLAreaElement.search",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.shape",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.target",
        "result": true
      },
      {
        "name": "api.HTMLAreaElement.username",
        "result": false
      },
      {
        "name": "api.HTMLAudioElement",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement.href",
        "result": true
      },
      {
        "name": "api.HTMLBaseElement.target",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.aLink",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.background",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.link",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onafterprint",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onbeforeprint",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onbeforeunload",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onhashchange",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onmessage",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onoffline",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.ononline",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onorientationchange",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onpagehide",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onpageshow",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onpopstate",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onstorage",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.HTMLBodyElement.onunload",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.text",
        "result": true
      },
      {
        "name": "api.HTMLBodyElement.vLink",
        "result": true
      },
      {
        "name": "api.HTMLBRElement",
        "result": true
      },
      {
        "name": "api.HTMLBRElement.clear",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.form",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formAction",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formEnctype",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formMethod",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formNoValidate",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.formTarget",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLButtonElement.name",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLButtonElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.type",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.value",
        "result": true
      },
      {
        "name": "api.HTMLButtonElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.captureStream",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.getContext",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.height",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.toBlob",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.toDataURL",
        "result": true
      },
      {
        "name": "api.HTMLCanvasElement.transferControlToOffscreen",
        "result": false
      },
      {
        "name": "api.HTMLCanvasElement.width",
        "result": true
      },
      {
        "name": "api.HTMLCollection",
        "result": true
      },
      {
        "name": "api.HTMLCollection.item",
        "result": true
      },
      {
        "name": "api.HTMLCollection.length",
        "result": true
      },
      {
        "name": "api.HTMLCollection.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLDataElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDataElement' is undefined",
        "name": "api.HTMLDataElement.value",
        "result": null
      },
      {
        "name": "api.HTMLDataListElement",
        "result": true
      },
      {
        "name": "api.HTMLDataListElement.options",
        "result": true
      },
      {
        "name": "api.HTMLDetailsElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDetailsElement' is undefined",
        "name": "api.HTMLDetailsElement.open",
        "result": null
      },
      {
        "name": "api.HTMLDialogElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.returnValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.show",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLDialogElement' is undefined",
        "name": "api.HTMLDialogElement.showModal",
        "result": null
      },
      {
        "name": "api.HTMLDirectoryElement",
        "result": true
      },
      {
        "name": "api.HTMLDirectoryElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLDivElement",
        "result": true
      },
      {
        "name": "api.HTMLDivElement.align",
        "result": true
      },
      {
        "name": "api.HTMLDListElement",
        "result": true
      },
      {
        "name": "api.HTMLDListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLElement",
        "result": true
      },
      {
        "name": "api.HTMLElement.accessKey",
        "result": true
      },
      {
        "name": "api.HTMLElement.accessKeyLabel",
        "result": false
      },
      {
        "name": "api.HTMLElement.attributeStyleMap",
        "result": false
      },
      {
        "name": "api.HTMLElement.autocapitalize",
        "result": false
      },
      {
        "name": "api.HTMLElement.blur",
        "result": true
      },
      {
        "name": "api.HTMLElement.click",
        "result": true
      },
      {
        "name": "api.HTMLElement.contentEditable",
        "result": true
      },
      {
        "name": "api.HTMLElement.dataset",
        "result": true
      },
      {
        "name": "api.HTMLElement.dir",
        "result": true
      },
      {
        "name": "api.HTMLElement.draggable",
        "result": true
      },
      {
        "name": "api.HTMLElement.enterKeyHint",
        "result": false
      },
      {
        "name": "api.HTMLElement.focus",
        "result": true
      },
      {
        "name": "api.HTMLElement.hidden",
        "result": true
      },
      {
        "name": "api.HTMLElement.innerText",
        "result": true
      },
      {
        "name": "api.HTMLElement.inputMode",
        "result": false
      },
      {
        "name": "api.HTMLElement.isContentEditable",
        "result": true
      },
      {
        "name": "api.HTMLElement.lang",
        "result": true
      },
      {
        "name": "api.HTMLElement.nonce",
        "result": false
      },
      {
        "name": "api.HTMLElement.offsetHeight",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetLeft",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetParent",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetTop",
        "result": true
      },
      {
        "name": "api.HTMLElement.offsetWidth",
        "result": true
      },
      {
        "name": "api.HTMLElement.onabort",
        "result": true
      },
      {
        "name": "api.HTMLElement.onanimationcancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationend",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationiteration",
        "result": false
      },
      {
        "name": "api.HTMLElement.onanimationstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.onauxclick",
        "result": false
      },
      {
        "name": "api.HTMLElement.onblur",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.oncanplay",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.HTMLElement.onchange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onclick",
        "result": true
      },
      {
        "name": "api.HTMLElement.onclose",
        "result": false
      },
      {
        "name": "api.HTMLElement.oncontextmenu",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncopy",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncuechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.oncut",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondblclick",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondrag",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragend",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragexit",
        "result": false
      },
      {
        "name": "api.HTMLElement.ondragleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragover",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondragstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondrop",
        "result": true
      },
      {
        "name": "api.HTMLElement.ondurationchange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onemptied",
        "result": true
      },
      {
        "name": "api.HTMLElement.onended",
        "result": true
      },
      {
        "name": "api.HTMLElement.onerror",
        "result": true
      },
      {
        "name": "api.HTMLElement.onfocus",
        "result": true
      },
      {
        "name": "api.HTMLElement.onformdata",
        "result": false
      },
      {
        "name": "api.HTMLElement.ongotpointercapture",
        "result": true
      },
      {
        "name": "api.HTMLElement.oninput",
        "result": true
      },
      {
        "name": "api.HTMLElement.oninvalid",
        "result": false
      },
      {
        "name": "api.HTMLElement.onkeydown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onkeypress",
        "result": true
      },
      {
        "name": "api.HTMLElement.onkeyup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onload",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadeddata",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.HTMLElement.onloadend",
        "result": false
      },
      {
        "name": "api.HTMLElement.onloadstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.onlostpointercapture",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmousedown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmousemove",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseout",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseover",
        "result": true
      },
      {
        "name": "api.HTMLElement.onmouseup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpaste",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpause",
        "result": true
      },
      {
        "name": "api.HTMLElement.onplay",
        "result": true
      },
      {
        "name": "api.HTMLElement.onplaying",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointercancel",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerdown",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerenter",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerleave",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointermove",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerout",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerover",
        "result": true
      },
      {
        "name": "api.HTMLElement.onpointerup",
        "result": true
      },
      {
        "name": "api.HTMLElement.onprogress",
        "result": true
      },
      {
        "name": "api.HTMLElement.onratechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onreset",
        "result": true
      },
      {
        "name": "api.HTMLElement.onresize",
        "result": false
      },
      {
        "name": "api.HTMLElement.onscroll",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.HTMLElement.onseeked",
        "result": true
      },
      {
        "name": "api.HTMLElement.onseeking",
        "result": true
      },
      {
        "name": "api.HTMLElement.onselect",
        "result": true
      },
      {
        "name": "api.HTMLElement.onselectionchange",
        "result": false
      },
      {
        "name": "api.HTMLElement.onselectstart",
        "result": true
      },
      {
        "name": "api.HTMLElement.onstalled",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsubmit",
        "result": true
      },
      {
        "name": "api.HTMLElement.onsuspend",
        "result": true
      },
      {
        "name": "api.HTMLElement.ontimeupdate",
        "result": true
      },
      {
        "name": "api.HTMLElement.ontoggle",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchcancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchend",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchmove",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontouchstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionend",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionrun",
        "result": false
      },
      {
        "name": "api.HTMLElement.ontransitionstart",
        "result": false
      },
      {
        "name": "api.HTMLElement.onvolumechange",
        "result": true
      },
      {
        "name": "api.HTMLElement.onwaiting",
        "result": true
      },
      {
        "name": "api.HTMLElement.onwheel",
        "result": true
      },
      {
        "name": "api.HTMLElement.spellcheck",
        "result": true
      },
      {
        "name": "api.HTMLElement.style",
        "result": true
      },
      {
        "name": "api.HTMLElement.tabIndex",
        "result": true
      },
      {
        "name": "api.HTMLElement.title",
        "result": true
      },
      {
        "name": "api.HTMLElement.translate",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.align",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.height",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.name",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.src",
        "result": true
      },
      {
        "name": "api.HTMLEmbedElement.type",
        "result": false
      },
      {
        "name": "api.HTMLEmbedElement.width",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.elements",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.form",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.name",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.type",
        "result": false
      },
      {
        "name": "api.HTMLFieldSetElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLFieldSetElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLFontElement",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.color",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.face",
        "result": true
      },
      {
        "name": "api.HTMLFontElement.size",
        "result": true
      },
      {
        "name": "api.HTMLFormControlsCollection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLFormControlsCollection' is undefined",
        "name": "api.HTMLFormControlsCollection.namedItem",
        "result": null
      },
      {
        "name": "api.HTMLFormElement",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.acceptCharset",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.action",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.autocomplete",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.elements",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.encoding",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.enctype",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.length",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.method",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.name",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.noValidate",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.rel",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLFormElement.reset",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.submit",
        "result": true
      },
      {
        "name": "api.HTMLFormElement.target",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.contentWindow",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.frameBorder",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.marginHeight",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.marginWidth",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.name",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.noResize",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.scrolling",
        "result": true
      },
      {
        "name": "api.HTMLFrameElement.src",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.cols",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onafterprint",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onbeforeprint",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onbeforeunload",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onhashchange",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onmessage",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onoffline",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.ononline",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpagehide",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpageshow",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onpopstate",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onstorage",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.HTMLFrameSetElement.onunload",
        "result": true
      },
      {
        "name": "api.HTMLFrameSetElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLHeadElement",
        "result": true
      },
      {
        "name": "api.HTMLHeadingElement",
        "result": true
      },
      {
        "name": "api.HTMLHeadingElement.align",
        "result": true
      },
      {
        "name": "api.HTMLHRElement",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.align",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.color",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.noShade",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.size",
        "result": true
      },
      {
        "name": "api.HTMLHRElement.width",
        "result": true
      },
      {
        "name": "api.HTMLHtmlElement",
        "result": true
      },
      {
        "name": "api.HTMLHtmlElement.version",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.align",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.allow",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.allowFullscreen",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.allowPaymentRequest",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.contentWindow",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.csp",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.featurePolicy",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.frameBorder",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.height",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.marginHeight",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.marginWidth",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.name",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.sandbox",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.scrolling",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.src",
        "result": true
      },
      {
        "name": "api.HTMLIFrameElement.srcdoc",
        "result": false
      },
      {
        "name": "api.HTMLIFrameElement.width",
        "result": true
      },
      {
        "name": "api.HTMLImageElement",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.align",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.border",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.complete",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.crossOrigin",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.currentSrc",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.decode",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.decoding",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.height",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.isMap",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.longDesc",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.lowsrc",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.name",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.naturalHeight",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.naturalWidth",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLImageElement.src",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.srcset",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.width",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.x",
        "result": true
      },
      {
        "name": "api.HTMLImageElement.y",
        "result": true
      },
      {
        "name": "api.HTMLInputElement",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.accept",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.align",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.alt",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.autocomplete",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.capture",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.checked",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.defaultChecked",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.defaultValue",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.dirName",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.files",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.form",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formAction",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formEnctype",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formMethod",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formNoValidate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.formTarget",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.height",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.indeterminate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.list",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.max",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.maxLength",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.min",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.minLength",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.multiple",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.name",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.pattern",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.placeholder",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.readOnly",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.required",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.select",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.selectionDirection",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.selectionEnd",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.selectionStart",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.setSelectionRange",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.size",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.src",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.step",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.stepDown",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.stepUp",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.type",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.value",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.valueAsDate",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.valueAsNumber",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.webkitdirectory",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.webkitEntries",
        "result": false
      },
      {
        "name": "api.HTMLInputElement.width",
        "result": true
      },
      {
        "name": "api.HTMLInputElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement.control",
        "result": false
      },
      {
        "name": "api.HTMLLabelElement.form",
        "result": true
      },
      {
        "name": "api.HTMLLabelElement.htmlFor",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement.align",
        "result": true
      },
      {
        "name": "api.HTMLLegendElement.form",
        "result": true
      },
      {
        "name": "api.HTMLLIElement",
        "result": true
      },
      {
        "name": "api.HTMLLIElement.type",
        "result": true
      },
      {
        "name": "api.HTMLLIElement.value",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.as",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.href",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.hreflang",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.imageSizes",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.imageSrcset",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.media",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.rel",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.relList",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.rev",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.sheet",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLLinkElement.target",
        "result": true
      },
      {
        "name": "api.HTMLLinkElement.type",
        "result": true
      },
      {
        "name": "api.HTMLMapElement",
        "result": true
      },
      {
        "name": "api.HTMLMapElement.areas",
        "result": true
      },
      {
        "name": "api.HTMLMapElement.name",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.behavior",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.direction",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.height",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.loop",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onbounce",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onfinish",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.onstart",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.scrollAmount",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.scrollDelay",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.start",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.stop",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.trueSpeed",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLMarqueeElement.width",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.addTextTrack",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.audioTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.autoplay",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.buffered",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.canPlayType",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.captureStream",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.controls",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.currentSrc",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.currentTime",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.defaultMuted",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.defaultPlaybackRate",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.disableRemotePlayback",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.duration",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.ended",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.error",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.fastSeek",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.getStartDate",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.HAVE_CURRENT_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_ENOUGH_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_FUTURE_DATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_METADATA",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.HAVE_NOTHING",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.load",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.loop",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.mediaKeys",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.muted",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_EMPTY",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_IDLE",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_LOADING",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.NETWORK_NO_SOURCE",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.networkState",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.onencrypted",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.onwaitingforkey",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.pause",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.paused",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.play",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.playbackRate",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.played",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.preload",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.readyState",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.remote",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.seekable",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.seeking",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.setMediaKeys",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.setSinkId",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.sinkId",
        "result": false
      },
      {
        "name": "api.HTMLMediaElement.src",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.srcObject",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.textTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.videoTracks",
        "result": true
      },
      {
        "name": "api.HTMLMediaElement.volume",
        "result": true
      },
      {
        "name": "api.HTMLMenuElement",
        "result": true
      },
      {
        "name": "api.HTMLMenuElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.content",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.httpEquiv",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.name",
        "result": true
      },
      {
        "name": "api.HTMLMetaElement.scheme",
        "result": true
      },
      {
        "name": "api.HTMLMeterElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.high",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.labels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.low",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.optimum",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLMeterElement' is undefined",
        "name": "api.HTMLMeterElement.value",
        "result": null
      },
      {
        "name": "api.HTMLModElement",
        "result": true
      },
      {
        "name": "api.HTMLModElement.cite",
        "result": true
      },
      {
        "name": "api.HTMLModElement.dateTime",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.align",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.archive",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.border",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.code",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.codeBase",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.codeType",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.contentDocument",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.contentWindow",
        "result": false
      },
      {
        "name": "api.HTMLObjectElement.data",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.declare",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.form",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.getSVGDocument",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.height",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.hspace",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.name",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLObjectElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.standby",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.type",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.useMap",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.vspace",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.width",
        "result": true
      },
      {
        "name": "api.HTMLObjectElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLOListElement",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.reversed",
        "result": false
      },
      {
        "name": "api.HTMLOListElement.start",
        "result": true
      },
      {
        "name": "api.HTMLOListElement.type",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLOptGroupElement.label",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.defaultSelected",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.form",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.index",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.label",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.selected",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.text",
        "result": true
      },
      {
        "name": "api.HTMLOptionElement.value",
        "result": true
      },
      {
        "name": "api.HTMLOptionsCollection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.add",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.length",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.remove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOptionsCollection' is undefined",
        "name": "api.HTMLOptionsCollection.selectedIndex",
        "result": null
      },
      {
        "name": "api.HTMLOutputElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.checkValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.defaultValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.form",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.htmlFor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.labels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.reportValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.setCustomValidity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.validationMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.validity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.value",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLOutputElement' is undefined",
        "name": "api.HTMLOutputElement.willValidate",
        "result": null
      },
      {
        "name": "api.HTMLParagraphElement",
        "result": true
      },
      {
        "name": "api.HTMLParagraphElement.align",
        "result": true
      },
      {
        "name": "api.HTMLParamElement",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.name",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.type",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.value",
        "result": true
      },
      {
        "name": "api.HTMLParamElement.valueType",
        "result": true
      },
      {
        "name": "api.HTMLPictureElement",
        "result": false
      },
      {
        "name": "api.HTMLPreElement",
        "result": true
      },
      {
        "name": "api.HTMLPreElement.width",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLProgressElement.max",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.position",
        "result": true
      },
      {
        "name": "api.HTMLProgressElement.value",
        "result": true
      },
      {
        "name": "api.HTMLQuoteElement",
        "result": true
      },
      {
        "name": "api.HTMLQuoteElement.cite",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.async",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.charset",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.defer",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.event",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.htmlFor",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.integrity",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.noModule",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.HTMLScriptElement.src",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.text",
        "result": true
      },
      {
        "name": "api.HTMLScriptElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.add",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.autocomplete",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.form",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.item",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.length",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.multiple",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.name",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.namedItem",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.options",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.remove",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.remove",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLSelectElement.required",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.selectedIndex",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.selectedOptions",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.size",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.value",
        "result": true
      },
      {
        "name": "api.HTMLSelectElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLSlotElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.assignedElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.assignedNodes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'HTMLSlotElement' is undefined",
        "name": "api.HTMLSlotElement.name",
        "result": null
      },
      {
        "name": "api.HTMLSourceElement",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.media",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.sizes",
        "result": false
      },
      {
        "name": "api.HTMLSourceElement.src",
        "result": true
      },
      {
        "name": "api.HTMLSourceElement.srcset",
        "result": false
      },
      {
        "name": "api.HTMLSourceElement.type",
        "result": true
      },
      {
        "name": "api.HTMLSpanElement",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.media",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.sheet",
        "result": true
      },
      {
        "name": "api.HTMLStyleElement.type",
        "result": true
      },
      {
        "name": "api.HTMLTableCaptionElement",
        "result": true
      },
      {
        "name": "api.HTMLTableCaptionElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.abbr",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.axis",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.cellIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.colSpan",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.headers",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.height",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.noWrap",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.rowSpan",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.scope",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableCellElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.span",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableColElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableElement",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.border",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.caption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.cellPadding",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.cellSpacing",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createCaption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTBody",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.createTHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteCaption",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteRow",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteTFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.deleteTHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.frame",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.insertRow",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.rules",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.summary",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tBodies",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tFoot",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.tHead",
        "result": true
      },
      {
        "name": "api.HTMLTableElement.width",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.bgColor",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.cells",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.deleteCell",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.insertCell",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.rowIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.sectionRowIndex",
        "result": true
      },
      {
        "name": "api.HTMLTableRowElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.align",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.ch",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.chOff",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.deleteRow",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.insertRow",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTableSectionElement.vAlign",
        "result": true
      },
      {
        "name": "api.HTMLTemplateElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLTemplateElement' is undefined",
        "name": "api.HTMLTemplateElement.content",
        "result": null
      },
      {
        "name": "api.HTMLTextAreaElement",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.autocomplete",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.autofocus",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.checkValidity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.cols",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.defaultValue",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.dirName",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.disabled",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.form",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.labels",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.maxLength",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.minLength",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.name",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.placeholder",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.readOnly",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.reportValidity",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.required",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.rows",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.select",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.selectionDirection",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.selectionEnd",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.selectionStart",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.setCustomValidity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.setRangeText",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.setSelectionRange",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.textLength",
        "result": false
      },
      {
        "name": "api.HTMLTextAreaElement.type",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.validationMessage",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.validity",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.value",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.willValidate",
        "result": true
      },
      {
        "name": "api.HTMLTextAreaElement.wrap",
        "result": true
      },
      {
        "name": "api.HTMLTimeElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'HTMLTimeElement' is undefined",
        "name": "api.HTMLTimeElement.dateTime",
        "result": null
      },
      {
        "name": "api.HTMLTitleElement",
        "result": true
      },
      {
        "name": "api.HTMLTitleElement.text",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.default",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.ERROR",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.kind",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.label",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.LOADED",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.LOADING",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.NONE",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.readyState",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.src",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.srclang",
        "result": true
      },
      {
        "name": "api.HTMLTrackElement.track",
        "result": true
      },
      {
        "name": "api.HTMLUListElement",
        "result": true
      },
      {
        "name": "api.HTMLUListElement.compact",
        "result": true
      },
      {
        "name": "api.HTMLUListElement.type",
        "result": true
      },
      {
        "name": "api.HTMLUnknownElement",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.autoPictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.disablePictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.height",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.onenterpictureinpicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.onleavepictureinpicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.playsInline",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.poster",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.requestPictureInPicture",
        "result": false
      },
      {
        "name": "api.HTMLVideoElement.videoHeight",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.videoWidth",
        "result": true
      },
      {
        "name": "api.HTMLVideoElement.width",
        "result": true
      },
      {
        "name": "api.IDBCursor",
        "result": true
      },
      {
        "name": "api.IDBCursor.advance",
        "result": true
      },
      {
        "name": "api.IDBCursor.continue",
        "result": true
      },
      {
        "name": "api.IDBCursor.continuePrimaryKey",
        "result": false
      },
      {
        "name": "api.IDBCursor.delete",
        "result": true
      },
      {
        "name": "api.IDBCursor.direction",
        "result": true
      },
      {
        "name": "api.IDBCursor.key",
        "result": true
      },
      {
        "name": "api.IDBCursor.primaryKey",
        "result": true
      },
      {
        "name": "api.IDBCursor.request",
        "result": false
      },
      {
        "name": "api.IDBCursor.source",
        "result": true
      },
      {
        "name": "api.IDBCursor.update",
        "result": true
      },
      {
        "name": "api.IDBCursorWithValue",
        "result": true
      },
      {
        "name": "api.IDBCursorWithValue.value",
        "result": true
      },
      {
        "name": "api.IDBDatabase",
        "result": true
      },
      {
        "name": "api.IDBDatabase.close",
        "result": true
      },
      {
        "name": "api.IDBDatabase.createObjectStore",
        "result": true
      },
      {
        "name": "api.IDBDatabase.deleteObjectStore",
        "result": true
      },
      {
        "name": "api.IDBDatabase.name",
        "result": true
      },
      {
        "name": "api.IDBDatabase.objectStoreNames",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onabort",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onclose",
        "result": false
      },
      {
        "name": "api.IDBDatabase.onerror",
        "result": true
      },
      {
        "name": "api.IDBDatabase.onversionchange",
        "result": false
      },
      {
        "name": "api.IDBDatabase.transaction",
        "result": true
      },
      {
        "name": "api.IDBDatabase.version",
        "result": true
      },
      {
        "name": "api.IDBFactory",
        "result": true
      },
      {
        "name": "api.IDBFactory.cmp",
        "result": true
      },
      {
        "name": "api.IDBFactory.databases",
        "result": false
      },
      {
        "name": "api.IDBFactory.deleteDatabase",
        "result": true
      },
      {
        "name": "api.IDBFactory.open",
        "result": true
      },
      {
        "name": "api.IDBIndex",
        "result": true
      },
      {
        "name": "api.IDBIndex.count",
        "result": true
      },
      {
        "name": "api.IDBIndex.get",
        "result": true
      },
      {
        "name": "api.IDBIndex.getAll",
        "result": false
      },
      {
        "name": "api.IDBIndex.getAllKeys",
        "result": false
      },
      {
        "name": "api.IDBIndex.getKey",
        "result": true
      },
      {
        "name": "api.IDBIndex.keyPath",
        "result": true
      },
      {
        "name": "api.IDBIndex.multiEntry",
        "result": false
      },
      {
        "name": "api.IDBIndex.name",
        "result": true
      },
      {
        "name": "api.IDBIndex.objectStore",
        "result": true
      },
      {
        "name": "api.IDBIndex.openCursor",
        "result": true
      },
      {
        "name": "api.IDBIndex.openKeyCursor",
        "result": true
      },
      {
        "name": "api.IDBIndex.unique",
        "result": true
      },
      {
        "name": "api.IDBKeyRange",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.bound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.includes",
        "result": false
      },
      {
        "name": "api.IDBKeyRange.lower",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.lowerBound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.lowerOpen",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.only",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upper",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upperBound",
        "result": true
      },
      {
        "name": "api.IDBKeyRange.upperOpen",
        "result": true
      },
      {
        "name": "api.IDBObjectStore",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.add",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.autoIncrement",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.clear",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.count",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.createIndex",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.delete",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.deleteIndex",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.get",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.getAll",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.getAllKeys",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.getKey",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.index",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.indexNames",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.keyPath",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.name",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.openCursor",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.openKeyCursor",
        "result": false
      },
      {
        "name": "api.IDBObjectStore.put",
        "result": true
      },
      {
        "name": "api.IDBObjectStore.transaction",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest.onblocked",
        "result": true
      },
      {
        "name": "api.IDBOpenDBRequest.onupgradeneeded",
        "result": true
      },
      {
        "name": "api.IDBRequest",
        "result": true
      },
      {
        "name": "api.IDBRequest.error",
        "result": true
      },
      {
        "name": "api.IDBRequest.onerror",
        "result": true
      },
      {
        "name": "api.IDBRequest.onsuccess",
        "result": true
      },
      {
        "name": "api.IDBRequest.readyState",
        "result": true
      },
      {
        "name": "api.IDBRequest.result",
        "result": true
      },
      {
        "name": "api.IDBRequest.source",
        "result": true
      },
      {
        "name": "api.IDBRequest.transaction",
        "result": true
      },
      {
        "name": "api.IDBTransaction",
        "result": true
      },
      {
        "name": "api.IDBTransaction.abort",
        "result": true
      },
      {
        "name": "api.IDBTransaction.commit",
        "result": false
      },
      {
        "name": "api.IDBTransaction.db",
        "result": true
      },
      {
        "name": "api.IDBTransaction.error",
        "result": true
      },
      {
        "name": "api.IDBTransaction.mode",
        "result": true
      },
      {
        "name": "api.IDBTransaction.objectStore",
        "result": true
      },
      {
        "name": "api.IDBTransaction.objectStoreNames",
        "result": false
      },
      {
        "name": "api.IDBTransaction.onabort",
        "result": true
      },
      {
        "name": "api.IDBTransaction.oncomplete",
        "result": true
      },
      {
        "name": "api.IDBTransaction.onerror",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent.newVersion",
        "result": true
      },
      {
        "name": "api.IDBVersionChangeEvent.oldVersion",
        "result": true
      },
      {
        "name": "api.IdleDeadline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IdleDeadline' is undefined",
        "name": "api.IdleDeadline.didTimeout",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IdleDeadline' is undefined",
        "name": "api.IdleDeadline.timeRemaining",
        "result": null
      },
      {
        "name": "api.IIRFilterNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IIRFilterNode' is undefined",
        "name": "api.IIRFilterNode.getFrequencyResponse",
        "result": null
      },
      {
        "name": "api.ImageBitmap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmap' is undefined",
        "name": "api.ImageBitmap.width",
        "result": null
      },
      {
        "name": "api.ImageBitmapRenderingContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageBitmapRenderingContext' is undefined",
        "name": "api.ImageBitmapRenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageBitmapRenderingContext' is undefined",
        "name": "api.ImageBitmapRenderingContext.transferFromImageBitmap",
        "result": null
      },
      {
        "name": "api.ImageCapture",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.getPhotoCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.getPhotoSettings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.grabFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.takePhoto",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ImageCapture' is undefined",
        "name": "api.ImageCapture.track",
        "result": null
      },
      {
        "name": "api.ImageData",
        "result": true
      },
      {
        "name": "api.ImageData.data",
        "result": true
      },
      {
        "name": "api.ImageData.height",
        "result": true
      },
      {
        "name": "api.ImageData.width",
        "result": true
      },
      {
        "name": "api.InputDeviceCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputDeviceCapabilities' is undefined",
        "name": "api.InputDeviceCapabilities.firesTouchEvents",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputDeviceCapabilities' is undefined",
        "name": "api.InputDeviceCapabilities.pointerMovementScrolls",
        "result": null
      },
      {
        "name": "api.InputDeviceInfo",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputDeviceInfo' is undefined",
        "name": "api.InputDeviceInfo.getCapabilities",
        "result": null
      },
      {
        "name": "api.InputEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.dataTransfer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.getTargetRanges",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.inputType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InputEvent' is undefined",
        "name": "api.InputEvent.isComposing",
        "result": null
      },
      {
        "name": "api.IntersectionObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.root",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.rootMargin",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.takeRecords",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.thresholds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserver' is undefined",
        "name": "api.IntersectionObserver.unobserve",
        "result": null
      },
      {
        "name": "api.IntersectionObserverEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.boundingClientRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.intersectionRatio",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.intersectionRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.isIntersecting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.rootBounds",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.target",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'IntersectionObserverEntry' is undefined",
        "name": "api.IntersectionObserverEntry.time",
        "result": null
      },
      {
        "name": "api.InterventionReportBody",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'InterventionReportBody' is undefined",
        "name": "api.InterventionReportBody.sourceFile",
        "result": null
      },
      {
        "name": "api.Keyboard",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.getLayoutMap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.lock",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Keyboard' is undefined",
        "name": "api.Keyboard.unlock",
        "result": null
      },
      {
        "name": "api.KeyboardEvent",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.altKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.charCode",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.code",
        "result": false
      },
      {
        "name": "api.KeyboardEvent.ctrlKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_LEFT",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_RIGHT",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.DOM_KEY_LOCATION_STANDARD",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.getModifierState",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.isComposing",
        "result": false
      },
      {
        "name": "api.KeyboardEvent.key",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.keyCode",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.location",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.metaKey",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.repeat",
        "result": true
      },
      {
        "name": "api.KeyboardEvent.shiftKey",
        "result": true
      },
      {
        "name": "api.KeyboardLayoutMap",
        "result": false
      },
      {
        "name": "api.KeyframeEffect",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.composite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.getKeyframes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.iterationComposite",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.setKeyframes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'KeyframeEffect' is undefined",
        "name": "api.KeyframeEffect.target",
        "result": null
      },
      {
        "name": "api.LinearAccelerationSensor",
        "result": false
      },
      {
        "name": "api.Location",
        "result": true
      },
      {
        "name": "api.Location.ancestorOrigins",
        "result": false
      },
      {
        "name": "api.Location.assign",
        "result": true
      },
      {
        "name": "api.Location.hash",
        "result": true
      },
      {
        "name": "api.Location.host",
        "result": true
      },
      {
        "name": "api.Location.hostname",
        "result": true
      },
      {
        "name": "api.Location.href",
        "result": true
      },
      {
        "name": "api.Location.origin",
        "result": true
      },
      {
        "name": "api.Location.pathname",
        "result": true
      },
      {
        "name": "api.Location.port",
        "result": true
      },
      {
        "name": "api.Location.protocol",
        "result": true
      },
      {
        "name": "api.Location.reload",
        "result": true
      },
      {
        "name": "api.Location.replace",
        "result": true
      },
      {
        "name": "api.Location.search",
        "result": true
      },
      {
        "name": "api.Magnetometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Magnetometer' is undefined",
        "name": "api.Magnetometer.z",
        "result": null
      },
      {
        "name": "api.MediaCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaCapabilities' is undefined",
        "name": "api.MediaCapabilities.decodingInfo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaCapabilities' is undefined",
        "name": "api.MediaCapabilities.encodingInfo",
        "result": null
      },
      {
        "name": "api.MediaDeviceInfo",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.deviceId",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.groupId",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.kind",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.label",
        "result": true
      },
      {
        "name": "api.MediaDeviceInfo.toJSON",
        "result": false
      },
      {
        "name": "api.MediaDevices",
        "result": true
      },
      {
        "name": "api.MediaDevices.enumerateDevices",
        "result": true
      },
      {
        "name": "api.MediaDevices.getDisplayMedia",
        "result": false
      },
      {
        "name": "api.MediaDevices.getSupportedConstraints",
        "result": true
      },
      {
        "name": "api.MediaDevices.getUserMedia",
        "result": true
      },
      {
        "name": "api.MediaDevices.ondevicechange",
        "result": true
      },
      {
        "name": "api.MediaElementAudioSourceNode",
        "result": true
      },
      {
        "name": "api.MediaElementAudioSourceNode.mediaElement",
        "result": false
      },
      {
        "name": "api.MediaEncryptedEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaEncryptedEvent' is undefined",
        "name": "api.MediaEncryptedEvent.initData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaEncryptedEvent' is undefined",
        "name": "api.MediaEncryptedEvent.initDataType",
        "result": null
      },
      {
        "name": "api.MediaError",
        "result": true
      },
      {
        "name": "api.MediaError.code",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_ABORTED",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_DECODE",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_NETWORK",
        "result": true
      },
      {
        "name": "api.MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED",
        "result": true
      },
      {
        "name": "api.MediaError.message",
        "result": false
      },
      {
        "name": "api.MediaKeyMessageEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeyMessageEvent' is undefined",
        "name": "api.MediaKeyMessageEvent.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyMessageEvent' is undefined",
        "name": "api.MediaKeyMessageEvent.messageType",
        "result": null
      },
      {
        "name": "api.MediaKeys",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeys' is undefined",
        "name": "api.MediaKeys.createSession",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeys' is undefined",
        "name": "api.MediaKeys.setServerCertificate",
        "result": null
      },
      {
        "name": "api.MediaKeySession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.closed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.expiration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.generateRequest",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.keyStatuses",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.load",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.onkeystatuseschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.remove",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.sessionId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySession' is undefined",
        "name": "api.MediaKeySession.update",
        "result": null
      },
      {
        "name": "api.MediaKeyStatusMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeyStatusMap' is undefined",
        "name": "api.MediaKeyStatusMap.size",
        "result": null
      },
      {
        "name": "api.MediaKeySystemAccess",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.createMediaKeys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.getConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaKeySystemAccess' is undefined",
        "name": "api.MediaKeySystemAccess.keySystem",
        "result": null
      },
      {
        "name": "api.MediaList",
        "result": true
      },
      {
        "name": "api.MediaList.appendMedium",
        "result": true
      },
      {
        "name": "api.MediaList.deleteMedium",
        "result": true
      },
      {
        "name": "api.MediaList.item",
        "result": true
      },
      {
        "name": "api.MediaList.length",
        "result": true
      },
      {
        "name": "api.MediaList.mediaText",
        "result": true
      },
      {
        "name": "api.MediaMetadata",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.album",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.artist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.artwork",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaMetadata' is undefined",
        "name": "api.MediaMetadata.title",
        "result": null
      },
      {
        "name": "api.MediaQueryList",
        "result": true
      },
      {
        "name": "api.MediaQueryList.addListener",
        "result": true
      },
      {
        "name": "api.MediaQueryList.matches",
        "result": true
      },
      {
        "name": "api.MediaQueryList.media",
        "result": true
      },
      {
        "name": "api.MediaQueryList.onchange",
        "result": false
      },
      {
        "name": "api.MediaQueryList.removeListener",
        "result": true
      },
      {
        "name": "api.MediaQueryListEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaQueryListEvent' is undefined",
        "name": "api.MediaQueryListEvent.matches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaQueryListEvent' is undefined",
        "name": "api.MediaQueryListEvent.media",
        "result": null
      },
      {
        "name": "api.MediaRecorder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.audioBitsPerSecond",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.isTypeSupported",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.mimeType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.ondataavailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onpause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onresume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.onstop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.requestData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.resume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.stream",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaRecorder' is undefined",
        "name": "api.MediaRecorder.videoBitsPerSecond",
        "result": null
      },
      {
        "name": "api.MediaRecorderErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaRecorderErrorEvent' is undefined",
        "name": "api.MediaRecorderErrorEvent.error",
        "result": null
      },
      {
        "name": "api.MediaSession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.metadata",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.playbackState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.setActionHandler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSession' is undefined",
        "name": "api.MediaSession.setPositionState",
        "result": null
      },
      {
        "name": "api.MediaSettingsRange",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.min",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MediaSettingsRange' is undefined",
        "name": "api.MediaSettingsRange.step",
        "result": null
      },
      {
        "name": "api.MediaSource",
        "result": true
      },
      {
        "name": "api.MediaSource.activeSourceBuffers",
        "result": true
      },
      {
        "name": "api.MediaSource.addSourceBuffer",
        "result": true
      },
      {
        "name": "api.MediaSource.clearLiveSeekableRange",
        "result": false
      },
      {
        "name": "api.MediaSource.duration",
        "result": true
      },
      {
        "name": "api.MediaSource.endOfStream",
        "result": true
      },
      {
        "name": "api.MediaSource.isTypeSupported",
        "result": true
      },
      {
        "name": "api.MediaSource.onsourceclose",
        "result": false
      },
      {
        "name": "api.MediaSource.onsourceended",
        "result": false
      },
      {
        "name": "api.MediaSource.onsourceopen",
        "result": false
      },
      {
        "name": "api.MediaSource.readyState",
        "result": true
      },
      {
        "name": "api.MediaSource.removeSourceBuffer",
        "result": true
      },
      {
        "name": "api.MediaSource.setLiveSeekableRange",
        "result": false
      },
      {
        "name": "api.MediaSource.sourceBuffers",
        "result": true
      },
      {
        "name": "api.MediaStream",
        "result": true
      },
      {
        "name": "api.MediaStream.active",
        "result": true
      },
      {
        "name": "api.MediaStream.addTrack",
        "result": true
      },
      {
        "name": "api.MediaStream.clone",
        "result": true
      },
      {
        "name": "api.MediaStream.getAudioTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.getTrackById",
        "result": true
      },
      {
        "name": "api.MediaStream.getTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.getVideoTracks",
        "result": true
      },
      {
        "name": "api.MediaStream.id",
        "result": true
      },
      {
        "name": "api.MediaStream.onaddtrack",
        "result": true
      },
      {
        "name": "api.MediaStream.onremovetrack",
        "result": true
      },
      {
        "name": "api.MediaStream.removeTrack",
        "result": true
      },
      {
        "name": "api.MediaStreamAudioDestinationNode",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MediaStreamAudioDestinationNode' is undefined",
        "name": "api.MediaStreamAudioDestinationNode.stream",
        "result": null
      },
      {
        "name": "api.MediaStreamAudioSourceNode",
        "result": true
      },
      {
        "name": "api.MediaStreamAudioSourceNode.mediaStream",
        "result": false
      },
      {
        "name": "api.MediaStreamTrack",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.applyConstraints",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.clone",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.contentHint",
        "result": false
      },
      {
        "name": "api.MediaStreamTrack.enabled",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getCapabilities",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getConstraints",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.getSettings",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.id",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.kind",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.label",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.muted",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onended",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onmute",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.onunmute",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.readyState",
        "result": true
      },
      {
        "name": "api.MediaStreamTrack.stop",
        "result": true
      },
      {
        "name": "api.MediaStreamTrackAudioSourceNode",
        "result": false
      },
      {
        "name": "api.MediaStreamTrackEvent",
        "result": true
      },
      {
        "name": "api.MediaStreamTrackEvent.track",
        "result": true
      },
      {
        "name": "api.MerchantValidationEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.complete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.methodName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MerchantValidationEvent' is undefined",
        "name": "api.MerchantValidationEvent.validationURL",
        "result": null
      },
      {
        "name": "api.MessageChannel",
        "result": true
      },
      {
        "name": "api.MessageChannel.port1",
        "result": true
      },
      {
        "name": "api.MessageChannel.port2",
        "result": true
      },
      {
        "name": "api.MessageEvent",
        "result": true
      },
      {
        "name": "api.MessageEvent.data",
        "result": true
      },
      {
        "name": "api.MessageEvent.initMessageEvent",
        "result": true
      },
      {
        "name": "api.MessageEvent.lastEventId",
        "result": false
      },
      {
        "name": "api.MessageEvent.origin",
        "result": true
      },
      {
        "name": "api.MessageEvent.ports",
        "result": true
      },
      {
        "name": "api.MessageEvent.source",
        "result": true
      },
      {
        "name": "api.MessagePort",
        "result": true
      },
      {
        "name": "api.MessagePort.close",
        "result": true
      },
      {
        "name": "api.MessagePort.onmessage",
        "result": true
      },
      {
        "name": "api.MessagePort.onmessageerror",
        "result": false
      },
      {
        "name": "api.MessagePort.postMessage",
        "result": true
      },
      {
        "name": "api.MessagePort.postMessage",
        "result": true
      },
      {
        "name": "api.MessagePort.start",
        "result": true
      },
      {
        "name": "api.MIDIAccess",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.inputs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.outputs",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIAccess' is undefined",
        "name": "api.MIDIAccess.sysexEnabled",
        "result": null
      },
      {
        "name": "api.MIDIConnectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIConnectionEvent' is undefined",
        "name": "api.MIDIConnectionEvent.port",
        "result": null
      },
      {
        "name": "api.MIDIInput",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIInput' is undefined",
        "name": "api.MIDIInput.onmidimessage",
        "result": null
      },
      {
        "name": "api.MIDIInputMap",
        "result": false
      },
      {
        "name": "api.MIDIMessageEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIMessageEvent' is undefined",
        "name": "api.MIDIMessageEvent.data",
        "result": null
      },
      {
        "name": "api.MIDIOutput",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIOutput' is undefined",
        "name": "api.MIDIOutput.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIOutput' is undefined",
        "name": "api.MIDIOutput.send",
        "result": null
      },
      {
        "name": "api.MIDIOutputMap",
        "result": false
      },
      {
        "name": "api.MIDIPort",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.connection",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.manufacturer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'MIDIPort' is undefined",
        "name": "api.MIDIPort.version",
        "result": null
      },
      {
        "name": "api.MimeType",
        "result": true
      },
      {
        "name": "api.MimeType.description",
        "result": true
      },
      {
        "name": "api.MimeType.enabledPlugin",
        "result": true
      },
      {
        "name": "api.MimeType.suffixes",
        "result": true
      },
      {
        "name": "api.MimeType.type",
        "result": true
      },
      {
        "name": "api.MimeTypeArray",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.item",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.length",
        "result": true
      },
      {
        "name": "api.MimeTypeArray.namedItem",
        "result": true
      },
      {
        "name": "api.MouseEvent",
        "result": true
      },
      {
        "name": "api.MouseEvent.altKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.button",
        "result": true
      },
      {
        "name": "api.MouseEvent.buttons",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientX",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientX",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientY",
        "result": true
      },
      {
        "name": "api.MouseEvent.clientY",
        "result": true
      },
      {
        "name": "api.MouseEvent.ctrlKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.getModifierState",
        "result": true
      },
      {
        "name": "api.MouseEvent.metaKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.movementX",
        "result": false
      },
      {
        "name": "api.MouseEvent.movementY",
        "result": false
      },
      {
        "name": "api.MouseEvent.offsetX",
        "result": true
      },
      {
        "name": "api.MouseEvent.offsetY",
        "result": true
      },
      {
        "name": "api.MouseEvent.pageX",
        "result": true
      },
      {
        "name": "api.MouseEvent.pageY",
        "result": true
      },
      {
        "name": "api.MouseEvent.relatedTarget",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenX",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenX",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenY",
        "result": true
      },
      {
        "name": "api.MouseEvent.screenY",
        "result": true
      },
      {
        "name": "api.MouseEvent.shiftKey",
        "result": true
      },
      {
        "name": "api.MouseEvent.x",
        "result": true
      },
      {
        "name": "api.MouseEvent.y",
        "result": true
      },
      {
        "name": "api.MutationObserver",
        "result": true
      },
      {
        "name": "api.MutationObserver.disconnect",
        "result": true
      },
      {
        "name": "api.MutationObserver.observe",
        "result": true
      },
      {
        "name": "api.MutationObserver.takeRecords",
        "result": true
      },
      {
        "name": "api.MutationRecord",
        "result": true
      },
      {
        "name": "api.MutationRecord.addedNodes",
        "result": true
      },
      {
        "name": "api.MutationRecord.attributeName",
        "result": true
      },
      {
        "name": "api.MutationRecord.attributeNamespace",
        "result": true
      },
      {
        "name": "api.MutationRecord.nextSibling",
        "result": true
      },
      {
        "name": "api.MutationRecord.oldValue",
        "result": true
      },
      {
        "name": "api.MutationRecord.previousSibling",
        "result": true
      },
      {
        "name": "api.MutationRecord.removedNodes",
        "result": true
      },
      {
        "name": "api.MutationRecord.target",
        "result": true
      },
      {
        "name": "api.MutationRecord.type",
        "result": true
      },
      {
        "name": "api.NamedFlow",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.firstEmptyRegionIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getContent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getRegions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.getRegionsByContent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlow' is undefined",
        "name": "api.NamedFlow.overset",
        "result": null
      },
      {
        "name": "api.NamedFlowMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NamedFlowMap' is undefined",
        "name": "api.NamedFlowMap.set",
        "result": null
      },
      {
        "name": "api.NamedNodeMap",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.getNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.getNamedItemNS",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.item",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.length",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.removeNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.removeNamedItemNS",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.setNamedItem",
        "result": true
      },
      {
        "name": "api.NamedNodeMap.setNamedItemNS",
        "result": true
      },
      {
        "name": "api.NavigationPreloadManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.disable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.enable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.getState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NavigationPreloadManager' is undefined",
        "name": "api.NavigationPreloadManager.setHeaderValue",
        "result": null
      },
      {
        "name": "api.Navigator",
        "result": true
      },
      {
        "name": "api.Navigator.appCodeName",
        "result": true
      },
      {
        "name": "api.Navigator.appName",
        "result": true
      },
      {
        "name": "api.Navigator.appVersion",
        "result": true
      },
      {
        "name": "api.Navigator.bluetooth",
        "result": false
      },
      {
        "name": "api.Navigator.clipboard",
        "result": false
      },
      {
        "name": "api.Navigator.connection",
        "result": false
      },
      {
        "name": "api.Navigator.cookieEnabled",
        "result": true
      },
      {
        "name": "api.Navigator.credentials",
        "result": false
      },
      {
        "name": "api.Navigator.geolocation",
        "result": true
      },
      {
        "name": "api.Navigator.getBattery",
        "result": false
      },
      {
        "name": "api.Navigator.getGamepads",
        "result": true
      },
      {
        "name": "api.Navigator.getUserMedia",
        "result": true
      },
      {
        "name": "api.Navigator.hardwareConcurrency",
        "result": false
      },
      {
        "name": "api.Navigator.javaEnabled",
        "result": true
      },
      {
        "name": "api.Navigator.keyboard",
        "result": false
      },
      {
        "name": "api.Navigator.keyboard",
        "result": false
      },
      {
        "name": "api.Navigator.language",
        "result": true
      },
      {
        "name": "api.Navigator.languages",
        "result": false
      },
      {
        "name": "api.Navigator.maxTouchPoints",
        "result": true
      },
      {
        "name": "api.Navigator.mediaCapabilities",
        "result": false
      },
      {
        "name": "api.Navigator.mediaDevices",
        "result": true
      },
      {
        "name": "api.Navigator.mediaSession",
        "result": false
      },
      {
        "name": "api.Navigator.mimeTypes",
        "result": true
      },
      {
        "name": "api.Navigator.onLine",
        "result": true
      },
      {
        "name": "api.Navigator.oscpu",
        "result": false
      },
      {
        "name": "api.Navigator.permissions",
        "result": false
      },
      {
        "name": "api.Navigator.platform",
        "result": true
      },
      {
        "name": "api.Navigator.plugins",
        "result": true
      },
      {
        "name": "api.Navigator.presentation",
        "result": false
      },
      {
        "name": "api.Navigator.product",
        "result": true
      },
      {
        "name": "api.Navigator.productSub",
        "result": true
      },
      {
        "name": "api.Navigator.registerProtocolHandler",
        "result": false
      },
      {
        "name": "api.Navigator.requestMediaKeySystemAccess",
        "result": false
      },
      {
        "name": "api.Navigator.requestMIDIAccess",
        "result": false
      },
      {
        "name": "api.Navigator.sendBeacon",
        "result": false
      },
      {
        "name": "api.Navigator.serviceWorker",
        "result": false
      },
      {
        "name": "api.Navigator.share",
        "result": false
      },
      {
        "name": "api.Navigator.storage",
        "result": false
      },
      {
        "name": "api.Navigator.taintEnabled",
        "result": false
      },
      {
        "name": "api.Navigator.unregisterProtocolHandler",
        "result": false
      },
      {
        "name": "api.Navigator.usb",
        "result": false
      },
      {
        "name": "api.Navigator.userAgent",
        "result": true
      },
      {
        "name": "api.Navigator.vendor",
        "result": true
      },
      {
        "name": "api.Navigator.vendorSub",
        "result": true
      },
      {
        "name": "api.Navigator.vibrate",
        "result": false
      },
      {
        "name": "api.Navigator.webdriver",
        "result": true
      },
      {
        "name": "api.Navigator.xr",
        "result": false
      },
      {
        "name": "api.NetworkInformation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.downlink",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.downlinkMax",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.effectiveType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.rtt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.saveData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NetworkInformation' is undefined",
        "name": "api.NetworkInformation.type",
        "result": null
      },
      {
        "name": "api.NFCErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCErrorEvent' is undefined",
        "name": "api.NFCErrorEvent.error",
        "result": null
      },
      {
        "name": "api.NFCReader",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.onreading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'NFCReader' is undefined",
        "name": "api.NFCReader.stop",
        "result": null
      },
      {
        "name": "api.NFCReadingEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCReadingEvent' is undefined",
        "name": "api.NFCReadingEvent.message",
        "result": null
      },
      {
        "name": "api.NFCWriter",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'NFCWriter' is undefined",
        "name": "api.NFCWriter.push",
        "result": null
      },
      {
        "name": "api.Node",
        "result": true
      },
      {
        "name": "api.Node.appendChild",
        "result": true
      },
      {
        "name": "api.Node.ATTRIBUTE_NODE",
        "result": true
      },
      {
        "name": "api.Node.baseURI",
        "result": true
      },
      {
        "name": "api.Node.CDATA_SECTION_NODE",
        "result": true
      },
      {
        "name": "api.Node.childNodes",
        "result": true
      },
      {
        "name": "api.Node.cloneNode",
        "result": true
      },
      {
        "name": "api.Node.COMMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.compareDocumentPosition",
        "result": true
      },
      {
        "name": "api.Node.contains",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_FRAGMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_CONTAINED_BY",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_CONTAINS",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_DISCONNECTED",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_FOLLOWING",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_POSITION_PRECEDING",
        "result": true
      },
      {
        "name": "api.Node.DOCUMENT_TYPE_NODE",
        "result": true
      },
      {
        "name": "api.Node.ELEMENT_NODE",
        "result": true
      },
      {
        "name": "api.Node.ENTITY_NODE",
        "result": true
      },
      {
        "name": "api.Node.ENTITY_REFERENCE_NODE",
        "result": true
      },
      {
        "name": "api.Node.firstChild",
        "result": true
      },
      {
        "name": "api.Node.getRootNode",
        "result": false
      },
      {
        "name": "api.Node.hasChildNodes",
        "result": true
      },
      {
        "name": "api.Node.insertBefore",
        "result": true
      },
      {
        "name": "api.Node.isConnected",
        "result": false
      },
      {
        "name": "api.Node.isDefaultNamespace",
        "result": true
      },
      {
        "name": "api.Node.isEqualNode",
        "result": true
      },
      {
        "name": "api.Node.isSameNode",
        "result": true
      },
      {
        "name": "api.Node.lastChild",
        "result": true
      },
      {
        "name": "api.Node.lookupNamespaceURI",
        "result": true
      },
      {
        "name": "api.Node.lookupPrefix",
        "result": true
      },
      {
        "name": "api.Node.nextSibling",
        "result": true
      },
      {
        "name": "api.Node.nodeName",
        "result": true
      },
      {
        "name": "api.Node.nodeType",
        "result": true
      },
      {
        "name": "api.Node.nodeValue",
        "result": true
      },
      {
        "name": "api.Node.normalize",
        "result": true
      },
      {
        "name": "api.Node.NOTATION_NODE",
        "result": true
      },
      {
        "name": "api.Node.ownerDocument",
        "result": true
      },
      {
        "name": "api.Node.parentElement",
        "result": true
      },
      {
        "name": "api.Node.parentNode",
        "result": true
      },
      {
        "name": "api.Node.previousSibling",
        "result": true
      },
      {
        "name": "api.Node.PROCESSING_INSTRUCTION_NODE",
        "result": true
      },
      {
        "name": "api.Node.removeChild",
        "result": true
      },
      {
        "name": "api.Node.replaceChild",
        "result": true
      },
      {
        "name": "api.Node.TEXT_NODE",
        "result": true
      },
      {
        "name": "api.Node.textContent",
        "result": true
      },
      {
        "name": "api.NodeIterator",
        "result": true
      },
      {
        "name": "api.NodeIterator.detach",
        "result": true
      },
      {
        "name": "api.NodeIterator.filter",
        "result": true
      },
      {
        "name": "api.NodeIterator.nextNode",
        "result": true
      },
      {
        "name": "api.NodeIterator.pointerBeforeReferenceNode",
        "result": false
      },
      {
        "name": "api.NodeIterator.previousNode",
        "result": true
      },
      {
        "name": "api.NodeIterator.referenceNode",
        "result": false
      },
      {
        "name": "api.NodeIterator.root",
        "result": true
      },
      {
        "name": "api.NodeIterator.whatToShow",
        "result": true
      },
      {
        "name": "api.NodeList",
        "result": true
      },
      {
        "name": "api.NodeList.item",
        "result": true
      },
      {
        "name": "api.NodeList.length",
        "result": true
      },
      {
        "name": "api.Notification",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.actions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.badge",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.dir",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.icon",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.image",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.maxActions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onclick",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.onshow",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.permission",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.renotify",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.requestPermission",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.requireInteraction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.silent",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.tag",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.timestamp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.title",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Notification' is undefined",
        "name": "api.Notification.vibrate",
        "result": null
      },
      {
        "name": "api.OfflineAudioCompletionEvent",
        "result": true
      },
      {
        "name": "api.OfflineAudioCompletionEvent.renderedBuffer",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.length",
        "result": false
      },
      {
        "name": "api.OfflineAudioContext.oncomplete",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.resume",
        "result": false
      },
      {
        "name": "api.OfflineAudioContext.startRendering",
        "result": true
      },
      {
        "name": "api.OfflineAudioContext.suspend",
        "result": false
      },
      {
        "name": "api.OffscreenCanvas",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.convertToBlob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.getContext",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.transferToImageBitmap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvas' is undefined",
        "name": "api.OffscreenCanvas.width",
        "result": null
      },
      {
        "name": "api.OffscreenCanvasRenderingContext2D",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.arc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.arcTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.beginPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.bezierCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clearRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clip",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.clip",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.closePath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.commit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createLinearGradient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createPattern",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.createRadialGradient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.drawImage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.ellipse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.fillText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.filter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.font",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getLineDash",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.getTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.globalAlpha",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.globalCompositeOperation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.imageSmoothingEnabled",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.imageSmoothingQuality",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineCap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineDashOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineJoin",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.lineWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.measureText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.miterLimit",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.moveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.putImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.putImageData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.quadraticCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.rect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.resetTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.restore",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.rotate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.save",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.scale",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setLineDash",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.setTransform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowBlur",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowOffsetX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.shadowOffsetY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.stroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.stroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeStyle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.strokeText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.textAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.textBaseline",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.transform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OffscreenCanvasRenderingContext2D' is undefined",
        "name": "api.OffscreenCanvasRenderingContext2D.translate",
        "result": null
      },
      {
        "name": "api.OrientationSensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'OrientationSensor' is undefined",
        "name": "api.OrientationSensor.populateMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'OrientationSensor' is undefined",
        "name": "api.OrientationSensor.quaternion",
        "result": null
      },
      {
        "name": "api.OscillatorNode",
        "result": true
      },
      {
        "name": "api.OscillatorNode.detune",
        "result": true
      },
      {
        "name": "api.OscillatorNode.frequency",
        "result": true
      },
      {
        "name": "api.OscillatorNode.setPeriodicWave",
        "result": true
      },
      {
        "name": "api.OscillatorNode.type",
        "result": true
      },
      {
        "name": "api.PageTransitionEvent",
        "result": true
      },
      {
        "name": "api.PageTransitionEvent.persisted",
        "result": true
      },
      {
        "name": "api.PannerNode",
        "result": true
      },
      {
        "name": "api.PannerNode.coneInnerAngle",
        "result": true
      },
      {
        "name": "api.PannerNode.coneOuterAngle",
        "result": true
      },
      {
        "name": "api.PannerNode.coneOuterGain",
        "result": true
      },
      {
        "name": "api.PannerNode.distanceModel",
        "result": true
      },
      {
        "name": "api.PannerNode.maxDistance",
        "result": true
      },
      {
        "name": "api.PannerNode.orientationX",
        "result": false
      },
      {
        "name": "api.PannerNode.orientationY",
        "result": false
      },
      {
        "name": "api.PannerNode.orientationZ",
        "result": false
      },
      {
        "name": "api.PannerNode.panningModel",
        "result": true
      },
      {
        "name": "api.PannerNode.positionX",
        "result": false
      },
      {
        "name": "api.PannerNode.positionY",
        "result": false
      },
      {
        "name": "api.PannerNode.positionZ",
        "result": false
      },
      {
        "name": "api.PannerNode.refDistance",
        "result": true
      },
      {
        "name": "api.PannerNode.rolloffFactor",
        "result": true
      },
      {
        "name": "api.PannerNode.setOrientation",
        "result": true
      },
      {
        "name": "api.PannerNode.setPosition",
        "result": true
      },
      {
        "name": "api.PasswordCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.iconURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PasswordCredential' is undefined",
        "name": "api.PasswordCredential.password",
        "result": null
      },
      {
        "name": "api.Path2D",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.addPath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.arc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.arcTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.bezierCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.closePath",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.ellipse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.lineTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.moveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.quadraticCurveTo",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Path2D' is undefined",
        "name": "api.Path2D.rect",
        "result": null
      },
      {
        "name": "api.PaymentAddress",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.addressLine",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.city",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.country",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.dependentLocality",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.organization",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.phone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.postalCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.recipient",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.region",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.sortingCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentAddress' is undefined",
        "name": "api.PaymentAddress.toJSON",
        "result": null
      },
      {
        "name": "api.PaymentInstruments",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.keys",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentInstruments' is undefined",
        "name": "api.PaymentInstruments.set",
        "result": null
      },
      {
        "name": "api.PaymentManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentManager' is undefined",
        "name": "api.PaymentManager.instruments",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentManager' is undefined",
        "name": "api.PaymentManager.userHint",
        "result": null
      },
      {
        "name": "api.PaymentMethodChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentMethodChangeEvent' is undefined",
        "name": "api.PaymentMethodChangeEvent.methodDetails",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentMethodChangeEvent' is undefined",
        "name": "api.PaymentMethodChangeEvent.methodName",
        "result": null
      },
      {
        "name": "api.PaymentRequest",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.canMakePayment",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.hasEnrolledInstrument",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onmerchantvalidation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onpaymentmethodchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onshippingaddresschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.onshippingoptionchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingOption",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.shippingType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentRequest' is undefined",
        "name": "api.PaymentRequest.show",
        "result": null
      },
      {
        "name": "api.PaymentRequestUpdateEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentRequestUpdateEvent' is undefined",
        "name": "api.PaymentRequestUpdateEvent.updateWith",
        "result": null
      },
      {
        "name": "api.PaymentResponse",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.complete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.details",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.methodName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.onpayerdetailchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerEmail",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.payerPhone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.requestId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.retry",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.shippingAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.shippingOption",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PaymentResponse' is undefined",
        "name": "api.PaymentResponse.toJSON",
        "result": null
      },
      {
        "name": "api.Performance",
        "result": true
      },
      {
        "name": "api.Performance.clearMarks",
        "result": true
      },
      {
        "name": "api.Performance.clearMeasures",
        "result": true
      },
      {
        "name": "api.Performance.clearResourceTimings",
        "result": true
      },
      {
        "name": "api.Performance.eventCounts",
        "result": false
      },
      {
        "name": "api.Performance.getEntries",
        "result": true
      },
      {
        "name": "api.Performance.getEntriesByName",
        "result": true
      },
      {
        "name": "api.Performance.getEntriesByType",
        "result": true
      },
      {
        "name": "api.Performance.mark",
        "result": true
      },
      {
        "name": "api.Performance.measure",
        "result": true
      },
      {
        "name": "api.Performance.navigation",
        "result": true
      },
      {
        "name": "api.Performance.now",
        "result": true
      },
      {
        "name": "api.Performance.onresourcetimingbufferfull",
        "result": false
      },
      {
        "name": "api.Performance.setResourceTimingBufferSize",
        "result": true
      },
      {
        "name": "api.Performance.timeOrigin",
        "result": false
      },
      {
        "name": "api.Performance.timing",
        "result": true
      },
      {
        "name": "api.Performance.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceEntry",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.duration",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.entryType",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.name",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.startTime",
        "result": true
      },
      {
        "name": "api.PerformanceEntry.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceEventTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.cancelable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.processingEnd",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceEventTiming' is undefined",
        "name": "api.PerformanceEventTiming.processingStart",
        "result": null
      },
      {
        "name": "api.PerformanceLongTaskTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceLongTaskTiming' is undefined",
        "name": "api.PerformanceLongTaskTiming.attribution",
        "result": null
      },
      {
        "name": "api.PerformanceMark",
        "result": true
      },
      {
        "name": "api.PerformanceMark.detail",
        "result": false
      },
      {
        "name": "api.PerformanceMeasure",
        "result": true
      },
      {
        "name": "api.PerformanceMeasure.detail",
        "result": false
      },
      {
        "name": "api.PerformanceNavigation",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.redirectCount",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.type",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_BACK_FORWARD",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_NAVIGATE",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_RELOAD",
        "result": true
      },
      {
        "name": "api.PerformanceNavigation.TYPE_RESERVED",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domComplete",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domContentLoadedEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domContentLoadedEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.domInteractive",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.loadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.loadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.redirectCount",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceNavigationTiming.type",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.unloadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceNavigationTiming.unloadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.supportedEntryTypes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserver' is undefined",
        "name": "api.PerformanceObserver.takeRecords",
        "result": null
      },
      {
        "name": "api.PerformanceObserverEntryList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntries",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntriesByName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceObserverEntryList' is undefined",
        "name": "api.PerformanceObserverEntryList.getEntriesByType",
        "result": null
      },
      {
        "name": "api.PerformancePaintTiming",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.connectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.connectStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.decodedBodySize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.domainLookupEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.domainLookupStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.encodedBodySize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.fetchStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.initiatorType",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.nextHopProtocol",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.redirectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.redirectStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.requestStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.responseEnd",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.responseStart",
        "result": true
      },
      {
        "name": "api.PerformanceResourceTiming.secureConnectionStart",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.serverTiming",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.toJSON",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.transferSize",
        "result": false
      },
      {
        "name": "api.PerformanceResourceTiming.workerStart",
        "result": false
      },
      {
        "name": "api.PerformanceServerTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.description",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.duration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PerformanceServerTiming' is undefined",
        "name": "api.PerformanceServerTiming.toJSON",
        "result": null
      },
      {
        "name": "api.PerformanceTiming",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.connectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.connectStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domainLookupEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domainLookupStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domComplete",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domContentLoadedEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domContentLoadedEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domInteractive",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.domLoading",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.fetchStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.loadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.loadEventStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.navigationStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.redirectEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.redirectStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.requestStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.responseEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.responseStart",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.secureConnectionStart",
        "result": false
      },
      {
        "name": "api.PerformanceTiming.toJSON",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.unloadEventEnd",
        "result": true
      },
      {
        "name": "api.PerformanceTiming.unloadEventStart",
        "result": true
      },
      {
        "name": "api.PeriodicWave",
        "result": true
      },
      {
        "name": "api.Permissions",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Permissions' is undefined",
        "name": "api.Permissions.query",
        "result": null
      },
      {
        "name": "api.PermissionStatus",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PermissionStatus' is undefined",
        "name": "api.PermissionStatus.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PermissionStatus' is undefined",
        "name": "api.PermissionStatus.state",
        "result": null
      },
      {
        "name": "api.PhotoCapabilities",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.fillLightMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.imageHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.imageWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PhotoCapabilities' is undefined",
        "name": "api.PhotoCapabilities.redEyeReduction",
        "result": null
      },
      {
        "name": "api.PictureInPictureWindow",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.onresize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PictureInPictureWindow' is undefined",
        "name": "api.PictureInPictureWindow.width",
        "result": null
      },
      {
        "name": "api.Plugin",
        "result": true
      },
      {
        "name": "api.Plugin.description",
        "result": true
      },
      {
        "name": "api.Plugin.filename",
        "result": true
      },
      {
        "name": "api.Plugin.item",
        "result": true
      },
      {
        "name": "api.Plugin.length",
        "result": true
      },
      {
        "name": "api.Plugin.name",
        "result": true
      },
      {
        "name": "api.Plugin.namedItem",
        "result": true
      },
      {
        "name": "api.PluginArray",
        "result": true
      },
      {
        "name": "api.PluginArray.item",
        "result": true
      },
      {
        "name": "api.PluginArray.length",
        "result": true
      },
      {
        "name": "api.PluginArray.namedItem",
        "result": true
      },
      {
        "name": "api.PluginArray.refresh",
        "result": true
      },
      {
        "name": "api.PointerEvent",
        "result": true
      },
      {
        "name": "api.PointerEvent.getCoalescedEvents",
        "result": false
      },
      {
        "name": "api.PointerEvent.getPredictedEvents",
        "result": false
      },
      {
        "name": "api.PointerEvent.height",
        "result": true
      },
      {
        "name": "api.PointerEvent.isPrimary",
        "result": true
      },
      {
        "name": "api.PointerEvent.pointerId",
        "result": true
      },
      {
        "name": "api.PointerEvent.pointerType",
        "result": true
      },
      {
        "name": "api.PointerEvent.pressure",
        "result": true
      },
      {
        "name": "api.PointerEvent.tangentialPressure",
        "result": false
      },
      {
        "name": "api.PointerEvent.tiltX",
        "result": true
      },
      {
        "name": "api.PointerEvent.tiltY",
        "result": true
      },
      {
        "name": "api.PointerEvent.twist",
        "result": false
      },
      {
        "name": "api.PointerEvent.width",
        "result": true
      },
      {
        "name": "api.PopStateEvent",
        "result": true
      },
      {
        "name": "api.PopStateEvent.state",
        "result": true
      },
      {
        "name": "api.Position",
        "result": true
      },
      {
        "name": "api.Position.coords",
        "result": true
      },
      {
        "name": "api.Position.timestamp",
        "result": true
      },
      {
        "name": "api.PositionError",
        "result": true
      },
      {
        "name": "api.PositionError.code",
        "result": true
      },
      {
        "name": "api.PositionError.message",
        "result": true
      },
      {
        "name": "api.PositionError.PERMISSION_DENIED",
        "result": true
      },
      {
        "name": "api.PositionError.POSITION_UNAVAILABLE",
        "result": true
      },
      {
        "name": "api.PositionError.TIMEOUT",
        "result": true
      },
      {
        "name": "api.Presentation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Presentation' is undefined",
        "name": "api.Presentation.defaultRequest",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Presentation' is undefined",
        "name": "api.Presentation.receiver",
        "result": null
      },
      {
        "name": "api.PresentationAvailability",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationAvailability' is undefined",
        "name": "api.PresentationAvailability.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationAvailability' is undefined",
        "name": "api.PresentationAvailability.value",
        "result": null
      },
      {
        "name": "api.PresentationConnection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.binaryType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.onterminate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.terminate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnection' is undefined",
        "name": "api.PresentationConnection.url",
        "result": null
      },
      {
        "name": "api.PresentationConnectionAvailableEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionAvailableEvent' is undefined",
        "name": "api.PresentationConnectionAvailableEvent.connection",
        "result": null
      },
      {
        "name": "api.PresentationConnectionCloseEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionCloseEvent' is undefined",
        "name": "api.PresentationConnectionCloseEvent.message",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionCloseEvent' is undefined",
        "name": "api.PresentationConnectionCloseEvent.reason",
        "result": null
      },
      {
        "name": "api.PresentationConnectionList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionList' is undefined",
        "name": "api.PresentationConnectionList.connections",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationConnectionList' is undefined",
        "name": "api.PresentationConnectionList.onconnectionavailable",
        "result": null
      },
      {
        "name": "api.PresentationReceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationReceiver' is undefined",
        "name": "api.PresentationReceiver.connectionList",
        "result": null
      },
      {
        "name": "api.PresentationRequest",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.getAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.onconnectionavailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.reconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PresentationRequest' is undefined",
        "name": "api.PresentationRequest.start",
        "result": null
      },
      {
        "name": "api.ProcessingInstruction",
        "result": true
      },
      {
        "name": "api.ProcessingInstruction.sheet",
        "result": false
      },
      {
        "name": "api.ProcessingInstruction.target",
        "result": true
      },
      {
        "name": "api.ProgressEvent",
        "result": true
      },
      {
        "name": "api.ProgressEvent.lengthComputable",
        "result": true
      },
      {
        "name": "api.ProgressEvent.loaded",
        "result": true
      },
      {
        "name": "api.ProgressEvent.total",
        "result": true
      },
      {
        "name": "api.PromiseRejectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PromiseRejectionEvent' is undefined",
        "name": "api.PromiseRejectionEvent.promise",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PromiseRejectionEvent' is undefined",
        "name": "api.PromiseRejectionEvent.reason",
        "result": null
      },
      {
        "name": "api.ProximitySensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.distance",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ProximitySensor' is undefined",
        "name": "api.ProximitySensor.near",
        "result": null
      },
      {
        "name": "api.PublicKeyCredential",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.getClientExtensionResults",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.rawId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PublicKeyCredential' is undefined",
        "name": "api.PublicKeyCredential.response",
        "result": null
      },
      {
        "name": "api.PushManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.getSubscription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.permissionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.subscribe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushManager' is undefined",
        "name": "api.PushManager.supportedContentEncodings",
        "result": null
      },
      {
        "name": "api.PushSubscription",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.endpoint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.expirationTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.getKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.options",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscription' is undefined",
        "name": "api.PushSubscription.unsubscribe",
        "result": null
      },
      {
        "name": "api.PushSubscriptionOptions",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'PushSubscriptionOptions' is undefined",
        "name": "api.PushSubscriptionOptions.applicationServerKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'PushSubscriptionOptions' is undefined",
        "name": "api.PushSubscriptionOptions.userVisibleOnly",
        "result": null
      },
      {
        "name": "api.RadioNodeList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RadioNodeList' is undefined",
        "name": "api.RadioNodeList.value",
        "result": null
      },
      {
        "name": "api.Range",
        "result": true
      },
      {
        "name": "api.Range.cloneContents",
        "result": true
      },
      {
        "name": "api.Range.cloneRange",
        "result": true
      },
      {
        "name": "api.Range.collapse",
        "result": true
      },
      {
        "name": "api.Range.commonAncestorContainer",
        "result": true
      },
      {
        "name": "api.Range.compareBoundaryPoints",
        "result": true
      },
      {
        "name": "api.Range.comparePoint",
        "result": false
      },
      {
        "name": "api.Range.createContextualFragment",
        "result": true
      },
      {
        "name": "api.Range.deleteContents",
        "result": true
      },
      {
        "name": "api.Range.detach",
        "result": true
      },
      {
        "name": "api.Range.END_TO_END",
        "result": true
      },
      {
        "name": "api.Range.END_TO_START",
        "result": true
      },
      {
        "name": "api.Range.extractContents",
        "result": true
      },
      {
        "name": "api.Range.getBoundingClientRect",
        "result": true
      },
      {
        "name": "api.Range.getClientRects",
        "result": true
      },
      {
        "name": "api.Range.insertNode",
        "result": true
      },
      {
        "name": "api.Range.intersectsNode",
        "result": false
      },
      {
        "name": "api.Range.isPointInRange",
        "result": false
      },
      {
        "name": "api.Range.selectNode",
        "result": true
      },
      {
        "name": "api.Range.selectNodeContents",
        "result": true
      },
      {
        "name": "api.Range.setEnd",
        "result": true
      },
      {
        "name": "api.Range.setEndAfter",
        "result": true
      },
      {
        "name": "api.Range.setEndBefore",
        "result": true
      },
      {
        "name": "api.Range.setStart",
        "result": true
      },
      {
        "name": "api.Range.setStartAfter",
        "result": true
      },
      {
        "name": "api.Range.setStartBefore",
        "result": true
      },
      {
        "name": "api.Range.START_TO_END",
        "result": true
      },
      {
        "name": "api.Range.START_TO_START",
        "result": true
      },
      {
        "name": "api.Range.surroundContents",
        "result": true
      },
      {
        "name": "api.RelativeOrientationSensor",
        "result": false
      },
      {
        "name": "api.RemotePlayback",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.cancelWatchAvailability",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.onconnecting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.ondisconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.prompt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RemotePlayback' is undefined",
        "name": "api.RemotePlayback.watchAvailability",
        "result": null
      },
      {
        "name": "api.Report",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Report' is undefined",
        "name": "api.Report.url",
        "result": null
      },
      {
        "name": "api.ReportBody",
        "result": false
      },
      {
        "name": "api.ReportingObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ReportingObserver' is undefined",
        "name": "api.ReportingObserver.takeRecords",
        "result": null
      },
      {
        "name": "api.Request",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.arrayBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.blob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.bodyUsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.cache",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.clone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.credentials",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.destination",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.formData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.headers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.integrity",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.isHistoryNavigation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.isReloadNavigation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.json",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.keepalive",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.method",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.mode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.redirect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.referrerPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.signal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Request' is undefined",
        "name": "api.Request.url",
        "result": null
      },
      {
        "name": "api.ResizeObservation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.lastReportedSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.observedBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObservation' is undefined",
        "name": "api.ResizeObservation.target",
        "result": null
      },
      {
        "name": "api.ResizeObserver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.disconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.observe",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserver' is undefined",
        "name": "api.ResizeObserver.unobserve",
        "result": null
      },
      {
        "name": "api.ResizeObserverEntry",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.borderBoxSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.contentBoxSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.contentRect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverEntry' is undefined",
        "name": "api.ResizeObserverEntry.target",
        "result": null
      },
      {
        "name": "api.ResizeObserverSize",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverSize' is undefined",
        "name": "api.ResizeObserverSize.blockSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ResizeObserverSize' is undefined",
        "name": "api.ResizeObserverSize.inlineSize",
        "result": null
      },
      {
        "name": "api.Response",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.arrayBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.blob",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.body",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.bodyUsed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.clone",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.error",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.formData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.headers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.json",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.ok",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.redirect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.redirected",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.status",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.statusText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.trailer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Response' is undefined",
        "name": "api.Response.url",
        "result": null
      },
      {
        "name": "api.RTCCertificate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.expires",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.getFingerprints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCCertificate' is undefined",
        "name": "api.RTCCertificate.getSupportedAlgorithms",
        "result": null
      },
      {
        "name": "api.RTCDataChannel",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.binaryType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.bufferedAmount",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.bufferedAmountLowThreshold",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.label",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.maxPacketLifeTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.maxRetransmits",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.negotiated",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onbufferedamountlow",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onclose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.onopen",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.ordered",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.priority",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.readyState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannel' is undefined",
        "name": "api.RTCDataChannel.send",
        "result": null
      },
      {
        "name": "api.RTCDataChannelEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDataChannelEvent' is undefined",
        "name": "api.RTCDataChannelEvent.channel",
        "result": null
      },
      {
        "name": "api.RTCDtlsTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.getRemoteCertificates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.iceTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDtlsTransport' is undefined",
        "name": "api.RTCDtlsTransport.state",
        "result": null
      },
      {
        "name": "api.RTCDTMFSender",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.canInsertDTMF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.insertDTMF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.ontonechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFSender' is undefined",
        "name": "api.RTCDTMFSender.toneBuffer",
        "result": null
      },
      {
        "name": "api.RTCDTMFToneChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCDTMFToneChangeEvent' is undefined",
        "name": "api.RTCDTMFToneChangeEvent.tone",
        "result": null
      },
      {
        "name": "api.RTCError",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.errorDetail",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.httpRequestStatusCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.receivedAlert",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sctpCauseCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sdpLineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCError' is undefined",
        "name": "api.RTCError.sentAlert",
        "result": null
      },
      {
        "name": "api.RTCErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCErrorEvent' is undefined",
        "name": "api.RTCErrorEvent.error",
        "result": null
      },
      {
        "name": "api.RTCIceCandidate",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.address",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.candidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.component",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.foundation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.port",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.priority",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.protocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.relatedAddress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.relatedPort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.sdpMid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.sdpMLineIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.tcpType",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceCandidate' is undefined",
        "name": "api.RTCIceCandidate.usernameFragment",
        "result": null
      },
      {
        "name": "api.RTCIceTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.component",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.gatheringState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getLocalCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getLocalParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getRemoteCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getRemoteParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.getSelectedCandidatePair",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.ongatheringstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.onselectedcandidatepairchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.role",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCIceTransport' is undefined",
        "name": "api.RTCIceTransport.state",
        "result": null
      },
      {
        "name": "api.RTCPeerConnection",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addIceCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addIceCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.addTransceiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.canTrickleIceCandidates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.connectionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createAnswer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createAnswer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createDataChannel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createOffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.createOffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.currentLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.currentRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.generateCertificate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getDefaultIceServers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getReceivers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getSenders",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.getTransceivers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.iceConnectionState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.iceGatheringState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.localDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onconnectionstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.ondatachannel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicecandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicecandidateerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.oniceconnectionstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onicegatheringstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onnegotiationneeded",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onsignalingstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.onstatsended",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.ontrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.pendingLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.pendingRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.remoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.removeTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.sctp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setLocalDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.setRemoteDescription",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnection' is undefined",
        "name": "api.RTCPeerConnection.signalingState",
        "result": null
      },
      {
        "name": "api.RTCPeerConnectionIceErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.errorCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.errorText",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.hostCandidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceErrorEvent' is undefined",
        "name": "api.RTCPeerConnectionIceErrorEvent.url",
        "result": null
      },
      {
        "name": "api.RTCPeerConnectionIceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceEvent' is undefined",
        "name": "api.RTCPeerConnectionIceEvent.candidate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCPeerConnectionIceEvent' is undefined",
        "name": "api.RTCPeerConnectionIceEvent.url",
        "result": null
      },
      {
        "name": "api.RTCRtpReceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getContributingSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.getSynchronizationSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.rtcpTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpReceiver' is undefined",
        "name": "api.RTCRtpReceiver.transport",
        "result": null
      },
      {
        "name": "api.RTCRtpSender",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.dtmf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getCapabilities",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.getStats",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.replaceTrack",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.rtcpTransport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.setParameters",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.setStreams",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpSender' is undefined",
        "name": "api.RTCRtpSender.transport",
        "result": null
      },
      {
        "name": "api.RTCRtpTransceiver",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.currentDirection",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.mid",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.receiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.sender",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.setCodecPreferences",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCRtpTransceiver' is undefined",
        "name": "api.RTCRtpTransceiver.stopped",
        "result": null
      },
      {
        "name": "api.RTCSctpTransport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.maxChannels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.maxMessageSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.state",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSctpTransport' is undefined",
        "name": "api.RTCSctpTransport.transport",
        "result": null
      },
      {
        "name": "api.RTCSessionDescription",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.sdp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.toJSON",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCSessionDescription' is undefined",
        "name": "api.RTCSessionDescription.type",
        "result": null
      },
      {
        "name": "api.RTCStatsEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCStatsEvent' is undefined",
        "name": "api.RTCStatsEvent.report",
        "result": null
      },
      {
        "name": "api.RTCStatsReport",
        "result": false
      },
      {
        "name": "api.RTCTrackEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.receiver",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.streams",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.track",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'RTCTrackEvent' is undefined",
        "name": "api.RTCTrackEvent.transceiver",
        "result": null
      },
      {
        "name": "api.Screen",
        "result": true
      },
      {
        "name": "api.Screen.availHeight",
        "result": true
      },
      {
        "name": "api.Screen.availWidth",
        "result": true
      },
      {
        "name": "api.Screen.colorDepth",
        "result": true
      },
      {
        "name": "api.Screen.colorGamut",
        "result": false
      },
      {
        "name": "api.Screen.height",
        "result": true
      },
      {
        "name": "api.Screen.luminance",
        "result": false
      },
      {
        "name": "api.Screen.onchange",
        "result": false
      },
      {
        "name": "api.Screen.orientation",
        "result": false
      },
      {
        "name": "api.Screen.pixelDepth",
        "result": true
      },
      {
        "name": "api.Screen.width",
        "result": true
      },
      {
        "name": "api.ScreenLuminance",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.max",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.maxAverage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenLuminance' is undefined",
        "name": "api.ScreenLuminance.min",
        "result": null
      },
      {
        "name": "api.ScreenOrientation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.angle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.lock",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.onchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.type",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScreenOrientation' is undefined",
        "name": "api.ScreenOrientation.unlock",
        "result": null
      },
      {
        "name": "api.ScriptProcessorNode",
        "result": true
      },
      {
        "name": "api.ScriptProcessorNode.bufferSize",
        "result": true
      },
      {
        "name": "api.ScriptProcessorNode.onaudioprocess",
        "result": true
      },
      {
        "name": "api.ScrollTimeline",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.endScrollOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.fill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.orientation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.scrollSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.startScrollOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ScrollTimeline' is undefined",
        "name": "api.ScrollTimeline.timeRange",
        "result": null
      },
      {
        "name": "api.SecurityPolicyViolationEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.blockedURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.blockedURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.colno",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.columnNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.disposition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.documentURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.documentURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.effectiveDirective",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.lineno",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.lineNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.originalPolicy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.referrer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.sample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.sourceFile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.statusCode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SecurityPolicyViolationEvent' is undefined",
        "name": "api.SecurityPolicyViolationEvent.violatedDirective",
        "result": null
      },
      {
        "name": "api.Selection",
        "result": true
      },
      {
        "name": "api.Selection.addRange",
        "result": true
      },
      {
        "name": "api.Selection.anchorNode",
        "result": true
      },
      {
        "name": "api.Selection.anchorOffset",
        "result": true
      },
      {
        "name": "api.Selection.collapse",
        "result": true
      },
      {
        "name": "api.Selection.collapseToEnd",
        "result": true
      },
      {
        "name": "api.Selection.collapseToStart",
        "result": true
      },
      {
        "name": "api.Selection.containsNode",
        "result": true
      },
      {
        "name": "api.Selection.deleteFromDocument",
        "result": true
      },
      {
        "name": "api.Selection.empty",
        "result": true
      },
      {
        "name": "api.Selection.extend",
        "result": true
      },
      {
        "name": "api.Selection.focusNode",
        "result": true
      },
      {
        "name": "api.Selection.focusOffset",
        "result": true
      },
      {
        "name": "api.Selection.getRangeAt",
        "result": true
      },
      {
        "name": "api.Selection.isCollapsed",
        "result": true
      },
      {
        "name": "api.Selection.rangeCount",
        "result": true
      },
      {
        "name": "api.Selection.removeAllRanges",
        "result": true
      },
      {
        "name": "api.Selection.removeRange",
        "result": true
      },
      {
        "name": "api.Selection.selectAllChildren",
        "result": true
      },
      {
        "name": "api.Selection.setBaseAndExtent",
        "result": true
      },
      {
        "name": "api.Selection.setPosition",
        "result": false
      },
      {
        "name": "api.Selection.type",
        "result": true
      },
      {
        "name": "api.Sensor",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.activated",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.hasReading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onactivate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.onreading",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.stop",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Sensor' is undefined",
        "name": "api.Sensor.timestamp",
        "result": null
      },
      {
        "name": "api.SensorErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SensorErrorEvent' is undefined",
        "name": "api.SensorErrorEvent.error",
        "result": null
      },
      {
        "name": "api.ServiceWorker",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.onstatechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.postMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.postMessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.scriptURL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorker' is undefined",
        "name": "api.ServiceWorker.state",
        "result": null
      },
      {
        "name": "api.ServiceWorkerContainer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.controller",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.getRegistration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.getRegistrations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.oncontrollerchange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.onmessage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.onmessageerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.ready",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.register",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerContainer' is undefined",
        "name": "api.ServiceWorkerContainer.startMessages",
        "result": null
      },
      {
        "name": "api.ServiceWorkerRegistration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.active",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.backgroundFetch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.getNotifications",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.installing",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.navigationPreload",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.onupdatefound",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.paymentManager",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.pushManager",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.scope",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.showNotification",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.sync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.unregister",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.update",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.updateViaCache",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ServiceWorkerRegistration' is undefined",
        "name": "api.ServiceWorkerRegistration.waiting",
        "result": null
      },
      {
        "name": "api.ShadowAnimation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ShadowAnimation' is undefined",
        "name": "api.ShadowAnimation.sourceAnimation",
        "result": null
      },
      {
        "name": "api.ShadowRoot",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.fullscreenElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.host",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.innerHTML",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.mode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.pictureInPictureElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.pointerLockElement",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'ShadowRoot' is undefined",
        "name": "api.ShadowRoot.styleSheets",
        "result": null
      },
      {
        "name": "api.SharedWorker",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SharedWorker' is undefined",
        "name": "api.SharedWorker.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SharedWorker' is undefined",
        "name": "api.SharedWorker.port",
        "result": null
      },
      {
        "name": "api.SourceBuffer",
        "result": true
      },
      {
        "name": "api.SourceBuffer.abort",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendBuffer",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendWindowEnd",
        "result": true
      },
      {
        "name": "api.SourceBuffer.appendWindowStart",
        "result": true
      },
      {
        "name": "api.SourceBuffer.audioTracks",
        "result": true
      },
      {
        "name": "api.SourceBuffer.buffered",
        "result": true
      },
      {
        "name": "api.SourceBuffer.mode",
        "result": true
      },
      {
        "name": "api.SourceBuffer.onabort",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onerror",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdate",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdateend",
        "result": false
      },
      {
        "name": "api.SourceBuffer.onupdatestart",
        "result": false
      },
      {
        "name": "api.SourceBuffer.remove",
        "result": true
      },
      {
        "name": "api.SourceBuffer.textTracks",
        "result": false
      },
      {
        "name": "api.SourceBuffer.timestampOffset",
        "result": true
      },
      {
        "name": "api.SourceBuffer.updating",
        "result": true
      },
      {
        "name": "api.SourceBuffer.videoTracks",
        "result": true
      },
      {
        "name": "api.SourceBufferList",
        "result": true
      },
      {
        "name": "api.SourceBufferList.length",
        "result": true
      },
      {
        "name": "api.SourceBufferList.onaddsourcebuffer",
        "result": false
      },
      {
        "name": "api.SourceBufferList.onremovesourcebuffer",
        "result": false
      },
      {
        "name": "api.SpeechGrammar",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammar' is undefined",
        "name": "api.SpeechGrammar.src",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammar' is undefined",
        "name": "api.SpeechGrammar.weight",
        "result": null
      },
      {
        "name": "api.SpeechGrammarList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.addFromString",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.addFromURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechGrammarList' is undefined",
        "name": "api.SpeechGrammarList.length",
        "result": null
      },
      {
        "name": "api.SpeechRecognition",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.abort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.continuous",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.grammars",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.interimResults",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.maxAlternatives",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onaudioend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onaudiostart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onnomatch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onresult",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onsoundend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onsoundstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onspeechend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onspeechstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.serviceURI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.start",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognition' is undefined",
        "name": "api.SpeechRecognition.stop",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionAlternative",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionAlternative' is undefined",
        "name": "api.SpeechRecognitionAlternative.confidence",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionAlternative' is undefined",
        "name": "api.SpeechRecognitionAlternative.transcript",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionErrorEvent' is undefined",
        "name": "api.SpeechRecognitionErrorEvent.error",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionErrorEvent' is undefined",
        "name": "api.SpeechRecognitionErrorEvent.message",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.emma",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.interpretation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.resultIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionEvent' is undefined",
        "name": "api.SpeechRecognitionEvent.results",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.isFinal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResult' is undefined",
        "name": "api.SpeechRecognitionResult.length",
        "result": null
      },
      {
        "name": "api.SpeechRecognitionResultList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResultList' is undefined",
        "name": "api.SpeechRecognitionResultList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechRecognitionResultList' is undefined",
        "name": "api.SpeechRecognitionResultList.length",
        "result": null
      },
      {
        "name": "api.SpeechSynthesis",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.cancel",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.getVoices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.onvoiceschanged",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.pause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.paused",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.pending",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.resume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.speak",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesis' is undefined",
        "name": "api.SpeechSynthesis.speaking",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisErrorEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisErrorEvent' is undefined",
        "name": "api.SpeechSynthesisErrorEvent.error",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.charIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.charLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.elapsedTime",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisEvent' is undefined",
        "name": "api.SpeechSynthesisEvent.utterance",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisUtterance",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onboundary",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onmark",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onpause",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onresume",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.onstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.pitch",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.rate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.voice",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisUtterance' is undefined",
        "name": "api.SpeechSynthesisUtterance.volume",
        "result": null
      },
      {
        "name": "api.SpeechSynthesisVoice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.default",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.lang",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.localService",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.name",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SpeechSynthesisVoice' is undefined",
        "name": "api.SpeechSynthesisVoice.voiceURI",
        "result": null
      },
      {
        "name": "api.StaticRange",
        "result": false
      },
      {
        "name": "api.StereoPannerNode",
        "result": true
      },
      {
        "name": "api.StereoPannerNode.pan",
        "result": true
      },
      {
        "name": "api.Storage",
        "result": true
      },
      {
        "name": "api.Storage.clear",
        "result": true
      },
      {
        "name": "api.Storage.getItem",
        "result": true
      },
      {
        "name": "api.Storage.key",
        "result": true
      },
      {
        "name": "api.Storage.length",
        "result": true
      },
      {
        "name": "api.Storage.removeItem",
        "result": true
      },
      {
        "name": "api.Storage.setItem",
        "result": true
      },
      {
        "name": "api.StorageEvent",
        "result": true
      },
      {
        "name": "api.StorageEvent.initStorageEvent",
        "result": true
      },
      {
        "name": "api.StorageEvent.key",
        "result": true
      },
      {
        "name": "api.StorageEvent.newValue",
        "result": true
      },
      {
        "name": "api.StorageEvent.oldValue",
        "result": true
      },
      {
        "name": "api.StorageEvent.storageArea",
        "result": true
      },
      {
        "name": "api.StorageEvent.url",
        "result": true
      },
      {
        "name": "api.StorageManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.estimate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.persist",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StorageManager' is undefined",
        "name": "api.StorageManager.persisted",
        "result": null
      },
      {
        "name": "api.StylePropertyMap",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMap' is undefined",
        "name": "api.StylePropertyMap.set",
        "result": null
      },
      {
        "name": "api.StylePropertyMapReadOnly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'StylePropertyMapReadOnly' is undefined",
        "name": "api.StylePropertyMapReadOnly.size",
        "result": null
      },
      {
        "name": "api.StyleSheet",
        "result": true
      },
      {
        "name": "api.StyleSheet.disabled",
        "result": true
      },
      {
        "name": "api.StyleSheet.href",
        "result": true
      },
      {
        "name": "api.StyleSheet.media",
        "result": true
      },
      {
        "name": "api.StyleSheet.ownerNode",
        "result": true
      },
      {
        "name": "api.StyleSheet.parentStyleSheet",
        "result": true
      },
      {
        "name": "api.StyleSheet.title",
        "result": true
      },
      {
        "name": "api.StyleSheet.type",
        "result": true
      },
      {
        "name": "api.StyleSheetList",
        "result": true
      },
      {
        "name": "api.StyleSheetList.item",
        "result": true
      },
      {
        "name": "api.StyleSheetList.length",
        "result": true
      },
      {
        "name": "api.SubtleCrypto",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.decrypt",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.deriveBits",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.deriveKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.digest",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.encrypt",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.exportKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.generateKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.importKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.sign",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.unwrapKey",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.verify",
        "result": true
      },
      {
        "name": "api.SubtleCrypto.wrapKey",
        "result": true
      },
      {
        "name": "api.SVGAElement",
        "result": true
      },
      {
        "name": "api.SVGAElement.download",
        "result": false
      },
      {
        "name": "api.SVGAElement.hash",
        "result": false
      },
      {
        "name": "api.SVGAElement.host",
        "result": false
      },
      {
        "name": "api.SVGAElement.hostname",
        "result": false
      },
      {
        "name": "api.SVGAElement.href",
        "result": true
      },
      {
        "name": "api.SVGAElement.href",
        "result": true
      },
      {
        "name": "api.SVGAElement.hreflang",
        "result": false
      },
      {
        "name": "api.SVGAElement.origin",
        "result": false
      },
      {
        "name": "api.SVGAElement.password",
        "result": false
      },
      {
        "name": "api.SVGAElement.pathname",
        "result": false
      },
      {
        "name": "api.SVGAElement.ping",
        "result": false
      },
      {
        "name": "api.SVGAElement.port",
        "result": false
      },
      {
        "name": "api.SVGAElement.protocol",
        "result": false
      },
      {
        "name": "api.SVGAElement.referrerPolicy",
        "result": false
      },
      {
        "name": "api.SVGAElement.rel",
        "result": false
      },
      {
        "name": "api.SVGAElement.relList",
        "result": false
      },
      {
        "name": "api.SVGAElement.search",
        "result": false
      },
      {
        "name": "api.SVGAElement.target",
        "result": true
      },
      {
        "name": "api.SVGAElement.text",
        "result": false
      },
      {
        "name": "api.SVGAElement.type",
        "result": false
      },
      {
        "name": "api.SVGAElement.username",
        "result": false
      },
      {
        "name": "api.SVGAngle",
        "result": true
      },
      {
        "name": "api.SVGAngle.convertToSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAngle.newValueSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_DEG",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_GRAD",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_RAD",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGAngle.SVG_ANGLETYPE_UNSPECIFIED",
        "result": true
      },
      {
        "name": "api.SVGAngle.unitType",
        "result": true
      },
      {
        "name": "api.SVGAngle.value",
        "result": true
      },
      {
        "name": "api.SVGAngle.valueAsString",
        "result": true
      },
      {
        "name": "api.SVGAngle.valueInSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedAngle.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedBoolean.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedEnumeration.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedInteger.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLength.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedLengthList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumber.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedNumberList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedPreserveAspectRatio.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedRect.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedString.baseVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList.animVal",
        "result": true
      },
      {
        "name": "api.SVGAnimatedTransformList.baseVal",
        "result": true
      },
      {
        "name": "api.SVGCircleElement",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.cx",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.cy",
        "result": true
      },
      {
        "name": "api.SVGCircleElement.r",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement.clipPathUnits",
        "result": true
      },
      {
        "name": "api.SVGClipPathElement.transform",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.amplitude",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.exponent",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.intercept",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.offset",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.slope",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.tableValues",
        "result": true
      },
      {
        "name": "api.SVGComponentTransferFunctionElement.type",
        "result": true
      },
      {
        "name": "api.SVGDefsElement",
        "result": true
      },
      {
        "name": "api.SVGDescElement",
        "result": true
      },
      {
        "name": "api.SVGElement",
        "result": true
      },
      {
        "name": "api.SVGElement.attributeStyleMap",
        "result": false
      },
      {
        "name": "api.SVGElement.blur",
        "result": false
      },
      {
        "name": "api.SVGElement.className",
        "result": false
      },
      {
        "name": "api.SVGElement.correspondingElement",
        "result": false
      },
      {
        "name": "api.SVGElement.correspondingUseElement",
        "result": false
      },
      {
        "name": "api.SVGElement.dataset",
        "result": false
      },
      {
        "name": "api.SVGElement.focus",
        "result": false
      },
      {
        "name": "api.SVGElement.nonce",
        "result": false
      },
      {
        "name": "api.SVGElement.onabort",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationcancel",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationend",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationiteration",
        "result": false
      },
      {
        "name": "api.SVGElement.onanimationstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onauxclick",
        "result": false
      },
      {
        "name": "api.SVGElement.onblur",
        "result": false
      },
      {
        "name": "api.SVGElement.oncancel",
        "result": false
      },
      {
        "name": "api.SVGElement.oncanplay",
        "result": false
      },
      {
        "name": "api.SVGElement.oncanplaythrough",
        "result": false
      },
      {
        "name": "api.SVGElement.onchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onclick",
        "result": true
      },
      {
        "name": "api.SVGElement.onclose",
        "result": false
      },
      {
        "name": "api.SVGElement.oncontextmenu",
        "result": false
      },
      {
        "name": "api.SVGElement.oncopy",
        "result": false
      },
      {
        "name": "api.SVGElement.oncuechange",
        "result": false
      },
      {
        "name": "api.SVGElement.oncut",
        "result": false
      },
      {
        "name": "api.SVGElement.ondblclick",
        "result": true
      },
      {
        "name": "api.SVGElement.ondrag",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragend",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragenter",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragexit",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragleave",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragover",
        "result": false
      },
      {
        "name": "api.SVGElement.ondragstart",
        "result": false
      },
      {
        "name": "api.SVGElement.ondrop",
        "result": false
      },
      {
        "name": "api.SVGElement.ondurationchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onemptied",
        "result": false
      },
      {
        "name": "api.SVGElement.onended",
        "result": false
      },
      {
        "name": "api.SVGElement.onerror",
        "result": false
      },
      {
        "name": "api.SVGElement.onfocus",
        "result": false
      },
      {
        "name": "api.SVGElement.onformdata",
        "result": false
      },
      {
        "name": "api.SVGElement.ongotpointercapture",
        "result": true
      },
      {
        "name": "api.SVGElement.oninput",
        "result": false
      },
      {
        "name": "api.SVGElement.oninvalid",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeydown",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeypress",
        "result": false
      },
      {
        "name": "api.SVGElement.onkeyup",
        "result": false
      },
      {
        "name": "api.SVGElement.onload",
        "result": true
      },
      {
        "name": "api.SVGElement.onloadeddata",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadedmetadata",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadend",
        "result": false
      },
      {
        "name": "api.SVGElement.onloadstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onlostpointercapture",
        "result": true
      },
      {
        "name": "api.SVGElement.onmousedown",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseenter",
        "result": false
      },
      {
        "name": "api.SVGElement.onmouseleave",
        "result": false
      },
      {
        "name": "api.SVGElement.onmousemove",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseout",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseover",
        "result": true
      },
      {
        "name": "api.SVGElement.onmouseup",
        "result": true
      },
      {
        "name": "api.SVGElement.onpaste",
        "result": false
      },
      {
        "name": "api.SVGElement.onpause",
        "result": false
      },
      {
        "name": "api.SVGElement.onplay",
        "result": false
      },
      {
        "name": "api.SVGElement.onplaying",
        "result": false
      },
      {
        "name": "api.SVGElement.onpointercancel",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerdown",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerenter",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerleave",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointermove",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerout",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerover",
        "result": true
      },
      {
        "name": "api.SVGElement.onpointerup",
        "result": true
      },
      {
        "name": "api.SVGElement.onprogress",
        "result": false
      },
      {
        "name": "api.SVGElement.onratechange",
        "result": false
      },
      {
        "name": "api.SVGElement.onreset",
        "result": false
      },
      {
        "name": "api.SVGElement.onresize",
        "result": false
      },
      {
        "name": "api.SVGElement.onscroll",
        "result": false
      },
      {
        "name": "api.SVGElement.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.SVGElement.onseeked",
        "result": false
      },
      {
        "name": "api.SVGElement.onseeking",
        "result": false
      },
      {
        "name": "api.SVGElement.onselect",
        "result": false
      },
      {
        "name": "api.SVGElement.onselectionchange",
        "result": false
      },
      {
        "name": "api.SVGElement.onselectstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onstalled",
        "result": false
      },
      {
        "name": "api.SVGElement.onsubmit",
        "result": false
      },
      {
        "name": "api.SVGElement.onsuspend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontimeupdate",
        "result": false
      },
      {
        "name": "api.SVGElement.ontoggle",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchcancel",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchmove",
        "result": false
      },
      {
        "name": "api.SVGElement.ontouchstart",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionend",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionrun",
        "result": false
      },
      {
        "name": "api.SVGElement.ontransitionstart",
        "result": false
      },
      {
        "name": "api.SVGElement.onvolumechange",
        "result": false
      },
      {
        "name": "api.SVGElement.onwaiting",
        "result": false
      },
      {
        "name": "api.SVGElement.onwheel",
        "result": true
      },
      {
        "name": "api.SVGElement.ownerSVGElement",
        "result": true
      },
      {
        "name": "api.SVGElement.style",
        "result": false
      },
      {
        "name": "api.SVGElement.tabIndex",
        "result": false
      },
      {
        "name": "api.SVGElement.viewportElement",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.cx",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.cy",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.rx",
        "result": true
      },
      {
        "name": "api.SVGEllipseElement.ry",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.mode",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_BURN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_DODGE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_DARKEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_DIFFERENCE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_EXCLUSION",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_HARD_LIGHT",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_HUE",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_LIGHTEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_LUMINOSITY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_MULTIPLY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_NORMAL",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_OVERLAY",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SATURATION",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SCREEN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_SOFT_LIGHT",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.SVG_FEBLEND_MODE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEBlendElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_HUEROTATE",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_MATRIX",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.type",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.values",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEColorMatrixElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEComponentTransferElement.y",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.height",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k1",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k2",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k3",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.k4",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.operator",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.result",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ATOP",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_IN",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OUT",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OVER",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_XOR",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.width",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.x",
        "result": true
      },
      {
        "name": "api.SVGFECompositeElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.bias",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.divisor",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.edgeMode",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelMatrix",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.orderX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.orderY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.preserveAlpha",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_DUPLICATE",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.SVG_EDGEMODE_WRAP",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.targetX",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.targetY",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEConvolveMatrixElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.diffuseConstant",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.surfaceScale",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEDiffuseLightingElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.in2",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.scale",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_A",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_B",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_G",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_R",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.SVG_CHANNEL_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.xChannelSelector",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEDisplacementMapElement.yChannelSelector",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement.azimuth",
        "result": true
      },
      {
        "name": "api.SVGFEDistantLightElement.elevation",
        "result": true
      },
      {
        "name": "api.SVGFEDropShadowElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.dx",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.dy",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.in1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.result",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.setStdDeviation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.stdDeviationX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.stdDeviationY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGFEDropShadowElement' is undefined",
        "name": "api.SVGFEDropShadowElement.y",
        "result": null
      },
      {
        "name": "api.SVGFEFloodElement",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEFloodElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEFuncAElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncBElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncGElement",
        "result": true
      },
      {
        "name": "api.SVGFEFuncRElement",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.edgeMode",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.setStdDeviation",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.stdDeviationX",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.stdDeviationY",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_DUPLICATE",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_NONE",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_UNKNOWN",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.SVG_EDGEMODE_WRAP",
        "result": false
      },
      {
        "name": "api.SVGFEGaussianBlurElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEGaussianBlurElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGFEImageElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.href",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEImageElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEMergeElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEMergeNodeElement",
        "result": true
      },
      {
        "name": "api.SVGFEMergeNodeElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.operator",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.radiusX",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.radiusY",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_DILATE",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_ERODE",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEMorphologyElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.dx",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.dy",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.height",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.result",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.width",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEOffsetElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.x",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.y",
        "result": true
      },
      {
        "name": "api.SVGFEPointLightElement.z",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.height",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.kernelUnitLengthX",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.kernelUnitLengthY",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.result",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.specularConstant",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.specularExponent",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.surfaceScale",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.width",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.x",
        "result": true
      },
      {
        "name": "api.SVGFESpecularLightingElement.y",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.limitingConeAngle",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtX",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtY",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.pointsAtZ",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.specularExponent",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.x",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.y",
        "result": true
      },
      {
        "name": "api.SVGFESpotLightElement.z",
        "result": true
      },
      {
        "name": "api.SVGFETileElement",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.height",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.in1",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.result",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.width",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.x",
        "result": true
      },
      {
        "name": "api.SVGFETileElement.y",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.baseFrequencyX",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.baseFrequencyY",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.height",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.numOctaves",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.result",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.seed",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.stitchTiles",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_NOSTITCH",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_STITCH",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_STITCHTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_FRACTALNOISE",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_TURBULENCE",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.type",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.width",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.x",
        "result": true
      },
      {
        "name": "api.SVGFETurbulenceElement.y",
        "result": true
      },
      {
        "name": "api.SVGFilterElement",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.filterUnits",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.height",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.href",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.primitiveUnits",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.width",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.x",
        "result": true
      },
      {
        "name": "api.SVGFilterElement.y",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.height",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.width",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.x",
        "result": true
      },
      {
        "name": "api.SVGForeignObjectElement.y",
        "result": true
      },
      {
        "name": "api.SVGGElement",
        "result": true
      },
      {
        "name": "api.SVGGeometryElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.getPointAtLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.getTotalLength",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.isPointInFill",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.isPointInStroke",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGeometryElement' is undefined",
        "name": "api.SVGGeometryElement.pathLength",
        "result": null
      },
      {
        "name": "api.SVGGradientElement",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.gradientTransform",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.gradientUnits",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.href",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.spreadMethod",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_PAD",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_REFLECT",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_REPEAT",
        "result": true
      },
      {
        "name": "api.SVGGradientElement.SVG_SPREADMETHOD_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGGraphicsElement",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getBBox",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getCTM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.getScreenCTM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.requiredExtensions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.systemLanguage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SVGGraphicsElement' is undefined",
        "name": "api.SVGGraphicsElement.transform",
        "result": null
      },
      {
        "name": "api.SVGImageElement",
        "result": true
      },
      {
        "name": "api.SVGImageElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGImageElement.height",
        "result": true
      },
      {
        "name": "api.SVGImageElement.href",
        "result": true
      },
      {
        "name": "api.SVGImageElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGImageElement.width",
        "result": true
      },
      {
        "name": "api.SVGImageElement.x",
        "result": true
      },
      {
        "name": "api.SVGImageElement.y",
        "result": true
      },
      {
        "name": "api.SVGLength",
        "result": true
      },
      {
        "name": "api.SVGLength.convertToSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLength.newValueSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_CM",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_EMS",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_EXS",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_IN",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_MM",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_NUMBER",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PC",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PERCENTAGE",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PT",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_PX",
        "result": true
      },
      {
        "name": "api.SVGLength.SVG_LENGTHTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGLength.unitType",
        "result": true
      },
      {
        "name": "api.SVGLength.value",
        "result": true
      },
      {
        "name": "api.SVGLength.valueAsString",
        "result": true
      },
      {
        "name": "api.SVGLength.valueInSpecifiedUnits",
        "result": true
      },
      {
        "name": "api.SVGLengthList",
        "result": true
      },
      {
        "name": "api.SVGLengthList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.clear",
        "result": true
      },
      {
        "name": "api.SVGLengthList.getItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.initialize",
        "result": true
      },
      {
        "name": "api.SVGLengthList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGLengthList.length",
        "result": false
      },
      {
        "name": "api.SVGLengthList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGLengthList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGLengthList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.x1",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.x2",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.y1",
        "result": true
      },
      {
        "name": "api.SVGLinearGradientElement.y2",
        "result": true
      },
      {
        "name": "api.SVGLineElement",
        "result": true
      },
      {
        "name": "api.SVGLineElement.x1",
        "result": true
      },
      {
        "name": "api.SVGLineElement.x2",
        "result": true
      },
      {
        "name": "api.SVGLineElement.y1",
        "result": true
      },
      {
        "name": "api.SVGLineElement.y2",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerHeight",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerUnits",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.markerWidth",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.orient",
        "result": false
      },
      {
        "name": "api.SVGMarkerElement.orientAngle",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.orientType",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.refX",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.refY",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.setOrientToAngle",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.setOrientToAuto",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_AUTO",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_STROKEWIDTH",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.SVG_MARKERUNITS_USERSPACEONUSE",
        "result": true
      },
      {
        "name": "api.SVGMarkerElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGMaskElement",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.height",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.maskContentUnits",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.maskUnits",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.width",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.x",
        "result": true
      },
      {
        "name": "api.SVGMaskElement.y",
        "result": true
      },
      {
        "name": "api.SVGMetadataElement",
        "result": true
      },
      {
        "name": "api.SVGNumber",
        "result": true
      },
      {
        "name": "api.SVGNumber.value",
        "result": true
      },
      {
        "name": "api.SVGNumberList",
        "result": true
      },
      {
        "name": "api.SVGNumberList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.clear",
        "result": true
      },
      {
        "name": "api.SVGNumberList.getItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.initialize",
        "result": true
      },
      {
        "name": "api.SVGNumberList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGNumberList.length",
        "result": false
      },
      {
        "name": "api.SVGNumberList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGNumberList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGNumberList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGPathElement",
        "result": true
      },
      {
        "name": "api.SVGPatternElement",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.height",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.href",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternContentUnits",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternTransform",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.patternUnits",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.width",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.x",
        "result": true
      },
      {
        "name": "api.SVGPatternElement.y",
        "result": true
      },
      {
        "name": "api.SVGPointList",
        "result": true
      },
      {
        "name": "api.SVGPointList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.clear",
        "result": true
      },
      {
        "name": "api.SVGPointList.getItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.initialize",
        "result": true
      },
      {
        "name": "api.SVGPointList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGPointList.length",
        "result": false
      },
      {
        "name": "api.SVGPointList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGPointList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGPointList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement.animatedPoints",
        "result": true
      },
      {
        "name": "api.SVGPolygonElement.points",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement.animatedPoints",
        "result": true
      },
      {
        "name": "api.SVGPolylineElement.points",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.align",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.meetOrSlice",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_SLICE",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_MEETORSLICE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMIN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMAX",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMID",
        "result": true
      },
      {
        "name": "api.SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.cx",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.cy",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.fr",
        "result": false
      },
      {
        "name": "api.SVGRadialGradientElement.fx",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.fy",
        "result": true
      },
      {
        "name": "api.SVGRadialGradientElement.r",
        "result": true
      },
      {
        "name": "api.SVGRectElement",
        "result": true
      },
      {
        "name": "api.SVGRectElement.height",
        "result": true
      },
      {
        "name": "api.SVGRectElement.rx",
        "result": true
      },
      {
        "name": "api.SVGRectElement.ry",
        "result": true
      },
      {
        "name": "api.SVGRectElement.width",
        "result": true
      },
      {
        "name": "api.SVGRectElement.x",
        "result": true
      },
      {
        "name": "api.SVGRectElement.y",
        "result": true
      },
      {
        "name": "api.SVGScriptElement",
        "result": true
      },
      {
        "name": "api.SVGScriptElement.crossOrigin",
        "result": false
      },
      {
        "name": "api.SVGScriptElement.href",
        "result": true
      },
      {
        "name": "api.SVGScriptElement.type",
        "result": true
      },
      {
        "name": "api.SVGStopElement",
        "result": true
      },
      {
        "name": "api.SVGStopElement.offset",
        "result": true
      },
      {
        "name": "api.SVGStringList",
        "result": true
      },
      {
        "name": "api.SVGStringList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.clear",
        "result": true
      },
      {
        "name": "api.SVGStringList.getItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.initialize",
        "result": true
      },
      {
        "name": "api.SVGStringList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGStringList.length",
        "result": false
      },
      {
        "name": "api.SVGStringList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGStringList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGStringList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGStyleElement",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.media",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.sheet",
        "result": false
      },
      {
        "name": "api.SVGStyleElement.title",
        "result": true
      },
      {
        "name": "api.SVGStyleElement.type",
        "result": true
      },
      {
        "name": "api.SVGSVGElement",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.checkEnclosure",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.checkIntersection",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGAngle",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGLength",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGMatrix",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGNumber",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGPoint",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGRect",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGTransform",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.createSVGTransformFromMatrix",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.currentScale",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.currentTranslate",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.deselectAll",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.forceRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getElementById",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getEnclosureList",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.getIntersectionList",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.height",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.onafterprint",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onbeforeprint",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onbeforeunload",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onhashchange",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onlanguagechange",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onmessage",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onmessageerror",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onoffline",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.ononline",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpagehide",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpageshow",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onpopstate",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onstorage",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.SVGSVGElement.onunload",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.suspendRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_DISABLE",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_MAGNIFY",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.SVG_ZOOMANDPAN_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.unsuspendRedraw",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.unsuspendRedrawAll",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.width",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.x",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.y",
        "result": true
      },
      {
        "name": "api.SVGSVGElement.zoomAndPan",
        "result": true
      },
      {
        "name": "api.SVGSwitchElement",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGSymbolElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getCharNumAtPosition",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getComputedTextLength",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getEndPositionOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getExtentOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getNumberOfChars",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getRotationOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getStartPositionOfChar",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.getSubStringLength",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.lengthAdjust",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_SPACING",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_SPACINGANDGLYPHS",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.LENGTHADJUST_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.selectSubString",
        "result": true
      },
      {
        "name": "api.SVGTextContentElement.textLength",
        "result": true
      },
      {
        "name": "api.SVGTextElement",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.href",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.method",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.spacing",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.startOffset",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_ALIGN",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_STRETCH",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_METHODTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_AUTO",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_EXACT",
        "result": true
      },
      {
        "name": "api.SVGTextPathElement.TEXTPATH_SPACINGTYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.dx",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.dy",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.rotate",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.x",
        "result": true
      },
      {
        "name": "api.SVGTextPositioningElement.y",
        "result": true
      },
      {
        "name": "api.SVGTitleElement",
        "result": true
      },
      {
        "name": "api.SVGTransform",
        "result": true
      },
      {
        "name": "api.SVGTransform.angle",
        "result": true
      },
      {
        "name": "api.SVGTransform.matrix",
        "result": true
      },
      {
        "name": "api.SVGTransform.setMatrix",
        "result": true
      },
      {
        "name": "api.SVGTransform.setRotate",
        "result": true
      },
      {
        "name": "api.SVGTransform.setScale",
        "result": true
      },
      {
        "name": "api.SVGTransform.setSkewX",
        "result": true
      },
      {
        "name": "api.SVGTransform.setSkewY",
        "result": true
      },
      {
        "name": "api.SVGTransform.setTranslate",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_MATRIX",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_ROTATE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SCALE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SKEWX",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_SKEWY",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_TRANSLATE",
        "result": true
      },
      {
        "name": "api.SVGTransform.SVG_TRANSFORM_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGTransform.type",
        "result": true
      },
      {
        "name": "api.SVGTransformList",
        "result": true
      },
      {
        "name": "api.SVGTransformList.appendItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.clear",
        "result": true
      },
      {
        "name": "api.SVGTransformList.consolidate",
        "result": true
      },
      {
        "name": "api.SVGTransformList.createSVGTransformFromMatrix",
        "result": true
      },
      {
        "name": "api.SVGTransformList.getItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.initialize",
        "result": true
      },
      {
        "name": "api.SVGTransformList.insertItemBefore",
        "result": true
      },
      {
        "name": "api.SVGTransformList.length",
        "result": false
      },
      {
        "name": "api.SVGTransformList.numberOfItems",
        "result": true
      },
      {
        "name": "api.SVGTransformList.removeItem",
        "result": true
      },
      {
        "name": "api.SVGTransformList.replaceItem",
        "result": true
      },
      {
        "name": "api.SVGTSpanElement",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE",
        "result": true
      },
      {
        "name": "api.SVGUseElement",
        "result": true
      },
      {
        "name": "api.SVGUseElement.animatedInstanceRoot",
        "result": true
      },
      {
        "name": "api.SVGUseElement.height",
        "result": true
      },
      {
        "name": "api.SVGUseElement.href",
        "result": true
      },
      {
        "name": "api.SVGUseElement.instanceRoot",
        "result": true
      },
      {
        "name": "api.SVGUseElement.width",
        "result": true
      },
      {
        "name": "api.SVGUseElement.x",
        "result": true
      },
      {
        "name": "api.SVGUseElement.y",
        "result": true
      },
      {
        "name": "api.SVGUseElementShadowRoot",
        "result": false
      },
      {
        "name": "api.SVGViewElement",
        "result": true
      },
      {
        "name": "api.SVGViewElement.preserveAspectRatio",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_DISABLE",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_MAGNIFY",
        "result": true
      },
      {
        "name": "api.SVGViewElement.SVG_ZOOMANDPAN_UNKNOWN",
        "result": true
      },
      {
        "name": "api.SVGViewElement.viewBox",
        "result": true
      },
      {
        "name": "api.SVGViewElement.zoomAndPan",
        "result": true
      },
      {
        "name": "api.SyncManager",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'SyncManager' is undefined",
        "name": "api.SyncManager.getTags",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'SyncManager' is undefined",
        "name": "api.SyncManager.register",
        "result": null
      },
      {
        "name": "api.TaskAttributionTiming",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerSrc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TaskAttributionTiming' is undefined",
        "name": "api.TaskAttributionTiming.containerType",
        "result": null
      },
      {
        "name": "api.Text",
        "result": true
      },
      {
        "name": "api.Text.assignedSlot",
        "result": false
      },
      {
        "name": "api.Text.convertPointFromNode",
        "result": false
      },
      {
        "name": "api.Text.convertQuadFromNode",
        "result": false
      },
      {
        "name": "api.Text.convertRectFromNode",
        "result": false
      },
      {
        "name": "api.Text.getBoxQuads",
        "result": false
      },
      {
        "name": "api.Text.splitText",
        "result": true
      },
      {
        "name": "api.Text.wholeText",
        "result": true
      },
      {
        "name": "api.TextDecoder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.decode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.fatal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoder' is undefined",
        "name": "api.TextDecoder.ignoreBOM",
        "result": null
      },
      {
        "name": "api.TextDecoderStream",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.fatal",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.ignoreBOM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.readable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextDecoderStream' is undefined",
        "name": "api.TextDecoderStream.writable",
        "result": null
      },
      {
        "name": "api.TextEncoder",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encodeInto",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoder' is undefined",
        "name": "api.TextEncoder.encoding",
        "result": null
      },
      {
        "name": "api.TextEncoderStream",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.encoding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.readable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TextEncoderStream' is undefined",
        "name": "api.TextEncoderStream.writable",
        "result": null
      },
      {
        "name": "api.TextMetrics",
        "result": true
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxLeft",
        "result": false
      },
      {
        "name": "api.TextMetrics.actualBoundingBoxRight",
        "result": false
      },
      {
        "name": "api.TextMetrics.alphabeticBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.emHeightAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.emHeightDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.fontBoundingBoxAscent",
        "result": false
      },
      {
        "name": "api.TextMetrics.fontBoundingBoxDescent",
        "result": false
      },
      {
        "name": "api.TextMetrics.hangingBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.ideographicBaseline",
        "result": false
      },
      {
        "name": "api.TextMetrics.width",
        "result": true
      },
      {
        "name": "api.TextTrack",
        "result": true
      },
      {
        "name": "api.TextTrack.activeCues",
        "result": true
      },
      {
        "name": "api.TextTrack.addCue",
        "result": true
      },
      {
        "name": "api.TextTrack.cues",
        "result": true
      },
      {
        "name": "api.TextTrack.id",
        "result": false
      },
      {
        "name": "api.TextTrack.inBandMetadataTrackDispatchType",
        "result": true
      },
      {
        "name": "api.TextTrack.kind",
        "result": true
      },
      {
        "name": "api.TextTrack.label",
        "result": true
      },
      {
        "name": "api.TextTrack.language",
        "result": true
      },
      {
        "name": "api.TextTrack.mode",
        "result": true
      },
      {
        "name": "api.TextTrack.oncuechange",
        "result": true
      },
      {
        "name": "api.TextTrack.removeCue",
        "result": true
      },
      {
        "name": "api.TextTrack.sourceBuffer",
        "result": false
      },
      {
        "name": "api.TextTrackCue",
        "result": true
      },
      {
        "name": "api.TextTrackCue.endTime",
        "result": true
      },
      {
        "name": "api.TextTrackCue.id",
        "result": true
      },
      {
        "name": "api.TextTrackCue.onenter",
        "result": true
      },
      {
        "name": "api.TextTrackCue.onexit",
        "result": true
      },
      {
        "name": "api.TextTrackCue.pauseOnExit",
        "result": true
      },
      {
        "name": "api.TextTrackCue.startTime",
        "result": true
      },
      {
        "name": "api.TextTrackCue.track",
        "result": true
      },
      {
        "name": "api.TextTrackCueList",
        "result": true
      },
      {
        "name": "api.TextTrackCueList.getCueById",
        "result": true
      },
      {
        "name": "api.TextTrackCueList.length",
        "result": true
      },
      {
        "name": "api.TextTrackList",
        "result": true
      },
      {
        "name": "api.TextTrackList.getTrackById",
        "result": false
      },
      {
        "name": "api.TextTrackList.length",
        "result": true
      },
      {
        "name": "api.TextTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.TextTrackList.onchange",
        "result": false
      },
      {
        "name": "api.TextTrackList.onremovetrack",
        "result": false
      },
      {
        "name": "api.TimeRanges",
        "result": true
      },
      {
        "name": "api.TimeRanges.end",
        "result": true
      },
      {
        "name": "api.TimeRanges.length",
        "result": true
      },
      {
        "name": "api.TimeRanges.start",
        "result": true
      },
      {
        "name": "api.Touch",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.altitudeAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.azimuthAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.clientX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.clientY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.force",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.identifier",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.pageX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.pageY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.radiusX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.radiusY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.rotationAngle",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.screenX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.screenY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.target",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'Touch' is undefined",
        "name": "api.Touch.touchType",
        "result": null
      },
      {
        "name": "api.TouchEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.altKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.changedTouches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.ctrlKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.metaKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.shiftKey",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.targetTouches",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchEvent' is undefined",
        "name": "api.TouchEvent.touches",
        "result": null
      },
      {
        "name": "api.TouchList",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'TouchList' is undefined",
        "name": "api.TouchList.item",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'TouchList' is undefined",
        "name": "api.TouchList.length",
        "result": null
      },
      {
        "name": "api.TrackEvent",
        "result": true
      },
      {
        "name": "api.TrackEvent.track",
        "result": true
      },
      {
        "name": "api.TransitionEvent",
        "result": true
      },
      {
        "name": "api.TransitionEvent.elapsedTime",
        "result": true
      },
      {
        "name": "api.TransitionEvent.propertyName",
        "result": true
      },
      {
        "name": "api.TransitionEvent.pseudoElement",
        "result": false
      },
      {
        "name": "api.TreeWalker",
        "result": true
      },
      {
        "name": "api.TreeWalker.currentNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.filter",
        "result": true
      },
      {
        "name": "api.TreeWalker.firstChild",
        "result": true
      },
      {
        "name": "api.TreeWalker.lastChild",
        "result": true
      },
      {
        "name": "api.TreeWalker.nextNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.nextSibling",
        "result": true
      },
      {
        "name": "api.TreeWalker.parentNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.previousNode",
        "result": true
      },
      {
        "name": "api.TreeWalker.previousSibling",
        "result": true
      },
      {
        "name": "api.TreeWalker.root",
        "result": true
      },
      {
        "name": "api.TreeWalker.whatToShow",
        "result": true
      },
      {
        "name": "api.UIEvent",
        "result": true
      },
      {
        "name": "api.UIEvent.detail",
        "result": true
      },
      {
        "name": "api.UIEvent.sourceCapabilities",
        "result": false
      },
      {
        "name": "api.UIEvent.view",
        "result": true
      },
      {
        "name": "api.UIEvent.which",
        "result": false
      },
      {
        "name": "api.UncalibratedMagnetometer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.xBias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.yBias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'UncalibratedMagnetometer' is undefined",
        "name": "api.UncalibratedMagnetometer.zBias",
        "result": null
      },
      {
        "name": "api.URL",
        "result": true
      },
      {
        "name": "api.URL.createObjectURL",
        "result": true
      },
      {
        "name": "api.URL.createObjectURL",
        "result": true
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.hash",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.host",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.hostname",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.href",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.origin",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.password",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.pathname",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.port",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.protocol",
        "result": null
      },
      {
        "name": "api.URL.revokeObjectURL",
        "result": true
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.search",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.searchParams",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.toJSON",
        "result": null
      },
      {
        "message": "threw TypeError: Invalid operand to 'in': Object expected",
        "name": "api.URL.username",
        "result": null
      },
      {
        "name": "api.URLSearchParams",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.append",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.delete",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.get",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.getAll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.has",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.set",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'URLSearchParams' is undefined",
        "name": "api.URLSearchParams.sort",
        "result": null
      },
      {
        "name": "api.USB",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.getDevices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.onconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.ondisconnect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USB' is undefined",
        "name": "api.USB.requestDevice",
        "result": null
      },
      {
        "name": "api.USBAlternateInterface",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.alternateSetting",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.endpoints",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceClass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceProtocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBAlternateInterface' is undefined",
        "name": "api.USBAlternateInterface.interfaceSubclass",
        "result": null
      },
      {
        "name": "api.USBConfiguration",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.configurationName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.configurationValue",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBConfiguration' is undefined",
        "name": "api.USBConfiguration.interfaces",
        "result": null
      },
      {
        "name": "api.USBConnectionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBConnectionEvent' is undefined",
        "name": "api.USBConnectionEvent.device",
        "result": null
      },
      {
        "name": "api.USBDevice",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.claimInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.clearHalt",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.close",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.configuration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.configurations",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.controlTransferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.controlTransferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceClass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceProtocol",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceSubclass",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionMajor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionMinor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.deviceVersionSubminor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.isochronousTransferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.isochronousTransferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.manufacturerName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.open",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.opened",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.productId",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.productName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.releaseInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.reset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.selectAlternateInterface",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.selectConfiguration",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.serialNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.transferIn",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.transferOut",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionMajor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionMinor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.usbVersionSubminor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBDevice' is undefined",
        "name": "api.USBDevice.vendorId",
        "result": null
      },
      {
        "name": "api.USBEndpoint",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.endpointNumber",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.packetSize",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBEndpoint' is undefined",
        "name": "api.USBEndpoint.type",
        "result": null
      },
      {
        "name": "api.USBInterface",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.alternate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.alternates",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.claimed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInterface' is undefined",
        "name": "api.USBInterface.interfaceNumber",
        "result": null
      },
      {
        "name": "api.USBInTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBInTransferResult' is undefined",
        "name": "api.USBInTransferResult.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBInTransferResult' is undefined",
        "name": "api.USBInTransferResult.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousInTransferPacket",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferPacket' is undefined",
        "name": "api.USBIsochronousInTransferPacket.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferPacket' is undefined",
        "name": "api.USBIsochronousInTransferPacket.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousInTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferResult' is undefined",
        "name": "api.USBIsochronousInTransferResult.data",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousInTransferResult' is undefined",
        "name": "api.USBIsochronousInTransferResult.packets",
        "result": null
      },
      {
        "name": "api.USBIsochronousOutTransferPacket",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferPacket' is undefined",
        "name": "api.USBIsochronousOutTransferPacket.bytesWritten",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferPacket' is undefined",
        "name": "api.USBIsochronousOutTransferPacket.status",
        "result": null
      },
      {
        "name": "api.USBIsochronousOutTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBIsochronousOutTransferResult' is undefined",
        "name": "api.USBIsochronousOutTransferResult.packets",
        "result": null
      },
      {
        "name": "api.USBOutTransferResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBOutTransferResult' is undefined",
        "name": "api.USBOutTransferResult.bytesWritten",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'USBOutTransferResult' is undefined",
        "name": "api.USBOutTransferResult.status",
        "result": null
      },
      {
        "name": "api.USBPermissionResult",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'USBPermissionResult' is undefined",
        "name": "api.USBPermissionResult.devices",
        "result": null
      },
      {
        "name": "api.ValidityState",
        "result": true
      },
      {
        "name": "api.ValidityState.badInput",
        "result": true
      },
      {
        "name": "api.ValidityState.customError",
        "result": true
      },
      {
        "name": "api.ValidityState.patternMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.rangeOverflow",
        "result": true
      },
      {
        "name": "api.ValidityState.rangeUnderflow",
        "result": true
      },
      {
        "name": "api.ValidityState.stepMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.tooLong",
        "result": true
      },
      {
        "name": "api.ValidityState.tooShort",
        "result": false
      },
      {
        "name": "api.ValidityState.typeMismatch",
        "result": true
      },
      {
        "name": "api.ValidityState.valid",
        "result": true
      },
      {
        "name": "api.ValidityState.valueMissing",
        "result": true
      },
      {
        "name": "api.ValueEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'ValueEvent' is undefined",
        "name": "api.ValueEvent.value",
        "result": null
      },
      {
        "name": "api.VideoTrack",
        "result": true
      },
      {
        "name": "api.VideoTrack.id",
        "result": true
      },
      {
        "name": "api.VideoTrack.kind",
        "result": true
      },
      {
        "name": "api.VideoTrack.label",
        "result": true
      },
      {
        "name": "api.VideoTrack.language",
        "result": true
      },
      {
        "name": "api.VideoTrack.selected",
        "result": true
      },
      {
        "name": "api.VideoTrack.sourceBuffer",
        "result": true
      },
      {
        "name": "api.VideoTrackList",
        "result": true
      },
      {
        "name": "api.VideoTrackList.getTrackById",
        "result": true
      },
      {
        "name": "api.VideoTrackList.length",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onaddtrack",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onchange",
        "result": true
      },
      {
        "name": "api.VideoTrackList.onremovetrack",
        "result": true
      },
      {
        "name": "api.VideoTrackList.selectedIndex",
        "result": true
      },
      {
        "name": "api.VTTCue",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.align",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.getCueAsHTML",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.line",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.lineAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.position",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.positionAlign",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.region",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.size",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.snapToLines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.text",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTCue' is undefined",
        "name": "api.VTTCue.vertical",
        "result": null
      },
      {
        "name": "api.VTTRegion",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.id",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.lines",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.regionAnchorX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.regionAnchorY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.scroll",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.viewportAnchorX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.viewportAnchorY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'VTTRegion' is undefined",
        "name": "api.VTTRegion.width",
        "result": null
      },
      {
        "name": "api.WakeLock",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WakeLock' is undefined",
        "name": "api.WakeLock.request",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WakeLock' is undefined",
        "name": "api.WakeLock.requestPermission",
        "result": null
      },
      {
        "name": "api.WaveShaperNode",
        "result": true
      },
      {
        "name": "api.WaveShaperNode.curve",
        "result": true
      },
      {
        "name": "api.WaveShaperNode.oversample",
        "result": true
      },
      {
        "name": "api.WebGL2RenderingContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_ATTRIBUTES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ACTIVE_UNIFORMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.activeTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALIASED_LINE_WIDTH_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALIASED_POINT_SIZE_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALPHA_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALREADY_SIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ALWAYS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ANY_SAMPLES_PASSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ANY_SAMPLES_PASSED_CONSERVATIVE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ARRAY_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ATTACHED_SHADERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.attachShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.beginQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.beginTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindAttribLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBufferBase",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindBufferRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bindVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_DST_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_EQUATION_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLEND_SRC_RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendEquation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendEquationSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blendFuncSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.blitFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BLUE_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BOOL_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BROWSER_DEFAULT_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BUFFER_USAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.bufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.BYTE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.canvas",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CCW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.checkFramebufferStatus",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CLAMP_TO_EDGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferfi",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferfv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearBufferuiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearColor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearDepth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clearStencil",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.clientWaitSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_ATTACHMENT9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COLOR_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.colorMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPARE_REF_TO_TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPILE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compileShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COMPRESSED_TEXTURE_FORMATS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.compressedTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONDITION_SATISFIED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONSTANT_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONSTANT_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CONTEXT_LOST_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_READ_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_READ_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_WRITE_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.COPY_WRITE_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyBufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.copyTexSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.createVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CULL_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CULL_FACE_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.cullFace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_PROGRAM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_QUERY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CURRENT_VERTEX_ATTRIB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.CW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DECR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DECR_WRAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DELETE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.deleteVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT16",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_COMPONENT32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_RANGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_STENCIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_STENCIL_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH24_STENCIL8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DEPTH32F_STENCIL8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.depthRange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.detachShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.disable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.disableVertexAttribArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DITHER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DONT_CARE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_BUFFER9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DRAW_FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawArrays",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawArraysInstanced",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawBuffers",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawElementsInstanced",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawingBufferHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawingBufferWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.drawRangeElements",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DST_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.DYNAMIC_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.enable",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.enableVertexAttribArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.endQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.endTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.EQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FASTEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.fenceSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.finish",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_32_UNSIGNED_INT_24_8_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2x3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT2x4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3x2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT3x4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4x2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_MAT4x3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FLOAT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.flush",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAGMENT_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAGMENT_SHADER_DERIVATIVE_HINT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_COMPLETE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_DEFAULT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRAMEBUFFER_UNSUPPORTED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferTexture2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.framebufferTextureLayer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT_AND_BACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FRONT_FACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.frontFace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_ADD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.FUNC_SUBTRACT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GENERATE_MIPMAP_HINT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.generateMipmap",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveAttrib",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniformBlockName",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniformBlockParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getActiveUniforms",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getAttachedShaders",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getAttribLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getBufferParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getBufferSubData",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getContextAttributes",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getError",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getExtension",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getFragDataLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getFramebufferAttachmentParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getIndexedParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getInternalformatParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getProgramInfoLog",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getProgramParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getQueryParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getRenderbufferParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSamplerParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderInfoLog",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderPrecisionFormat",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getShaderSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSupportedExtensions",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getSyncParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getTexParameter",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getTransformFeedbackVarying",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniform",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformBlockIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformIndices",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getUniformLocation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getVertexAttrib",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.getVertexAttribOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GREATER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.GREEN_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HALF_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HIGH_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.HIGH_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.hint",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INCR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INCR_WRAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_2_10_10_10_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INTERLEAVED_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_ENUM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_FRAMEBUFFER_OPERATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_OPERATION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVALID_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.invalidateFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.invalidateSubFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.INVERT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isContextLost",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isEnabled",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isFramebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isQuery",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isRenderbuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isSampler",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isShader",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isTexture",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.isVertexArray",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.KEEP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LESS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_LOOP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_STRIP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINE_WIDTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR_MIPMAP_LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINEAR_MIPMAP_NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.lineWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LINK_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.linkProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LOW_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LOW_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LUMINANCE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.LUMINANCE_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.makeXRCompatible",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_CLIENT_WAIT_TIMEOUT_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_DRAW_BUFFERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENT_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENTS_INDICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_ELEMENTS_VERTICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_INPUT_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_PROGRAM_TEXEL_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_RENDERBUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_SERVER_WAIT_TIMEOUT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_LOD_BIAS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TEXTURE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_UNIFORM_BLOCK_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_UNIFORM_BUFFER_BINDINGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VARYING_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VARYING_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_OUTPUT_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_BLOCKS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_COMPONENTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VERTEX_UNIFORM_VECTORS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MAX_VIEWPORT_DIMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MEDIUM_FLOAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MEDIUM_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIN_PROGRAM_TEXEL_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.MIRRORED_REPEAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST_MIPMAP_LINEAR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEAREST_MIPMAP_NEAREST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NEVER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NICEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NO_ERROR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NONE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.NOTEQUAL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.OBJECT_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_DST_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_DST_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ONE_MINUS_SRC_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.OUT_OF_MEMORY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_ROW_LENGTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_SKIP_PIXELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PACK_SKIP_ROWS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.pauseTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_PACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_PACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_UNPACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.PIXEL_UNPACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.pixelStorei",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POINTS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_FACTOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_FILL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.POLYGON_OFFSET_UNITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.polygonOffset",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.QUERY_RESULT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.QUERY_RESULT_AVAILABLE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R11F_G11F_B10F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.R8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RASTERIZER_DISCARD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_FRAMEBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.READ_FRAMEBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readBuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.readPixels",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RED_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_ALPHA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_BLUE_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_DEPTH_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_GREEN_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_HEIGHT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_INTERNAL_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_RED_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_STENCIL_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERBUFFER_WIDTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.renderbufferStorage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.renderbufferStorageMultisample",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RENDERER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.REPEAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.REPLACE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.resumeTransformFeedback",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RG8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB10_A2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB10_A2UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB5_A1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB565",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGB9_E5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA16UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32F",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA32UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8_SNORM",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8I",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.RGBA8UI",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_ALPHA_TO_COVERAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_BUFFERS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE_INVERT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLE_COVERAGE_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.sampleCoverage",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_ARRAY_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_2D_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLER_CUBE_SHADOW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.samplerParameterf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.samplerParameteri",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SAMPLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.scissor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SCISSOR_BOX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SCISSOR_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SEPARATE_ATTRIBS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHADER_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.shaderSource",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHADING_LANGUAGE_VERSION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SHORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SIGNED_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_ALPHA",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_ALPHA_SATURATE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRC_COLOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SRGB8_ALPHA8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STATIC_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_ATTACHMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_PASS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_REF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_VALUE_MASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BACK_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_BUFFER_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_CLEAR_VALUE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_INDEX8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_PASS_DEPTH_FAIL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_PASS_DEPTH_PASS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_REF",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_TEST",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_VALUE_MASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STENCIL_WRITEMASK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilFunc",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilFuncSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilMask",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilMaskSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilOp",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.stencilOpSeparate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_COPY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_DRAW",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.STREAM_READ",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SUBPIXEL_BITS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_CONDITION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FENCE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FLAGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_FLUSH_COMMANDS_BIT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_GPU_COMMANDS_COMPLETE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.SYNC_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texParameterf",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texParameteri",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texStorage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texStorage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.texSubImage3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BASE_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_BINDING_CUBE_MAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_COMPARE_FUNC",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_COMPARE_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_IMMUTABLE_FORMAT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_IMMUTABLE_LEVELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAG_FILTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAX_LEVEL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MAX_LOD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MIN_FILTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_MIN_LOD",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_R",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_S",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE_WRAP_T",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE0",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE10",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE11",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE12",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE13",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE14",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE15",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE16",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE17",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE18",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE19",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE20",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE21",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE22",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE23",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE24",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE25",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE26",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE27",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE28",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE29",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE30",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE31",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE6",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE7",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TEXTURE9",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TIMEOUT_EXPIRED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TIMEOUT_IGNORED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_ACTIVE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_MODE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_START",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_PAUSED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRANSFORM_FEEDBACK_VARYINGS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.transformFeedbackVaryings",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLE_FAN",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLE_STRIP",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.TRIANGLES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_ARRAY_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_DATA_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_INDEX",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_BUFFER_START",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_IS_ROW_MAJOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_MATRIX_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_OFFSET",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNIFORM_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform1uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform2uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform3uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniform4uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformBlockBinding",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2x3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix2x4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3x2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix3x4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4x2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.uniformMatrix4x3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_ALIGNMENT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_FLIP_Y_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_IMAGE_HEIGHT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_ROW_LENGTH",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_IMAGES",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_PIXELS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNPACK_SKIP_ROWS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNALED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_BYTE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_10F_11F_11F_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_2_10_10_10_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_24_8",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_5_9_9_9_REV",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D_ARRAY",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_3D",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_CUBE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC2",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC3",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_INT_VEC4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_4_4_4_4",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_5_5_5_1",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.UNSIGNED_SHORT_5_6_5",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.useProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VALIDATE_STATUS",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.validateProgram",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VENDOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERSION",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ARRAY_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_DIVISOR",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_INTEGER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_POINTER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_SIZE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_TYPE",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VERTEX_SHADER",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib1f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib1fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib2f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib2fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib3f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib3fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib4f",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttrib4fv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribDivisor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4i",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4iv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4ui",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribI4uiv",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribIPointer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.vertexAttribPointer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.viewport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.VIEWPORT",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.WAIT_FAILED",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.waitSync",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebGL2RenderingContext' is undefined",
        "name": "api.WebGL2RenderingContext.ZERO",
        "result": null
      },
      {
        "name": "api.WebGLActiveInfo",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.name",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.size",
        "result": true
      },
      {
        "name": "api.WebGLActiveInfo.type",
        "result": true
      },
      {
        "name": "api.WebGLBuffer",
        "result": true
      },
      {
        "name": "api.WebGLContextEvent",
        "result": true
      },
      {
        "name": "api.WebGLContextEvent.statusMessage",
        "result": true
      },
      {
        "name": "api.WebGLFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLObject",
        "result": true
      },
      {
        "name": "api.WebGLProgram",
        "result": true
      },
      {
        "name": "api.WebGLQuery",
        "result": false
      },
      {
        "name": "api.WebGLRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_ATTRIBUTES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_TEXTURE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ACTIVE_UNIFORMS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.activeTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALIASED_LINE_WIDTH_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALIASED_POINT_SIZE_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALPHA_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ALWAYS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ARRAY_BUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ATTACHED_SHADERS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.attachShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BACK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindAttribLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bindTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_DST_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_EQUATION_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLEND_SRC_RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendColor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendEquation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendEquationSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.blendFuncSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BLUE_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BOOL_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BROWSER_DEFAULT_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BUFFER_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BUFFER_USAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.bufferSubData",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.BYTE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.canvas",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.canvas",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CCW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.checkFramebufferStatus",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CLAMP_TO_EDGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clear",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearColor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearDepth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.clearStencil",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_ATTACHMENT0",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COLOR_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.colorMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COMPILE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compileShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.COMPRESSED_TEXTURE_FORMATS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compressedTexImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.compressedTexSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONSTANT_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONSTANT_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CONTEXT_LOST_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.copyTexImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.copyTexSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.createTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CULL_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CULL_FACE_MODE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.cullFace",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CURRENT_PROGRAM",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CURRENT_VERTEX_ATTRIB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.CW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DECR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DECR_WRAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DELETE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.deleteTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_COMPONENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_COMPONENT16",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_RANGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_STENCIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DEPTH_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.depthRange",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.detachShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.disable",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.disableVertexAttribArray",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DITHER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DONT_CARE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawArrays",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawElements",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawingBufferHeight",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.drawingBufferWidth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DST_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.DYNAMIC_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ELEMENT_ARRAY_BUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ELEMENT_ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.enable",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.enableVertexAttribArray",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.EQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FASTEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.finish",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_MAT4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FLOAT_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.flush",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAGMENT_SHADER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_COMPLETE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRAMEBUFFER_UNSUPPORTED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.framebufferRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.framebufferTexture2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT_AND_BACK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FRONT_FACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.frontFace",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_ADD",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_REVERSE_SUBTRACT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.FUNC_SUBTRACT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GENERATE_MIPMAP_HINT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.generateMipmap",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getActiveAttrib",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getActiveUniform",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getAttachedShaders",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getAttribLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getBufferParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getContextAttributes",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getError",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getExtension",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getFramebufferAttachmentParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getProgramInfoLog",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getProgramParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getRenderbufferParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderInfoLog",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderPrecisionFormat",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getShaderSource",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getSupportedExtensions",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getTexParameter",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getUniform",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getUniformLocation",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getVertexAttrib",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.getVertexAttribOffset",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GREATER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.GREEN_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.HIGH_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.HIGH_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.hint",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INCR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INCR_WRAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INT_VEC4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_ENUM",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_FRAMEBUFFER_OPERATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_OPERATION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVALID_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.INVERT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isBuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isContextLost",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isEnabled",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isFramebuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isRenderbuffer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isShader",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.isTexture",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.KEEP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LESS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_LOOP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_STRIP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINE_WIDTH",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR_MIPMAP_LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINEAR_MIPMAP_NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.lineWidth",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LINK_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.linkProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LOW_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LOW_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LUMINANCE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.LUMINANCE_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.makeXRCompatible",
        "result": false
      },
      {
        "name": "api.WebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_RENDERBUFFER_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_TEXTURE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VARYING_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_ATTRIBS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VERTEX_UNIFORM_VECTORS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MAX_VIEWPORT_DIMS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MEDIUM_FLOAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MEDIUM_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.MIRRORED_REPEAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST_MIPMAP_LINEAR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEAREST_MIPMAP_NEAREST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NEVER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NICEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NO_ERROR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NONE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.NOTEQUAL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_DST_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_DST_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ONE_MINUS_SRC_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.OUT_OF_MEMORY",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.PACK_ALIGNMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.pixelStorei",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POINTS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_FACTOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_FILL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.POLYGON_OFFSET_UNITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.polygonOffset",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.readPixels",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RED_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_ALPHA_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_BLUE_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_DEPTH_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_GREEN_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_HEIGHT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_INTERNAL_FORMAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_RED_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_STENCIL_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERBUFFER_WIDTH",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.renderbufferStorage",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RENDERER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.REPEAT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.REPLACE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB5_A1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGB565",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGBA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.RGBA4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_ALPHA_TO_COVERAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_BUFFERS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE_INVERT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLE_COVERAGE_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.sampleCoverage",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLER_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLER_CUBE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SAMPLES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.scissor",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SCISSOR_BOX",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SCISSOR_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHADER_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.shaderSource",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHADING_LANGUAGE_VERSION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SHORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_ALPHA",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_ALPHA_SATURATE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SRC_COLOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STATIC_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_ATTACHMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_PASS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_REF",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_VALUE_MASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BACK_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_BUFFER_BIT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_CLEAR_VALUE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_FUNC",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_INDEX8",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_PASS_DEPTH_FAIL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_PASS_DEPTH_PASS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_REF",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_TEST",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_VALUE_MASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STENCIL_WRITEMASK",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilFunc",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilFuncSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilMask",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilMaskSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilOp",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.stencilOpSeparate",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.STREAM_DRAW",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.SUBPIXEL_BITS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texParameterf",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texParameteri",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.texSubImage2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_BINDING_2D",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_BINDING_CUBE_MAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_MAG_FILTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_MIN_FILTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_WRAP_S",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE_WRAP_T",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE0",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE10",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE11",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE12",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE13",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE14",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE15",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE16",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE17",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE18",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE19",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE2",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE20",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE21",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE22",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE23",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE24",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE25",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE26",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE27",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE28",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE29",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE3",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE30",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE31",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE5",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE6",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE7",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE8",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TEXTURE9",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLE_FAN",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLE_STRIP",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.TRIANGLES",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform1iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform2iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform3iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4i",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniform4iv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.uniformMatrix4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_ALIGNMENT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_BYTE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_INT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.UNSIGNED_SHORT_5_6_5",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.useProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VALIDATE_STATUS",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.validateProgram",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VENDOR",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERSION",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_POINTER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_SIZE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_TYPE",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VERTEX_SHADER",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib1f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib1fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib2f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib2fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib3f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib3fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib4f",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttrib4fv",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.vertexAttribPointer",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.viewport",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.VIEWPORT",
        "result": true
      },
      {
        "name": "api.WebGLRenderingContext.ZERO",
        "result": true
      },
      {
        "name": "api.WebGLSampler",
        "result": false
      },
      {
        "name": "api.WebGLShader",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.precision",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.rangeMax",
        "result": true
      },
      {
        "name": "api.WebGLShaderPrecisionFormat.rangeMin",
        "result": true
      },
      {
        "name": "api.WebGLSync",
        "result": false
      },
      {
        "name": "api.WebGLTexture",
        "result": true
      },
      {
        "name": "api.WebGLTransformFeedback",
        "result": false
      },
      {
        "name": "api.WebGLUniformLocation",
        "result": true
      },
      {
        "name": "api.WebGLVertexArrayObject",
        "result": false
      },
      {
        "name": "api.WebSocket",
        "result": true
      },
      {
        "name": "api.WebSocket.binaryType",
        "result": true
      },
      {
        "name": "api.WebSocket.bufferedAmount",
        "result": true
      },
      {
        "name": "api.WebSocket.close",
        "result": true
      },
      {
        "name": "api.WebSocket.CLOSED",
        "result": true
      },
      {
        "name": "api.WebSocket.CLOSING",
        "result": true
      },
      {
        "name": "api.WebSocket.CONNECTING",
        "result": true
      },
      {
        "name": "api.WebSocket.extensions",
        "result": true
      },
      {
        "name": "api.WebSocket.onclose",
        "result": true
      },
      {
        "name": "api.WebSocket.onerror",
        "result": true
      },
      {
        "name": "api.WebSocket.onmessage",
        "result": true
      },
      {
        "name": "api.WebSocket.onopen",
        "result": true
      },
      {
        "name": "api.WebSocket.OPEN",
        "result": true
      },
      {
        "name": "api.WebSocket.protocol",
        "result": true
      },
      {
        "name": "api.WebSocket.readyState",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.send",
        "result": true
      },
      {
        "name": "api.WebSocket.url",
        "result": true
      },
      {
        "name": "api.WheelEvent",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaMode",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaX",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaY",
        "result": true
      },
      {
        "name": "api.WheelEvent.deltaZ",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_LINE",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_PAGE",
        "result": true
      },
      {
        "name": "api.WheelEvent.DOM_DELTA_PIXEL",
        "result": true
      },
      {
        "name": "api.Window",
        "result": true
      },
      {
        "name": "api.Window.alert",
        "result": true
      },
      {
        "name": "api.Window.alert",
        "result": true
      },
      {
        "name": "api.Window.applicationCache",
        "result": true
      },
      {
        "name": "api.Window.atob",
        "result": true
      },
      {
        "name": "api.Window.blur",
        "result": true
      },
      {
        "name": "api.Window.btoa",
        "result": true
      },
      {
        "name": "api.Window.caches",
        "result": false
      },
      {
        "name": "api.Window.cancelAnimationFrame",
        "result": true
      },
      {
        "name": "api.Window.cancelIdleCallback",
        "result": false
      },
      {
        "name": "api.Window.captureEvents",
        "result": true
      },
      {
        "name": "api.Window.clearInterval",
        "result": true
      },
      {
        "name": "api.Window.clearTimeout",
        "result": true
      },
      {
        "name": "api.Window.close",
        "result": true
      },
      {
        "name": "api.Window.closed",
        "result": true
      },
      {
        "name": "api.Window.confirm",
        "result": true
      },
      {
        "name": "api.Window.cookieStore",
        "result": false
      },
      {
        "name": "api.Window.createImageBitmap",
        "result": false
      },
      {
        "name": "api.Window.createImageBitmap",
        "result": false
      },
      {
        "name": "api.Window.crypto",
        "result": true
      },
      {
        "name": "api.Window.customElements",
        "result": false
      },
      {
        "name": "api.Window.devicePixelRatio",
        "result": true
      },
      {
        "name": "api.Window.document",
        "result": true
      },
      {
        "name": "api.Window.event",
        "result": true
      },
      {
        "name": "api.Window.external",
        "result": true
      },
      {
        "name": "api.Window.fetch",
        "result": false
      },
      {
        "name": "api.Window.focus",
        "result": true
      },
      {
        "name": "api.Window.frameElement",
        "result": true
      },
      {
        "name": "api.Window.frames",
        "result": true
      },
      {
        "name": "api.Window.getComputedStyle",
        "result": true
      },
      {
        "name": "api.Window.getSelection",
        "result": true
      },
      {
        "name": "api.Window.history",
        "result": true
      },
      {
        "name": "api.Window.indexedDB",
        "result": true
      },
      {
        "name": "api.Window.innerHeight",
        "result": true
      },
      {
        "name": "api.Window.innerWidth",
        "result": true
      },
      {
        "name": "api.Window.isSecureContext",
        "result": false
      },
      {
        "name": "api.Window.length",
        "result": true
      },
      {
        "name": "api.Window.localStorage",
        "result": true
      },
      {
        "name": "api.Window.location",
        "result": true
      },
      {
        "name": "api.Window.locationbar",
        "result": true
      },
      {
        "name": "api.Window.matchMedia",
        "result": true
      },
      {
        "name": "api.Window.menubar",
        "result": true
      },
      {
        "name": "api.Window.moveBy",
        "result": true
      },
      {
        "name": "api.Window.moveTo",
        "result": true
      },
      {
        "name": "api.Window.name",
        "result": true
      },
      {
        "name": "api.Window.navigator",
        "result": true
      },
      {
        "name": "api.Window.onabort",
        "result": true
      },
      {
        "name": "api.Window.onafterprint",
        "result": true
      },
      {
        "name": "api.Window.onanimationcancel",
        "result": false
      },
      {
        "name": "api.Window.onanimationend",
        "result": false
      },
      {
        "name": "api.Window.onanimationiteration",
        "result": false
      },
      {
        "name": "api.Window.onanimationstart",
        "result": false
      },
      {
        "name": "api.Window.onappinstalled",
        "result": false
      },
      {
        "name": "api.Window.onauxclick",
        "result": false
      },
      {
        "name": "api.Window.onbeforeinstallprompt",
        "result": false
      },
      {
        "name": "api.Window.onbeforeprint",
        "result": true
      },
      {
        "name": "api.Window.onbeforeunload",
        "result": true
      },
      {
        "name": "api.Window.onblur",
        "result": true
      },
      {
        "name": "api.Window.oncancel",
        "result": false
      },
      {
        "name": "api.Window.oncanplay",
        "result": true
      },
      {
        "name": "api.Window.oncanplaythrough",
        "result": true
      },
      {
        "name": "api.Window.onchange",
        "result": true
      },
      {
        "name": "api.Window.onclick",
        "result": true
      },
      {
        "name": "api.Window.onclose",
        "result": false
      },
      {
        "name": "api.Window.oncontextmenu",
        "result": true
      },
      {
        "name": "api.Window.oncuechange",
        "result": false
      },
      {
        "name": "api.Window.ondblclick",
        "result": true
      },
      {
        "name": "api.Window.ondevicemotion",
        "result": true
      },
      {
        "name": "api.Window.ondeviceorientation",
        "result": true
      },
      {
        "name": "api.Window.ondrag",
        "result": true
      },
      {
        "name": "api.Window.ondragend",
        "result": true
      },
      {
        "name": "api.Window.ondragenter",
        "result": true
      },
      {
        "name": "api.Window.ondragexit",
        "result": false
      },
      {
        "name": "api.Window.ondragleave",
        "result": true
      },
      {
        "name": "api.Window.ondragover",
        "result": true
      },
      {
        "name": "api.Window.ondragstart",
        "result": true
      },
      {
        "name": "api.Window.ondrop",
        "result": true
      },
      {
        "name": "api.Window.ondurationchange",
        "result": true
      },
      {
        "name": "api.Window.onemptied",
        "result": true
      },
      {
        "name": "api.Window.onended",
        "result": true
      },
      {
        "name": "api.Window.onerror",
        "result": true
      },
      {
        "name": "api.Window.onfocus",
        "result": true
      },
      {
        "name": "api.Window.onformdata",
        "result": false
      },
      {
        "name": "api.Window.ongotpointercapture",
        "result": false
      },
      {
        "name": "api.Window.onhashchange",
        "result": true
      },
      {
        "name": "api.Window.oninput",
        "result": true
      },
      {
        "name": "api.Window.oninvalid",
        "result": false
      },
      {
        "name": "api.Window.onkeydown",
        "result": true
      },
      {
        "name": "api.Window.onkeypress",
        "result": true
      },
      {
        "name": "api.Window.onkeyup",
        "result": true
      },
      {
        "name": "api.Window.onlanguagechange",
        "result": false
      },
      {
        "name": "api.Window.onload",
        "result": true
      },
      {
        "name": "api.Window.onloadeddata",
        "result": true
      },
      {
        "name": "api.Window.onloadedmetadata",
        "result": true
      },
      {
        "name": "api.Window.onloadend",
        "result": false
      },
      {
        "name": "api.Window.onloadstart",
        "result": true
      },
      {
        "name": "api.Window.onlostpointercapture",
        "result": false
      },
      {
        "name": "api.Window.onmessage",
        "result": true
      },
      {
        "name": "api.Window.onmessageerror",
        "result": false
      },
      {
        "name": "api.Window.onmousedown",
        "result": true
      },
      {
        "name": "api.Window.onmouseenter",
        "result": true
      },
      {
        "name": "api.Window.onmouseleave",
        "result": true
      },
      {
        "name": "api.Window.onmousemove",
        "result": true
      },
      {
        "name": "api.Window.onmouseout",
        "result": true
      },
      {
        "name": "api.Window.onmouseover",
        "result": true
      },
      {
        "name": "api.Window.onmouseup",
        "result": true
      },
      {
        "name": "api.Window.onoffline",
        "result": true
      },
      {
        "name": "api.Window.ononline",
        "result": true
      },
      {
        "name": "api.Window.onorientationchange",
        "result": false
      },
      {
        "name": "api.Window.onpagehide",
        "result": true
      },
      {
        "name": "api.Window.onpageshow",
        "result": true
      },
      {
        "name": "api.Window.onpause",
        "result": true
      },
      {
        "name": "api.Window.onplay",
        "result": true
      },
      {
        "name": "api.Window.onplaying",
        "result": true
      },
      {
        "name": "api.Window.onpointercancel",
        "result": true
      },
      {
        "name": "api.Window.onpointerdown",
        "result": true
      },
      {
        "name": "api.Window.onpointerenter",
        "result": true
      },
      {
        "name": "api.Window.onpointerleave",
        "result": true
      },
      {
        "name": "api.Window.onpointermove",
        "result": true
      },
      {
        "name": "api.Window.onpointerout",
        "result": true
      },
      {
        "name": "api.Window.onpointerover",
        "result": true
      },
      {
        "name": "api.Window.onpointerup",
        "result": true
      },
      {
        "name": "api.Window.onpopstate",
        "result": true
      },
      {
        "name": "api.Window.onprogress",
        "result": true
      },
      {
        "name": "api.Window.onratechange",
        "result": true
      },
      {
        "name": "api.Window.onrejectionhandled",
        "result": false
      },
      {
        "name": "api.Window.onreset",
        "result": true
      },
      {
        "name": "api.Window.onresize",
        "result": true
      },
      {
        "name": "api.Window.onscroll",
        "result": true
      },
      {
        "name": "api.Window.onsecuritypolicyviolation",
        "result": false
      },
      {
        "name": "api.Window.onseeked",
        "result": true
      },
      {
        "name": "api.Window.onseeking",
        "result": true
      },
      {
        "name": "api.Window.onselect",
        "result": true
      },
      {
        "name": "api.Window.onselectionchange",
        "result": false
      },
      {
        "name": "api.Window.onselectstart",
        "result": false
      },
      {
        "name": "api.Window.onstalled",
        "result": true
      },
      {
        "name": "api.Window.onstorage",
        "result": true
      },
      {
        "name": "api.Window.onsubmit",
        "result": true
      },
      {
        "name": "api.Window.onsuspend",
        "result": true
      },
      {
        "name": "api.Window.ontimeupdate",
        "result": true
      },
      {
        "name": "api.Window.ontoggle",
        "result": false
      },
      {
        "name": "api.Window.ontouchcancel",
        "result": false
      },
      {
        "name": "api.Window.ontouchend",
        "result": false
      },
      {
        "name": "api.Window.ontouchmove",
        "result": false
      },
      {
        "name": "api.Window.ontouchstart",
        "result": false
      },
      {
        "name": "api.Window.ontransitioncancel",
        "result": false
      },
      {
        "name": "api.Window.ontransitionend",
        "result": false
      },
      {
        "name": "api.Window.ontransitionrun",
        "result": false
      },
      {
        "name": "api.Window.ontransitionstart",
        "result": false
      },
      {
        "name": "api.Window.onunhandledrejection",
        "result": false
      },
      {
        "name": "api.Window.onunload",
        "result": true
      },
      {
        "name": "api.Window.onvolumechange",
        "result": true
      },
      {
        "name": "api.Window.onwaiting",
        "result": true
      },
      {
        "name": "api.Window.onwheel",
        "result": true
      },
      {
        "name": "api.Window.open",
        "result": true
      },
      {
        "name": "api.Window.opener",
        "result": true
      },
      {
        "name": "api.Window.orientation",
        "result": false
      },
      {
        "name": "api.Window.origin",
        "result": false
      },
      {
        "name": "api.Window.outerHeight",
        "result": true
      },
      {
        "name": "api.Window.outerWidth",
        "result": true
      },
      {
        "name": "api.Window.pageXOffset",
        "result": true
      },
      {
        "name": "api.Window.pageYOffset",
        "result": true
      },
      {
        "name": "api.Window.parent",
        "result": true
      },
      {
        "name": "api.Window.performance",
        "result": true
      },
      {
        "name": "api.Window.personalbar",
        "result": true
      },
      {
        "name": "api.Window.postMessage",
        "result": true
      },
      {
        "name": "api.Window.postMessage",
        "result": true
      },
      {
        "name": "api.Window.print",
        "result": true
      },
      {
        "name": "api.Window.prompt",
        "result": true
      },
      {
        "name": "api.Window.queueMicrotask",
        "result": false
      },
      {
        "name": "api.Window.releaseEvents",
        "result": true
      },
      {
        "name": "api.Window.requestAnimationFrame",
        "result": true
      },
      {
        "name": "api.Window.requestIdleCallback",
        "result": false
      },
      {
        "name": "api.Window.resizeBy",
        "result": true
      },
      {
        "name": "api.Window.resizeTo",
        "result": true
      },
      {
        "name": "api.Window.screen",
        "result": true
      },
      {
        "name": "api.Window.screenLeft",
        "result": true
      },
      {
        "name": "api.Window.screenTop",
        "result": true
      },
      {
        "name": "api.Window.screenX",
        "result": true
      },
      {
        "name": "api.Window.screenY",
        "result": true
      },
      {
        "name": "api.Window.scroll",
        "result": true
      },
      {
        "name": "api.Window.scroll",
        "result": true
      },
      {
        "name": "api.Window.scrollbars",
        "result": true
      },
      {
        "name": "api.Window.scrollBy",
        "result": true
      },
      {
        "name": "api.Window.scrollBy",
        "result": true
      },
      {
        "name": "api.Window.scrollTo",
        "result": true
      },
      {
        "name": "api.Window.scrollTo",
        "result": true
      },
      {
        "name": "api.Window.scrollX",
        "result": true
      },
      {
        "name": "api.Window.scrollY",
        "result": true
      },
      {
        "name": "api.Window.self",
        "result": true
      },
      {
        "name": "api.Window.sessionStorage",
        "result": true
      },
      {
        "name": "api.Window.setInterval",
        "result": true
      },
      {
        "name": "api.Window.setTimeout",
        "result": true
      },
      {
        "name": "api.Window.speechSynthesis",
        "result": false
      },
      {
        "name": "api.Window.status",
        "result": true
      },
      {
        "name": "api.Window.statusbar",
        "result": true
      },
      {
        "name": "api.Window.stop",
        "result": false
      },
      {
        "name": "api.Window.toolbar",
        "result": true
      },
      {
        "name": "api.Window.top",
        "result": true
      },
      {
        "name": "api.Window.window",
        "result": true
      },
      {
        "name": "api.Worker",
        "result": true
      },
      {
        "name": "api.Worker.onerror",
        "result": true
      },
      {
        "name": "api.Worker.onmessage",
        "result": true
      },
      {
        "name": "api.Worker.onmessageerror",
        "result": false
      },
      {
        "name": "api.Worker.postMessage",
        "result": true
      },
      {
        "name": "api.Worker.postMessage",
        "result": true
      },
      {
        "name": "api.Worker.terminate",
        "result": true
      },
      {
        "name": "api.Worklet",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'Worklet' is undefined",
        "name": "api.Worklet.addModule",
        "result": null
      },
      {
        "name": "api.WorkletAnimation",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WorkletAnimation' is undefined",
        "name": "api.WorkletAnimation.animatorName",
        "result": null
      },
      {
        "name": "api.XMLDocument",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.abort",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.DONE",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.getAllResponseHeaders",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.getResponseHeader",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.HEADERS_RECEIVED",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.LOADING",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.onreadystatechange",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.open",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.open",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.OPENED",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.overrideMimeType",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.readyState",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.response",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseText",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseType",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.responseURL",
        "result": false
      },
      {
        "name": "api.XMLHttpRequest.responseXML",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.send",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.setRequestHeader",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.status",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.statusText",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.timeout",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.UNSENT",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.upload",
        "result": true
      },
      {
        "name": "api.XMLHttpRequest.withCredentials",
        "result": true
      },
      {
        "name": "api.XMLHttpRequestEventTarget",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onabort",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onerror",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onload",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onloadend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onloadstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.onprogress",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XMLHttpRequestEventTarget' is undefined",
        "name": "api.XMLHttpRequestEventTarget.ontimeout",
        "result": null
      },
      {
        "name": "api.XMLHttpRequestUpload",
        "result": true
      },
      {
        "name": "api.XMLSerializer",
        "result": true
      },
      {
        "name": "api.XMLSerializer.serializeToString",
        "result": true
      },
      {
        "name": "api.XR",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.ondevicechange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.requestSession",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XR' is undefined",
        "name": "api.XR.supportsSession",
        "result": null
      },
      {
        "name": "api.XRBoundedReferenceSpace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRBoundedReferenceSpace' is undefined",
        "name": "api.XRBoundedReferenceSpace.boundsGeometry",
        "result": null
      },
      {
        "name": "api.XRFrame",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.getPose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.getViewerPose",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRFrame' is undefined",
        "name": "api.XRFrame.session",
        "result": null
      },
      {
        "name": "api.XRInputSource",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.gamepad",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.gripSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.handedness",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.targetRayMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSource' is undefined",
        "name": "api.XRInputSource.targetRaySpace",
        "result": null
      },
      {
        "name": "api.XRInputSourceArray",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceArray' is undefined",
        "name": "api.XRInputSourceArray.length",
        "result": null
      },
      {
        "name": "api.XRInputSourceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.buttonIndex",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.frame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourceEvent' is undefined",
        "name": "api.XRInputSourceEvent.inputSource",
        "result": null
      },
      {
        "name": "api.XRInputSourcesChangeEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.added",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.removed",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRInputSourcesChangeEvent' is undefined",
        "name": "api.XRInputSourcesChangeEvent.session",
        "result": null
      },
      {
        "name": "api.XRLayer",
        "result": false
      },
      {
        "name": "api.XRPose",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRPose' is undefined",
        "name": "api.XRPose.emulatedPosition",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRPose' is undefined",
        "name": "api.XRPose.transform",
        "result": null
      },
      {
        "name": "api.XRPresentationContext",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRPresentationContext' is undefined",
        "name": "api.XRPresentationContext.canvas",
        "result": null
      },
      {
        "name": "api.XRRay",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.direction",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.matrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRay' is undefined",
        "name": "api.XRRay.origin",
        "result": null
      },
      {
        "name": "api.XRReferenceSpace",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpace' is undefined",
        "name": "api.XRReferenceSpace.getOffsetReferenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpace' is undefined",
        "name": "api.XRReferenceSpace.onreset",
        "result": null
      },
      {
        "name": "api.XRReferenceSpaceEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpaceEvent' is undefined",
        "name": "api.XRReferenceSpaceEvent.referenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRReferenceSpaceEvent' is undefined",
        "name": "api.XRReferenceSpaceEvent.transform",
        "result": null
      },
      {
        "name": "api.XRRenderState",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.baseLayer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.depthFar",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.depthNear",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.inlineVerticalFieldOfView",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRenderState' is undefined",
        "name": "api.XRRenderState.outputContext",
        "result": null
      },
      {
        "name": "api.XRRigidTransform",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.inverse",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.matrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.orientation",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRRigidTransform' is undefined",
        "name": "api.XRRigidTransform.position",
        "result": null
      },
      {
        "name": "api.XRSession",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.cancelAnimationFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.end",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.environmentBlendMode",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.inputSources",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onblur",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onfocus",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.oninputsourceschange",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselect",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselectend",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.onselectstart",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.renderState",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.requestAnimationFrame",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.requestReferenceSpace",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRSession' is undefined",
        "name": "api.XRSession.updateRenderState",
        "result": null
      },
      {
        "name": "api.XRSessionEvent",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRSessionEvent' is undefined",
        "name": "api.XRSessionEvent.session",
        "result": null
      },
      {
        "name": "api.XRSpace",
        "result": false
      },
      {
        "name": "api.XRView",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.eye",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.projectionMatrix",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRView' is undefined",
        "name": "api.XRView.transform",
        "result": null
      },
      {
        "name": "api.XRViewerPose",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRViewerPose' is undefined",
        "name": "api.XRViewerPose.views",
        "result": null
      },
      {
        "name": "api.XRViewport",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.height",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.width",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.x",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRViewport' is undefined",
        "name": "api.XRViewport.y",
        "result": null
      },
      {
        "name": "api.XRWebGLLayer",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.antialias",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.context",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebuffer",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebufferHeight",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.framebufferWidth",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.getNativeFramebufferScaleFactor",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.getViewport",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'XRWebGLLayer' is undefined",
        "name": "api.XRWebGLLayer.ignoreDepthValues",
        "result": null
      },
      {
        "name": "api.console",
        "result": true
      },
      {
        "name": "api.console.assert",
        "result": true
      },
      {
        "name": "api.console.clear",
        "result": true
      },
      {
        "name": "api.console.count",
        "result": true
      },
      {
        "name": "api.console.countReset",
        "result": false
      },
      {
        "name": "api.console.debug",
        "result": true
      },
      {
        "name": "api.console.dir",
        "result": true
      },
      {
        "name": "api.console.dirxml",
        "result": true
      },
      {
        "name": "api.console.error",
        "result": true
      },
      {
        "name": "api.console.group",
        "result": true
      },
      {
        "name": "api.console.groupCollapsed",
        "result": true
      },
      {
        "name": "api.console.groupEnd",
        "result": true
      },
      {
        "name": "api.console.info",
        "result": true
      },
      {
        "name": "api.console.log",
        "result": true
      },
      {
        "name": "api.console.table",
        "result": false
      },
      {
        "name": "api.console.time",
        "result": true
      },
      {
        "name": "api.console.timeEnd",
        "result": true
      },
      {
        "name": "api.console.timeLog",
        "result": false
      },
      {
        "name": "api.console.trace",
        "result": true
      },
      {
        "name": "api.console.warn",
        "result": true
      },
      {
        "name": "api.CSS",
        "result": true
      },
      {
        "name": "api.CSS.animationWorklet",
        "result": false
      },
      {
        "name": "api.CSS.ch",
        "result": false
      },
      {
        "name": "api.CSS.cm",
        "result": false
      },
      {
        "name": "api.CSS.deg",
        "result": false
      },
      {
        "name": "api.CSS.dpcm",
        "result": false
      },
      {
        "name": "api.CSS.dpi",
        "result": false
      },
      {
        "name": "api.CSS.dppx",
        "result": false
      },
      {
        "name": "api.CSS.elementSources",
        "result": false
      },
      {
        "name": "api.CSS.em",
        "result": false
      },
      {
        "name": "api.CSS.escape",
        "result": false
      },
      {
        "name": "api.CSS.ex",
        "result": false
      },
      {
        "name": "api.CSS.fr",
        "result": false
      },
      {
        "name": "api.CSS.grad",
        "result": false
      },
      {
        "name": "api.CSS.Hz",
        "result": false
      },
      {
        "name": "api.CSS.ic",
        "result": false
      },
      {
        "name": "api.CSS.in",
        "result": false
      },
      {
        "name": "api.CSS.kHz",
        "result": false
      },
      {
        "name": "api.CSS.layoutWorklet",
        "result": false
      },
      {
        "name": "api.CSS.lh",
        "result": false
      },
      {
        "name": "api.CSS.mm",
        "result": false
      },
      {
        "name": "api.CSS.ms",
        "result": false
      },
      {
        "name": "api.CSS.number",
        "result": false
      },
      {
        "name": "api.CSS.paintWorklet",
        "result": false
      },
      {
        "name": "api.CSS.parseCommaValueList",
        "result": false
      },
      {
        "name": "api.CSS.parseDeclaration",
        "result": false
      },
      {
        "name": "api.CSS.parseDeclarationList",
        "result": false
      },
      {
        "name": "api.CSS.parseRule",
        "result": false
      },
      {
        "name": "api.CSS.parseRuleList",
        "result": false
      },
      {
        "name": "api.CSS.parseStylesheet",
        "result": false
      },
      {
        "name": "api.CSS.parseValue",
        "result": false
      },
      {
        "name": "api.CSS.parseValueList",
        "result": false
      },
      {
        "name": "api.CSS.pc",
        "result": false
      },
      {
        "name": "api.CSS.percent",
        "result": false
      },
      {
        "name": "api.CSS.pt",
        "result": false
      },
      {
        "name": "api.CSS.px",
        "result": false
      },
      {
        "name": "api.CSS.Q",
        "result": false
      },
      {
        "name": "api.CSS.rad",
        "result": false
      },
      {
        "name": "api.CSS.registerProperty",
        "result": false
      },
      {
        "name": "api.CSS.rem",
        "result": false
      },
      {
        "name": "api.CSS.rlh",
        "result": false
      },
      {
        "name": "api.CSS.s",
        "result": false
      },
      {
        "name": "api.CSS.supports",
        "result": true
      },
      {
        "name": "api.CSS.supports",
        "result": true
      },
      {
        "name": "api.CSS.turn",
        "result": false
      },
      {
        "name": "api.CSS.vb",
        "result": false
      },
      {
        "name": "api.CSS.vh",
        "result": false
      },
      {
        "name": "api.CSS.vi",
        "result": false
      },
      {
        "name": "api.CSS.vmax",
        "result": false
      },
      {
        "name": "api.CSS.vmin",
        "result": false
      },
      {
        "name": "api.CSS.vw",
        "result": false
      },
      {
        "name": "api.WebAssembly",
        "result": false
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.compile",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.compileStreaming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiate",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.instantiateStreaming",
        "result": null
      },
      {
        "message": "threw ReferenceError: 'WebAssembly' is undefined",
        "name": "api.WebAssembly.validate",
        "result": null
      }
    ]
  },
  "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240"
}
